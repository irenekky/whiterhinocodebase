<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml"
xmlns="http://www.w3.org/TR/REC-html40">

<head><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SQL</title>
    <link rel="stylesheet" href="W3.css"></head>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot
Persistence</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>pramod j. sadalage &amp; martin fowler</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>CHACHA</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>6</o:TotalTime>
  <o:Created>2021-03-01T06:06:00Z</o:Created>
  <o:LastSaved>2021-03-01T06:06:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>46856</o:Words>
  <o:Characters>267085</o:Characters>
  <o:Lines>2225</o:Lines>
  <o:Paragraphs>626</o:Paragraphs>
  <o:CharactersWithSpaces>313315</o:CharactersWithSpaces>
  <o:Version>16.00</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<link rel=themeData href="nosql_files/themedata.thmx">
<link rel=colorSchemeMapping href="nosql_files/colorschememapping.xml">
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:TrackMoves>false</w:TrackMoves>
  <w:TrackFormatting/>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DoNotPromoteQF/>
  <w:LidThemeOther>EN-GB</w:LidThemeOther>
  <w:LidThemeAsian>X-NONE</w:LidThemeAsian>
  <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:SplitPgBreakAndParaMark/>
   <w:EnableOpenTypeKerning/>
   <w:DontFlipMirrorIndents/>
   <w:OverrideTableStyleHps/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:DoNotOptimizeForBrowser/>
  <m:mathPr>
   <m:mathFont m:val="Cambria Math"/>
   <m:brkBin m:val="before"/>
   <m:brkBinSub m:val="&#45;-"/>
   <m:smallFrac m:val="off"/>
   <m:dispDef/>
   <m:lMargin m:val="0"/>
   <m:rMargin m:val="0"/>
   <m:defJc m:val="centerGroup"/>
   <m:wrapIndent m:val="1440"/>
   <m:intLim m:val="subSup"/>
   <m:naryLim m:val="undOvr"/>
  </m:mathPr></w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="false"
  DefSemiHidden="false" DefQFormat="false" DefPriority="99"
  LatentStyleCount="371">
  <w:LsdException Locked="false" Priority="0" QFormat="true" Name="Normal"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 1"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 2"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 3"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 4"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 5"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 6"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 7"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 8"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 9"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 7"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 8"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 9"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 1"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 2"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 3"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 4"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 5"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 6"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 7"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 8"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 9"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Normal Indent"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="footnote text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="annotation text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="header"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="footer"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index heading"/>
  <w:LsdException Locked="false" Priority="35" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="caption"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="table of figures"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="envelope address"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="envelope return"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="footnote reference"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="annotation reference"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="line number"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="page number"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="endnote reference"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="endnote text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="table of authorities"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="macro"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="toa heading"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number 5"/>
  <w:LsdException Locked="false" Priority="10" QFormat="true" Name="Title"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Closing"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Signature"/>
  <w:LsdException Locked="false" Priority="1" SemiHidden="true"
   UnhideWhenUsed="true" Name="Default Paragraph Font"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text Indent"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Message Header"/>
  <w:LsdException Locked="false" Priority="11" QFormat="true" Name="Subtitle"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Salutation"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Date"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text First Indent"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text First Indent 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Note Heading"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text Indent 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text Indent 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Block Text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Hyperlink"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="FollowedHyperlink"/>
  <w:LsdException Locked="false" Priority="22" QFormat="true" Name="Strong"/>
  <w:LsdException Locked="false" Priority="20" QFormat="true" Name="Emphasis"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Document Map"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Plain Text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="E-mail Signature"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Top of Form"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Bottom of Form"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Normal (Web)"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Acronym"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Address"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Cite"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Code"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Definition"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Keyboard"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Preformatted"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Sample"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Typewriter"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Variable"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Normal Table"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="annotation subject"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="No List"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Outline List 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Outline List 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Outline List 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Simple 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Simple 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Simple 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Classic 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Classic 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Classic 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Classic 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Colorful 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Colorful 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Colorful 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 7"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 8"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 7"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 8"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table 3D effects 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table 3D effects 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table 3D effects 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Contemporary"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Elegant"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Professional"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Subtle 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Subtle 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Web 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Web 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Web 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Balloon Text"/>
  <w:LsdException Locked="false" Priority="39" Name="Table Grid"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Theme"/>
  <w:LsdException Locked="false" SemiHidden="true" Name="Placeholder Text"/>
  <w:LsdException Locked="false" Priority="1" QFormat="true" Name="No Spacing"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 1"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 1"/>
  <w:LsdException Locked="false" SemiHidden="true" Name="Revision"/>
  <w:LsdException Locked="false" Priority="34" QFormat="true"
   Name="List Paragraph"/>
  <w:LsdException Locked="false" Priority="29" QFormat="true" Name="Quote"/>
  <w:LsdException Locked="false" Priority="30" QFormat="true"
   Name="Intense Quote"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 1"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 1"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 2"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 2"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 2"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 3"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 3"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 3"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 4"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 4"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 4"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 5"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 5"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 5"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 6"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 6"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 6"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="19" QFormat="true"
   Name="Subtle Emphasis"/>
  <w:LsdException Locked="false" Priority="21" QFormat="true"
   Name="Intense Emphasis"/>
  <w:LsdException Locked="false" Priority="31" QFormat="true"
   Name="Subtle Reference"/>
  <w:LsdException Locked="false" Priority="32" QFormat="true"
   Name="Intense Reference"/>
  <w:LsdException Locked="false" Priority="33" QFormat="true" Name="Book Title"/>
  <w:LsdException Locked="false" Priority="37" SemiHidden="true"
   UnhideWhenUsed="true" Name="Bibliography"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="TOC Heading"/>
  <w:LsdException Locked="false" Priority="41" Name="Plain Table 1"/>
  <w:LsdException Locked="false" Priority="42" Name="Plain Table 2"/>
  <w:LsdException Locked="false" Priority="43" Name="Plain Table 3"/>
  <w:LsdException Locked="false" Priority="44" Name="Plain Table 4"/>
  <w:LsdException Locked="false" Priority="45" Name="Plain Table 5"/>
  <w:LsdException Locked="false" Priority="40" Name="Grid Table Light"/>
  <w:LsdException Locked="false" Priority="46" Name="Grid Table 1 Light"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark"/>
  <w:LsdException Locked="false" Priority="51" Name="Grid Table 6 Colorful"/>
  <w:LsdException Locked="false" Priority="52" Name="Grid Table 7 Colorful"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 1"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 1"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 1"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 1"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 1"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 2"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 2"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 2"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 2"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 2"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 3"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 3"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 3"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 3"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 3"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 4"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 4"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 4"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 4"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 4"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 5"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 5"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 5"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 5"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 5"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 6"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 6"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 6"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 6"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 6"/>
  <w:LsdException Locked="false" Priority="46" Name="List Table 1 Light"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark"/>
  <w:LsdException Locked="false" Priority="51" Name="List Table 6 Colorful"/>
  <w:LsdException Locked="false" Priority="52" Name="List Table 7 Colorful"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 1"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 1"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 1"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 1"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 1"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 2"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 2"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 2"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 2"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 2"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 3"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 3"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 3"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 3"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 3"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 4"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 4"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 4"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 4"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 4"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 5"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 5"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 5"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 5"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 5"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 6"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 6"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 6"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 6"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 6"/>
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Helvetica;
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:2 2 6 3 4 5 5 2 3 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Helv;
	panose-1:2 11 6 4 2 2 2 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"New York";
	panose-1:2 4 5 3 6 5 6 2 3 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:System;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;
	mso-font-alt:"\FF2D\FF33 \660E\671D";
	mso-font-charset:128;
	mso-generic-font-family:roman;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:Batang;
	panose-1:2 3 6 0 0 1 1 1 1 1;
	mso-font-alt:\BC14\D0D5;
	mso-font-charset:129;
	mso-generic-font-family:auto;
	mso-font-pitch:fixed;
	mso-font-signature:1 151388160 16 0 524288 0;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:\5B8B\4F53;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:1 135135232 16 0 262144 0;}
@font-face
	{font-family:PMingLiU;
	panose-1:2 1 6 1 0 1 1 1 1 1;
	mso-font-alt:\65B0\7D30\660E\9AD4;
	mso-font-charset:136;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:1 134742016 16 0 1048576 0;}
@font-face
	{font-family:"MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;
	mso-font-alt:"\FF2D\FF33 \30B4\30B7\30C3\30AF";
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:Dotum;
	panose-1:2 11 6 0 0 1 1 1 1 1;
	mso-font-alt:\B3CB\C6C0;
	mso-font-charset:129;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:1 151388160 16 0 524288 0;}
@font-face
	{font-family:SimHei;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:\9ED1\4F53;
	mso-font-charset:134;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:1 135135232 16 0 262144 0;}
@font-face
	{font-family:MingLiU;
	panose-1:2 1 6 9 0 1 1 1 1 1;
	mso-font-alt:\7D30\660E\9AD4;
	mso-font-charset:136;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:1 134742016 16 0 1048576 0;}
@font-face
	{font-family:Mincho;
	panose-1:2 2 6 9 4 3 5 8 3 5;
	mso-font-alt:\660E\671D;
	mso-font-charset:128;
	mso-generic-font-family:roman;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:Gulim;
	panose-1:2 11 6 0 0 1 1 1 1 1;
	mso-font-alt:\AD74\B9BC;
	mso-font-charset:129;
	mso-generic-font-family:roman;
	mso-font-pitch:fixed;
	mso-font-signature:1 151388160 16 0 524288 0;}
@font-face
	{font-family:Century;
	panose-1:2 4 6 4 5 5 5 2 3 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Angsana New";
	panose-1:2 2 6 3 5 4 5 2 3 4;
	mso-font-charset:222;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:16777217 0 0 0 65536 0;}
@font-face
	{font-family:"Cordia New";
	panose-1:2 11 3 4 2 2 2 2 2 4;
	mso-font-charset:222;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:16777217 0 0 0 65536 0;}
@font-face
	{font-family:Mangal;
	panose-1:0 0 4 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:8192 0 0 0 0 0;}
@font-face
	{font-family:Latha;
	panose-1:2 0 4 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:262144 0 0 0 0 0;}
@font-face
	{font-family:Sylfaen;
	panose-1:1 10 5 2 5 3 6 3 3 3;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:12583555 0 0 0 13 0;}
@font-face
	{font-family:Vrinda;
	panose-1:0 0 4 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Raavi;
	panose-1:2 0 5 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Shruti;
	panose-1:2 0 5 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Sendnya;
	panose-1:0 0 4 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Gautami;
	panose-1:2 0 5 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Tunga;
	panose-1:0 0 4 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:"Estrangelo Edessa";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:"Yu Gothic";
	panose-1:2 11 4 0 0 0 0 0 0 0;
	mso-font-alt:\6E38\30B4\30B7\30C3\30AF;
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:DengXian;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:\7B49\7EBF;
	mso-font-charset:134;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:1 135135232 16 0 262144 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Calibri Light";
	panose-1:2 15 3 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-469750017 -1073732485 9 0 511 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-469750017 -1073732485 9 0 511 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:.85pt;
	margin-bottom:5.55pt;
	margin-left:10pt;
	text-indent:-.5pt;
	line-height:104%;
	font-size:13.0pt;
	font-family:"Calibri",sans-serif;
	color:black;}
h2
	{mso-style-priority:9;
	mso-style-qformat:yes;
	mso-style-parent:"";
	mso-style-link:"Heading 2 Char";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:16.45pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:21.0pt;
	mso-bidi-font-size:11.0pt;
	font-family:"Times New Roman",serif;
	mso-fareast-font-family:"Times New Roman";
	color:black;
	mso-bidi-font-weight:normal;}
h3
	{mso-style-priority:9;
	mso-style-qformat:yes;
	mso-style-parent:"";
	mso-style-link:"Heading 3 Char";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:2.75pt;
	margin-left:75.1pt;
	text-indent:-.5pt;
	line-height:110%;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:17.5pt;
	mso-bidi-font-size:11.0pt;
	font-family:"Times New Roman",serif;
	mso-fareast-font-family:"Times New Roman";
	color:black;
	mso-bidi-font-weight:normal;}
h4
	{mso-style-priority:9;
	mso-style-qformat:yes;
	mso-style-parent:"";
	mso-style-link:"Heading 4 Char";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:190.55pt;
	margin-bottom:5.0pt;
	margin-left:239.3pt;
	text-indent:-.5pt;
	line-height:105%;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:15.0pt;
	mso-bidi-font-size:11.0pt;
	font-family:"Times New Roman",serif;
	mso-fareast-font-family:"Times New Roman";
	color:black;
	mso-bidi-font-weight:normal;}
h5
	{mso-style-priority:9;
	mso-style-qformat:yes;
	mso-style-parent:"";
	mso-style-link:"Heading 5 Char";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.4pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:11.5pt;
	mso-bidi-font-size:11.0pt;
	font-family:"Times New Roman",serif;
	mso-fareast-font-family:"Times New Roman";
	color:#0000EE;
	mso-bidi-font-weight:normal;
	text-underline:#0000EE;
	text-decoration:underline;
	text-underline:single;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-parent:"";
	mso-style-link:"Heading 1";
	mso-ansi-font-size:30.0pt;
	font-family:"Times New Roman",serif;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
span.Heading5Char
	{mso-style-name:"Heading 5 Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-parent:"";
	mso-style-link:"Heading 5";
	mso-ansi-font-size:11.5pt;
	font-family:"Times New Roman",serif;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#0000EE;
	font-weight:bold;
	mso-bidi-font-weight:normal;
	text-underline:#0000EE;
	text-decoration:underline;
	text-underline:single;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-parent:"";
	mso-style-link:"Heading 2";
	mso-ansi-font-size:21.0pt;
	font-family:"Times New Roman",serif;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
span.Heading4Char
	{mso-style-name:"Heading 4 Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-parent:"";
	mso-style-link:"Heading 4";
	mso-ansi-font-size:15.0pt;
	font-family:"Times New Roman",serif;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-parent:"";
	mso-style-link:"Heading 3";
	mso-ansi-font-size:17.5pt;
	font-family:"Times New Roman",serif;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
span.msoIns
	{mso-style-type:export-only;
	mso-style-name:"";
	text-decoration:underline;
	text-underline:single;
	color:teal;}
span.msoDel
	{mso-style-type:export-only;
	mso-style-name:"";
	text-decoration:line-through;
	color:red;}
.MsoChpDefault
	{mso-style-type:export-only;
	mso-default-props:yes;
	mso-ascii-font-family:Calibri;
	mso-ascii-theme-font:minor-latin;
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;
	mso-hansi-font-family:Calibri;
	mso-hansi-theme-font:minor-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:minor-bidi;}
.MsoPapDefault
	{mso-style-type:export-only;
	margin-bottom:8.0pt;
	line-height:107%;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:4.5pt 1.0in 1.0in 1.0in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.WordSection1
	{page:WordSection1;}
@page WordSection2
	{size:8.5in 11.0in;
	margin:4.5pt 4.25pt 5.0pt 5.0pt;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.WordSection2
	{page:WordSection2;}
@page WordSection3
	{size:8.5in 11.0in;
	margin:4.5pt 1.0in 12.75pt 1.0in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.WordSection3
	{page:WordSection3;}
 /* List Definitions */
 @list l0
	{mso-list-id:11303209;
	mso-list-type:hybrid;
	mso-list-template-ids:-952840718 1161211868 -135394802 661674742 -87232408 1578163844 242007202 161902988 2033846028 -1119984352;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:34.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:79.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:115.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:151.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:187.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:223.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:259.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:295.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:331.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1
	{mso-list-id:48379182;
	mso-list-type:hybrid;
	mso-list-template-ids:-343377948 -859421320 1869354684 -2142098562 -949995688 -1140800762 807203582 -1344001330 -1957294410 -780639596;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:34.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:79.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:115.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:151.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:187.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:223.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:259.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:295.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:331.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2
	{mso-list-id:49962900;
	mso-list-type:hybrid;
	mso-list-template-ids:141856240 -1714943604 -1984143576 -101709984 1332877790 -519536116 1705676714 -712476710 1366041690 -316636072;}
@list l2:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:34.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:79.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:115.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:151.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:187.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:223.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:259.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:295.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:331.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3
	{mso-list-id:131753961;
	mso-list-type:hybrid;
	mso-list-template-ids:1285560084 -1175009210 -1583286196 513041096 595369662 -1867190796 1658360706 -1904344604 -247941690 534157242;}
@list l3:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:34.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:79.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:115.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:151.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:187.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:223.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:259.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:295.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:331.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4
	{mso-list-id:133957965;
	mso-list-type:hybrid;
	mso-list-template-ids:-51375938 -1472271834 923691286 -250571944 265351582 -112188274 -647435792 626284420 -535023856 -75878042;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:45.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:86.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:122.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:158.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:194.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:230.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:266.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:302.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:338.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5
	{mso-list-id:148980922;
	mso-list-type:hybrid;
	mso-list-template-ids:-1272147950 -1448053380 2025455856 1835045598 -177710790 1786001988 -1500875838 2078952612 -929804272 -826355414;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:34.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:79.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:115.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:151.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:187.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:223.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:259.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:295.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:331.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l6
	{mso-list-id:706638404;
	mso-list-type:hybrid;
	mso-list-template-ids:-1172780788 -1941129080 -640018254 -1343213182 -1701144006 142877534 1279700526 -872911226 -1936411404 1839890860;}
@list l6:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:34.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l6:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:79.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l6:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:115.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l6:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:151.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l6:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:187.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l6:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:223.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l6:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:259.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l6:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:295.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l6:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:331.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l7
	{mso-list-id:820392015;
	mso-list-type:hybrid;
	mso-list-template-ids:240539730 -1309385348 -1189431038 308060158 1313917524 -1789250152 1945806210 19984778 -863189546 476354428;}
@list l7:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:34.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l7:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:66.75pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l7:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:102.75pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l7:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:138.75pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l7:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:174.75pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l7:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:210.75pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l7:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:246.75pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l7:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:282.75pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l7:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:318.75pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l8
	{mso-list-id:1240678959;
	mso-list-type:hybrid;
	mso-list-template-ids:-1566399228 412763180 -1265453362 -1974575992 1237071750 1928091432 864968610 1719796228 -736070130 -1978602852;}
@list l8:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:34.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l8:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:83.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l8:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:119.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l8:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:155.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l8:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:191.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l8:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:227.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l8:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:263.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l8:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:299.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l8:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:335.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l9
	{mso-list-id:1372343125;
	mso-list-type:hybrid;
	mso-list-template-ids:2134908078 -1108721354 433245352 -66017726 -773310256 40792072 1517594384 -1938118924 1318383732 1273768156;}
@list l9:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:45.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l9:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:61.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l9:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:97.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l9:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:133.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l9:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:169.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l9:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:205.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l9:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:241.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l9:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:277.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l9:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:313.0pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l10
	{mso-list-id:1514684245;
	mso-list-type:hybrid;
	mso-list-template-ids:-691222024 -1389089946 1513413264 1191732566 -228144348 -1037263938 943204844 -1799592676 1611719172 1003783498;}
@list l10:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:34.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l10:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:83.85pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l10:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:119.85pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l10:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:155.85pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l10:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:191.85pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l10:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:227.85pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l10:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:263.85pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l10:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:299.85pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l10:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:335.85pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l11
	{mso-list-id:1946645498;
	mso-list-type:hybrid;
	mso-list-template-ids:806757982 943588118 -1164536564 1934931616 -1405737754 32640188 107872400 66086334 -1333208602 -701312238;}
@list l11:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:34.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l11:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:79.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l11:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:115.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l11:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:151.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l11:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:187.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l11:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:223.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l11:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:259.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l11:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:295.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l11:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:331.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l12
	{mso-list-id:2084915388;
	mso-list-type:hybrid;
	mso-list-template-ids:1135773382 -960860956 -629145130 -716654468 -296978532 577959176 -11365884 1145090980 574944320 -930578298;}
@list l12:level1
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:34.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l12:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:79.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l12:level3
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:115.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l12:level4
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:151.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l12:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:187.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l12:level6
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:223.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l12:level7
	{mso-level-number-format:bullet;
	mso-level-text:;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:259.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l12:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:295.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l12:level9
	{mso-level-number-format:bullet;
	mso-level-text:\25AA;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:331.5pt;
	text-indent:0in;
	mso-ansi-font-size:15.0pt;
	mso-bidi-font-size:15.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	border:none;
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;
	text-underline:black;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin-top:0in;
	mso-para-margin-right:0in;
	mso-para-margin-bottom:8.0pt;
	mso-para-margin-left:0in;
	line-height:107%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;
	mso-ascii-font-family:Calibri;
	mso-ascii-theme-font:minor-latin;
	mso-hansi-font-family:Calibri;
	mso-hansi-theme-font:minor-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:minor-bidi;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1060"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>


<body lang=EN-GB style='tab-interval:.5in'>
	
    <div class="w3-center">
       <p class="w3-right">whiterhinoschool@gmail.com</p>
    <img class="w3-logo w3-left" src="images/whiterhino.jpg"><img>
    <form action="https://www.paypal.com/donate" method="post" target="_top">
        <input type="hidden" name="hosted_button_id" value="XRVHR3RK7J522" />
        <input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
        <img alt="" border="0" src="https://www.paypal.com/en_KE/i/scr/pixel.gif" width="1" height="1" />
        </form>
        



   </div>
        <div class="w3-bar w3-teal">
            
            <a href="/index.html" class="w3-bar-item w3-button">Home</a></li>
            <a href="/backend.html" active class="w3-bar-item w3-button">Back end developement</a></li>
            <a href="/frontend.html" class="w3-bar-item w3-button">Front end developement</a></li>
            <a href="/fullstack.html" class="w3-bar-item w3-button">Fullstack developement</a></li>
           
            
            
            
            
           
            
            
        
       
    </div>
                
                <div class='w3-bar'>
           
                    <a href="myhtm.html"   class="w3-bar-item w3-button w3-white">Html</a>
                    <a href="css.html"  active class="w3-bar-item w3-button w3-white">Css</a>
                    <a href="javascript.htm" class="w3-bar-item w3-button w3-white" >Javascript</a>
					<a href="sql.htm" class="w3-bar-item w3-button w3-white" >DATABASE - SQL</a>
					<a href="nosql.htm" class="w3-bar-item w3-button w3-black" >DATABASE - NoSQL</a>
					<a href="frameworks.html"  class="w3-bar-item w3-button w3-white">Frame works and libraries</a>
            
                    </div>

<div class=WordSection1>

	<div class="w3-container" style="margin-right: 200px; margin-left: 200px;" />
	<h1 class="w3-center">Nosql</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:37.2pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><o:p>&nbsp;</o:p></p>



<span style='font-size:15.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Times New Roman",serif;mso-fareast-font-family:"Times New Roman";
color:black;mso-ansi-language:EN-GB;mso-fareast-language:EN-GB;mso-bidi-language:
AR-SA'><br clear=all style='page-break-before:always;mso-break-type:section-break'>
</span>

<div class=WordSection2><br clear=all style='mso-special-character:line-break;
page-break-before:always'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:3.0pt;
margin-left:.5pt;line-height:107%'><o:p>&nbsp;</o:p></p>


<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>Why Are
NoSQL Databases Interesting?</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>We see two primary reasons why people consider using a
NoSQL database.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:34.5pt;margin-bottom:.0001pt;text-indent:-9.0pt;mso-list:l5 level1 lfo1'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><b
style='mso-bidi-font-weight:normal'>Application development productivity.</b> A
lot of application development effort is spent on mapping data between
in-memory data structures and a relational database. A NoSQL database</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:35.0pt'>may provide a data model that better fits the applications
needs, thus simplifying that interaction and resulting in less code to write,
debug, and evolve.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l5 level1 lfo1'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><b
style='mso-bidi-font-weight:normal'>Large-scale data.</b> Organizations are
finding it valuable to capture more data and process it more quickly. They are
finding it expensive, if even possible, to do so with relational databases. The
primary reason is that a relational database is designed to run on a single
machine, but it is usually more economic to run large data and computing loads
on clusters of many smaller and cheaper machines. Many NoSQL databases are
designed explicitly to run on clusters, so they make a better fit for big data
scenarios.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;margin-left:
-.25pt;line-height:110%'><span style='font-size:17.5pt;mso-bidi-font-size:11.0pt;
line-height:110%'>Whats in the Book</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Weve broken this book up into two parts. The first part
concentrates on core concepts that we think you need to know in order to judge
whether NoSQL databases are relevant for you and how they differ. In the second
part we concentrate more on implementing systems with NoSQL databases.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'><u style='text-underline:#0000EE'><span
style='color:#0000EE'>Chapter 1</span></u> begins by explaining why NoSQL has
had such a rapid risethe need to process larger data volumes led to a shift,
in large systems, from scaling vertically to scaling horizontally on clusters.
This explains an important feature of the data model of many NoSQL
databasesthe explicit storage of a rich structure of closely related data that
is accessed as a unit. In this book we call this kind of structure an <i
style='mso-bidi-font-style:normal'>aggregate</i>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'><u style='text-underline:#0000EE'><span
style='color:#0000EE'>Chapter 2</span></u> describes how aggregates manifest
themselves in three of the main data models in NoSQL land: key-value (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Key-Value and
Document Data Models</span></u>,p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>20</span></u>), document (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Key-Value and Document Data Models</span></u>,p. <u
style='text-underline:#0000EE'><span style='color:#0000EE'>20</span></u>), and
column family (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Column-Family
Stores</span></u>,p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>21</span></u>) databases. Aggregates provide a natural
unit of interaction for many kinds of applications, which both improves running
on a cluster and makes it easier to program the data access. <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Chapter 3</span></u>
shifts to the downside of aggregatesthe difficulty of handling relationships
(<u style='text-underline:#0000EE'><span style='color:#0000EE'>Relationships</span></u>,
p. <u style='text-underline:#0000EE'><span style='color:#0000EE'>25</span></u>)
between entities in different aggregates. This leads us naturally to graph
databases (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Graph
Databases</span></u>,p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>26</span></u>), a NoSQL data model that doesnt fit into
the aggregate-oriented camp. We also look at the common characteristic of NoSQL
databases that operate without a schema (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Schemaless Databases</span></u>,p. <u style='text-underline:
#0000EE'><span style='color:#0000EE'>28</span></u>)a feature that provides
some greater flexibility, but not as much as you might first think.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>Having covered the
data-modeling aspect of NoSQL, we move on to distribution: <u style='text-underline:
#0000EE'><span style='color:#0000EE'>Chapter 4 </span></u>describes how
databases distribute data to run on clusters. This breaks down into sharding</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>(<u style='text-underline:#0000EE'><span style='color:
#0000EE'>Sharding</span></u>,p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>38</span></u>) and replication, the latter being either
master-slave (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Master-Slave
Replication</span></u>,</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>40</span></u>) or peer-to-peer (<u style='text-underline:
#0000EE'><span style='color:#0000EE'>Peer-to-Peer Replication</span></u>,p. <u
style='text-underline:#0000EE'><span style='color:#0000EE'>42</span></u>)
replication. With the distribution models defined, we can then move on to the
issue of consistency. NoSQL databases provide a more varied range of
consistency options than relational databaseswhich is a consequence of being
friendly to clusters. So <u style='text-underline:#0000EE'><span
style='color:#0000EE'>Chapter 5</span></u> talks about how consistency changes
for updates (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Update
Consistency</span></u>,p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>47</span></u>) and reads (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Read Consistency</span></u>,p. <u style='text-underline:
#0000EE'><span style='color:#0000EE'>49</span></u>), the role of quorums (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Quorums</span></u>,
p. <u style='text-underline:#0000EE'><span style='color:#0000EE'>57</span></u>),
and how even some durability (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Relaxing Durability</span></u>,p. <u style='text-underline:
#0000EE'><span style='color:#0000EE'>56</span></u>) can be traded off. If
youve heard anything about NoSQL, youll almost certainly have heard of the
CAP theorem; the <u style='text-underline:#0000EE'><span style='color:#0000EE'>The
CAP Theorem</span></u>section on p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>53 </span></u>explains what it is and how it fits in.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>While these chapters concentrate
primarily on the principles of how data gets distributed and kept consistent,
the next two chapters talk about a couple of important tools that make this
work. <u style='text-underline:#0000EE'><span style='color:#0000EE'>Chapter 6 </span></u>describes
version stamps, which are for keeping track of changes and detecting
inconsistencies. <u style='text-underline:#0000EE'><span style='color:#0000EE'>Chapter
7</span></u> outlines map-reduce, which is a particular way of organizing
parallel computation that fits in well with clusters and thus with NoSQL
systems.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Once were done with concepts, we move
to implementation issues by looking at some example databases under the four
key categories: <u style='text-underline:#0000EE'><span style='color:#0000EE'>Chapter
8</span></u> uses Riak as an example of key-value databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Chapter 9</span></u>
takes MongoDB as an example for document databases, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>Chapter 10</span></u> chooses Cassandra to
explore column-family databases, and finally <u style='text-underline:#0000EE'><span
style='color:#0000EE'>Chapter 11</span></u> plucks Neo4J as an example of graph
databases. We must stress that this is not a comprehensive studythere are too
many out there to write about, let alone for us to try. Nor does our choice of
examples imply any recommendations. Our aim here is to give you a feel for the
variety of stores that exist and for how different database technologies use
the concepts we outlined earlier. Youll see what kind of code you need to
write to program against these systems and get a glimpse of the mindset youll
need to use them.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>A common statement about NoSQL databases
is that since they have no schema, there is no difficulty in changing the
structure of data during the life of an application. We disagreea schemaless
database still has an implicit schema that needs change discipline when you
implement it, so <u style='text-underline:#0000EE'><span style='color:#0000EE'>Chapter
12</span></u> explains how to do data migration both for strong schemas and for
schemaless systems.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.35pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>All of this should make it clear that
NoSQL is not a single thing, nor is it something that will replace relational
databases. <u style='text-underline:#0000EE'><span style='color:#0000EE'>Chapter
13</span></u> looks at this future world of Polyglot Persistence, where
multiple data-storage worlds coexist, even within the same application. <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Chapter 14</span></u>
then expands our horizons beyond this book, considering other technologies that
we havent covered that may also be a part of this polyglot-persistent world.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.1pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>With all of this information, you are finally at a
point where you can make a choice of what data storage technologies to use, so
our final chapter (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Chapter
15</span></u>, <u style='text-underline:#0000EE'><span style='color:#0000EE'>Choosing
Your Database</span></u>,p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>147</span></u>) offers some advice on how to think about
these choices. In our view, there are two key factorsfinding a productive
programming model where the data storage model is well aligned to your
application, and ensuring that you can get the data access performance and
resilience you need. Since this is early days in the NoSQL life story, were
afraid that we dont have a well-defined procedure to follow, and youll need
to test your options in the context of your needs.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>This is a brief overviewweve been very
deliberate in limiting the size of this book. Weve selected the information we
think is the most importantso that you dont have to. If you are going to
seriously investigate these technologies, youll need to go further than what
we cover here, but we hope this book provides a good context to start you on
your way.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.6pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>We also need to stress that this is a very volatile
field of the computer industry. Important aspects of these stores are changing
every yearnew features, new databases. Weve made a strong effort to focus on
concepts, which we think will be valuable to understand even as the underlying
technology changes. Were pretty confident that most of what we say will have
this longevity, but absolutely sure that not all of it will.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;margin-left:
-.25pt;line-height:110%'><span style='font-size:17.5pt;mso-bidi-font-size:11.0pt;
line-height:110%'>Who Should Read This Book</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>Our target audience for this book is people who are
considering using some form of a NoSQL database. This may be for a new project,
or because they are hitting barriers that are suggesting a shift on an existing
project.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Our aim is to give you enough
information to know whether NoSQL technology makes sense for your needs, and if
so which tool to explore in more depth. Our primary imagined audience is an
architect or technical lead, but we think this book is also valuable for people
involved in software management who want to get an overview of this new
technology. We also think that if youre a developer who wants an overview of
this technology, this book will be a good starting point.</p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:3.75pt;
margin-bottom:.15pt;margin-left:.5pt;text-align:right;line-height:107%'>We
dont go into the details of programming and deploying specific databases
herewe leave that</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>for specialist books. Weve also been very firm on a page
limit, to keep this book a brief introduction. This is the kind of book we
think you should be able to read on a plane flight: It wont answer all your
questions but should give you a good set of questions to ask.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.35pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>If youve already delved into the world of
NoSQL, this book probably wont commit any new items to your store of
knowledge. However, it may still be useful by helping you explain what youve
learned to others. Making sense of the issues around NoSQL is importantparticularly
if youre trying to persuade someone to consider using NoSQL in a project.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;margin-left:
-.25pt;line-height:110%'><span style='font-size:17.5pt;mso-bidi-font-size:11.0pt;
line-height:110%'>What Are the Databases</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>In this book, weve followed a common approach of
categorizing NoSQL databases according to their data model. Here is a table of
the four data models and some of the databases that fit each model. This is not
a comprehensive listit only mentions the more common databases weve come
across. At the time of writing, you can find more comprehensive lists at <a
href="http://nosql-database.org/"><span style='color:#0000EE'>http://nosql-database.org</span></a><a
href="http://nosql-database.org/"><span style='color:black;text-decoration:
none;text-underline:none'> </span></a>and <a
href="http://nosql.mypopescu.com/kb/nosql"><span style='color:#0000EE'>http://nosql.mypopescu.com/kb/nosql</span></a>.
For each category, we mark with italics the database we use as an example in the
relevant chapter.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Our goal is to pick a representative
tool from each of the categories of the databases. While we talk about specific
examples, most of the discussion should apply to the entire category, even
though these products are unique and cannot be generalized as such. We will
pick one database for each of the key-value, document, column family, and graph
databases; where appropriate, we will mention other products that may fulfill a
specific feature need.<br clear=all style='mso-special-character:line-break;
page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.1pt;
margin-left:72.7pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600"
 o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"
 stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="Picture_x0020_1203" o:spid="_x0000_i1124" type="#_x0000_t75"
 style='width:450pt;height:447pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image001.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=600 height=596
src="nosql_files/image001.jpg" v:shapes="Picture_x0020_1203"><![endif]></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>This classification by data model is useful,
but crude. The lines between the different data models, such as the distinction
between key-value and document databases (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Key-Value and Document Data Models</span></u>,p. <u
style='text-underline:#0000EE'><span style='color:#0000EE'>20</span></u>), are
often blurry. Many databases dont fit cleanly into categories; for example,
OrientDB calls itself both a document database and a graph database.</p>

<span style='font-size:15.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Times New Roman",serif;mso-fareast-font-family:"Times New Roman";
color:black;mso-ansi-language:EN-GB;mso-fareast-language:EN-GB;mso-bidi-language:
AR-SA'><br clear=all style='mso-special-character:line-break;page-break-before:
always'>
</span>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'><o:p>&nbsp;</o:p></p>

<h1 style='margin-left:178.95pt'>Part I: Understand<br clear=all
style='mso-special-character:line-break;page-break-before:always'>
</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.45pt;
margin-left:-.25pt;line-height:107%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:21.0pt;mso-bidi-font-size:11.0pt;line-height:107%'>Chapter 1.
Why NoSQL?</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>For almost as long as weve been in the software
profession, relational databases have been the default choice for serious data
storage, especially in the world of enterprise applications. If youre an
architect starting a new project, your only choice is likely to be which
relational database to use. (And often not even that, if your company has a
dominant vendor.) There have been times when a database technology threatened
to take a piece of the action, such as object databases in the 1990s, but
these alternatives never got anywhere.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:10.6pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>After such a long period of dominance, the
current excitement about NoSQL databases comes as a surprise. In this chapter
well explore why relational databases became so dominant, and why we think the
current rise of NoSQL databases isnt a flash in the pan.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;margin-left:
-.25pt;line-height:110%'><span style='font-size:17.5pt;mso-bidi-font-size:11.0pt;
line-height:110%'>1.1. The Value of Relational Databases</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.25pt'>Relational databases have become such an embedded part of
our computing culture that its easy to take them for granted. Its therefore
useful to revisit the benefits they provide.</p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt;line-height:105%'><span style='font-size:15.0pt;mso-bidi-font-size:11.0pt;
line-height:105%'>1.1.1. Getting at Persistent Data</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Probably the most obvious value of a database is keeping
large amounts of persistent data. Most computer architectures have the notion
of two areas of memory: a fast volatile main memoryand a larger but slower
backing store.Main memory is both limited in space and loses all data when
you lose power or something bad happens to the operating system. Therefore, to
keep data around, we write it to a backing store, commonly seen a disk
(although these days that disk can be persistent memory).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:11.25pt;margin-bottom:
9.1pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>The backing store can be organized in all
sorts of ways. For many productivity applications (such as word processors),
its a file in the file system of the operating system. For most enterprise
applications, however, the backing store is a database. The database allows
more flexibility than a file system in storing large amounts of data in a way
that allows an application program to get at small bits of that information
quickly and easily.</p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt;line-height:105%'><span style='font-size:15.0pt;mso-bidi-font-size:11.0pt;
line-height:105%'>1.1.2. Concurrency</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>Enterprise applications tend to have many people looking
at the same body of data at once, possibly modifying that data. Most of the
time they are working on different areas of that data, but occasionally they
operate on the same bit of data. As a result, we have to worry about
coordinating these interactions to avoid such things as double booking of hotel
rooms.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Concurrency is notoriously difficult to get right,
with all sorts of errors that can trap even the most careful programmers. Since
enterprise applications can have lots of users and other systems all working
concurrently, theres a lot of room for bad things to happen. Relational
databases help handle this by controlling all access to their data through
transactions. While this isnt a cure-all (you still have to handle a
transactional error when you try to book a room thats just gone), the
transactional mechanism has worked well to contain the complexity of
concurrency.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.75pt;text-indent:15.0pt'>Transactions also play a role in error
handling. With transactions, you can make a change, and if an error occurs
during the processing of the change you can roll back the transaction to clean
things up.</p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt;line-height:105%'><span style='font-size:15.0pt;mso-bidi-font-size:11.0pt;
line-height:105%'>1.1.3. Integration</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Enterprise applications live in a rich ecosystem that
requires multiple applications, written by different teams, to collaborate in
order to get things done. This kind of inter-application collaboration is
awkward because it means pushing the human organizational boundaries.
Applications often need to use the same data and updates made through one
application have to be visible to others.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.75pt;text-indent:15.0pt'>A common way to do this is <b
style='mso-bidi-font-weight:normal'>shared database integration</b> <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Hohpe and Woolf]</span></u>
where multiple applications store their data in a single database. Using a
single database allows all the applications to use each othersdata easily,
while the databases concurrency control handles multiple applications in the
same way as it handles multiple users in a single application.</p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt;line-height:105%'><span style='font-size:15.0pt;mso-bidi-font-size:11.0pt;
line-height:105%'>1.1.4. A (Mostly) Standard Model</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.25pt'>Relational databases have succeeded because they provide
the core benefits we outlined earlier in a (mostly) standard way. As a result,
developers and database professionals can learn the basic relational model and
apply it in many projects. Although there are differences between different
relational databases, the core mechanisms remain the same: Different vendors
SQL dialects are similar, transactions operate in mostly the same way.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;margin-left:
-.25pt;line-height:110%'><span style='font-size:17.5pt;mso-bidi-font-size:11.0pt;
line-height:110%'>1.2. Impedance Mismatch</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Relational databases provide many advantages, but they are
by no means perfect. Even from their early days, there have been lots of frustrations
with them.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>For application developers, the biggest frustration
has been whats commonly called the <b style='mso-bidi-font-weight:normal'>impedance
mismatch</b>: the difference between the relational model and the in-memory
data structures. The relational data model organizes data into a structure of
tables and rows, or more properly, relations and tuples. In the relational
model, a <b style='mso-bidi-font-weight:normal'>tuple</b> is a set of
name-value pairs and a <b style='mso-bidi-font-weight:normal'>relation</b> is a
set of tuples. (The relational definition of a tuple is slightly different from
that in mathematics and many programming languages with a tuple data type,
where a tuple is a sequence of values.) All operations in SQL consume and
return relations, which leads to the mathematically elegant relational algebra.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>This foundation on relations provides a
certain elegance and simplicity, but it also introduces limitations. In
particular, the values in a relational tuple have to be simplethey cannot
contain any structure, such as a nested record or a list. This limitation isnt
true for in-memory data structures, which can take on much richer structures
than relations. As a result, if you want to use a richer inmemory data
structure, you have to translate it to a relational representation to store it
on disk. Hence the impedance mismatchtwo different representations that
require translation (see <u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 1.1</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:16.5pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_1367" o:spid="_x0000_i1123"
 type="#_x0000_t75" style='width:562.5pt;height:345.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image002.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=750 height=461
src="nosql_files/image002.jpg" v:shapes="Picture_x0020_1367"><![endif]></span></p>

<h3 align=center style='margin-top:0in;margin-right:.5pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center;line-height:105%'><span style='font-size:
15.0pt;mso-bidi-font-size:11.0pt;line-height:105%'>Figure 1.1. An order, which
looks like a single aggregate structure in the UI, is split into many rows from
many tables in a relational database</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The impedance mismatch is a major source
of frustration to application developers, and in the 1990s many people believed
that it would lead to relational databases being replaced with databases that
replicate the in-memory data structures to disk. That decade was marked with
the growth of object-oriented programming languages, and with them came
object-oriented databasesboth looking to be the dominant environment for
software development in the new millennium.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>However, while object-oriented languages
succeeded in becoming the major force in programming, object-oriented databases
faded into obscurity. Relational databases saw off the challenge by stressing
their role as an integration mechanism, supported by a mostly standard language
of data manipulation (SQL) and a growing professional divide between
application developers and database administrators.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:10.5pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Impedance mismatch has been made much
easier to deal with by the wide availability of objectrelational mapping frameworks,
such as Hibernate and iBATIS that implement well-known mapping patterns <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Fowler PoEAA]</span></u>,
but the mapping problem is still an issue. Object-relational mapping frameworks
remove a lot of grunt work, but can become a problem of their own when people
try too hard to ignore the database and query performance suffers.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Relational databases continued to
dominate the enterprise computing world in the 2000s, but during that decade
cracks began to open in their dominance.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;margin-left:
-.25pt;line-height:110%'><span style='font-size:17.5pt;mso-bidi-font-size:11.0pt;
line-height:110%'>1.3. Application and Integration Databases</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>The exact reasons why relational databases triumphed over
OO databases are still the subject of an occasional pub debate for developers
of a certain age. But in our view, the primary factor was the role of SQL as an
integration mechanism between applications. In this scenario, the database acts
as an <b style='mso-bidi-font-weight:normal'>integration database</b>with
multiple applications, usually developed by separate teams, storing their data
in a common database. This improves communication because all the applications
are operating on a consistent set of persistent data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>There are downsides to shared database
integration. A structure thats designed to integrate many applications ends up
being more complexindeed, often dramatically more complexthan any single
application needs. Furthermore, should an application want to make changes to
its data storage, it needs to coordinate with all the other applications using
the database. Different applications have different structural and performance
needs, so an index required by one application may cause a problematic hit on
inserts for another. The fact that each application is usually a separate team
also means that the database usually cannot trust applications to update the
data in a way that preserves database integrity and thus needs to take
responsibility for that within the database itself.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:8.35pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>A different approach is to treat your
database as an <b style='mso-bidi-font-weight:normal'>application database</b>which
is only directly accessed by a single application codebase thats looked after
by a single team. With an application database, only the team using the
application needs to know about the database structure, which makes it much
easier to maintain and evolve the schema. Since the application team controls
both the database and the application code, the responsibility for database
integrity can be put in the application code.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>Interoperability
concerns can now shift to the interfaces of the application, allowing for
better interaction protocols and providing support for changing them. During
the 2000s we saw a distinct shift to web services <u style='text-underline:
#0000EE'><span style='color:#0000EE'>[Daigneau]</span></u>, where applications
would communicate over HTTP. Web services enabled a new form of a widely used
communication mechanisma challenger to using the SQL with shared databases.
(Much of this work was done under the banner of Service-Oriented</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Architecturea term most notable for its lack of a
consistent meaning.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.25pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>An interesting aspect of this shift to web
services as an integration mechanism was that it resulted in more flexibility
for the structure of the data that was being exchanged. If you communicate with
SQL, the data must be structured as relations. However, with a service, you are
able to use richer data structures with nested records and lists. These are
usually represented as documents in XML or, more recently, JSON. In general,
with remote communication you want to reduce the number of round trips involved
in the interaction, so its useful to be able to put a rich structure of
information into a single request or response.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>If you are going to use services for
integration, most of the time web servicesusing text over HTTPis the way to
go. However, if you are dealing with highly performance-sensitive interactions,
you may need a binary protocol. Only do this if you are sure you have the need,
as text protocols are easier to work withconsider the example of the Internet.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Once you have made the decision to use an application
database, you get more freedom of choosing a database. Since there is a
decoupling between your internal database and the services with which you talk
to the outside world, the outside world doesnt have to care how you store your
data, allowing you to consider nonrelational options. Furthermore, there are
many features of relational databases, such as security, that are less useful
to an application database because they can be done by the enclosing
application instead.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Despite this freedom, however, it wasnt
apparent that application databases led to a big rush to alternative data
stores. Most teams that embraced the application database approach stuck with
relational databases. After all, using an application database yields many
advantages even ignoring the database flexibility (which is why we generally
recommend it). Relational databases are familiar and usually work very well or,
at least, well enough. Perhaps, given time, we might have seen the shift to
application databases to open a real crack in the relational hegemonybut such
cracks came from another source.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;margin-left:
-.25pt;line-height:110%'><span style='font-size:17.5pt;mso-bidi-font-size:11.0pt;
line-height:110%'>1.4. Attack of the Clusters</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>At the beginning of the new millennium the technology world
was hit by the busting of the 1990s dotcom bubble. While this saw many people
questioning the economic future of the Internet, the 2000s did see several
large web properties dramatically increase in scale.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>This increase in scale was happening
along many dimensions. Websites started tracking activity and structure in a
very detailed way. Large sets of data appeared: links, social networks,
activity in logs, mapping data. With this growth in data came a growth in
usersas the biggest websites grew to be vast estates regularly serving huge
numbers of visitors.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Coping with the increase in data and
traffic required more computing resources. To handle this kind of increase, you
have two choices: up or out. Scaling up implies bigger machines, more
processors, disk storage, and memory. But bigger machines get more and more
expensive, not to mention that there are real limits as your size increases.
The alternative is to use lots of small machines in a cluster. A cluster of
small machines can use commodity hardware and ends up being cheaper at these
kinds of scales. It can also be more resilientwhile individual machine
failures are common, the overall cluster can be built to keep going despite
such failures, providing high reliability.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>As large properties moved towards
clusters, that revealed a new problemrelational databases are not designed to
be run on clusters. Clustered relational databases, such as the Oracle RAC or
Microsoft SQL Server, work on the concept of a shared disk subsystem. They use
a cluster-aware file system that writes to a highly available disk
subsystembut this means the cluster still has the disk subsystem as a single
point of failure. Relational databases could also be run as separate servers for
different sets of data, effectively sharding (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Sharding</span></u>,p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>38</span></u>) the database. While this separates the
load, all the sharding has to be controlled by the application which has to
keep track of which database server to talk to for each bit of data. Also, we
lose any querying, referential integrity, transactions, or consistency controls
that cross shards. A phrase we often hear in this context from people whove
done this is unnatural acts.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:24.85pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>These technical issues are exacerbated by
licensing costs. Commercial relational databases are usually priced on a
single-server assumption, so running on a cluster raised prices and led to
frustrating negotiations with purchasing departments.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>This mismatch between relational databases and
clusters led some organization to consider an alternative route to data
storage. Two companies in particularGoogle and Amazonhave been very
influential. Both were on the forefront of running large clusters of this kind;
furthermore, they were capturing huge amounts of data. These things gave them
the motive. Both were successful and growing companies with strong technical
components, which gave them the means and opportunity. It was no wonder they
had murder in mind for their relational databases. As the 2000s drew on, both
companies produced brief but highly influential papers about their efforts:
BigTable from Google and Dynamo from Amazon.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Its often said that Amazon and Google
operate at scales far removed from most organizations, so the solutions they
needed may not be relevant to an average organization. While its true that
most software projects dont need that level of scale, its also true that more
and more organizations are beginning to explore what they can do by capturing
and processing more dataand to run into the same problems. So, as more
information leaked out about what Google and Amazon had done, people began to
explore making databases along similar linesexplicitly designed to live in a
world of clusters. While the earlier menaces to relational dominance turned out
to be phantoms, the threat from clusters was serious.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;margin-left:
-.25pt;line-height:110%'><span style='font-size:17.5pt;mso-bidi-font-size:11.0pt;
line-height:110%'>1.5. The Emergence of NoSQL</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Its a wonderful irony that the term NoSQLfirst made its
appearance in the late 90s as the name of an open-source relational database <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Strozzi NoSQL]</span></u>.
Led by Carlo Strozzi, this database stores its tables as ASCII files, each
tuple represented by a line with fields separated by tabs. The name comes from
the fact that the database doesnt use SQL as a query language. Instead, the
database is manipulated through shell scripts that can be combined into the
usual UNIX pipelines. Other than the terminological coincidence, Strozzis
NoSQL had no influence on the databases we describe in this book.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The usage of NoSQLthat we recognize
today traces back to a meetup on June 11, 2009 in San Francisco organized by
Johan Oskarsson, a software developer based in London. The example of BigTable
and Dynamo had inspired a bunch of projects experimenting with alternative data
storage, and discussions of these had become a feature of the better software
conferences around that time. Johan was interested in finding out more about
some of these new databases while he was in San Francisco for a Hadoop summit.
Since he had little time there, he felt that it wouldnt be feasible to visit
them all, so he decided to host a meetup where they could all come together and
present their work to whoever was interested.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Johan wanted a name for the
meetupsomething that would make a good Twitter hashtag: short, memorable, and
without too many Google hits so that a search on the name would quickly find
the meetup. He asked for suggestions on the #cassandra IRC channel and got a
few, selecting the suggestion of NoSQLfrom Eric Evans (a developer at
Rackspace, no connection to the DDD Eric Evans). While it had the disadvantage
of being negative and not really describing these systems, it did fit the
hashtag criteria. At the time they were thinking of only naming a single
meeting and were not expecting it to catch on to name this entire technology
trend <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Oskarsson]</span></u>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The term NoSQLcaught on like
wildfire, but its never been a term thats had much in the way of a strong
definition. The original call <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[NoSQL Meetup]</span></u> for the meetup asked for
open-source, distributed, nonrelational databases.The talks there <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[NoSQL Debrief]</span></u>
were from Voldemort, Cassandra, Dynomite, HBase, Hypertable, CouchDB, and
MongoDBbut the term has never been confined to that original septet. Theres
no generally accepted definition, nor an authority to provide one, so all we
can do is discuss some common characteristics of the databases that tend to be
called NoSQL.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>To begin with, there is the obvious point that NoSQL
databases dont use SQL. Some of them do have query languages, and it makes
sense for them to be similar to SQL in order to make them easier to learn.
Cassandras CQL is like thisexactly like SQL (except where its not)<u
style='text-underline:#0000EE'><span style='color:#0000EE'>[CQL]</span></u>.
But so far none have implemented anything that would fit even the rather
flexible notion of standard SQL. It will be interesting to see what happens if
an established NoSQL database decides to implement a reasonably standard SQL;
the only predictable outcome for such an eventuality is plenty of argument.</p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:3.75pt;
margin-bottom:.15pt;margin-left:.5pt;text-align:right;line-height:107%'>Another
important characteristic of these databases is that they are generally
open-source projects.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Although the term NoSQL is frequently applied to
closed-source systems, theres a notion that NoSQL is an open-source
phenomenon.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Most NoSQL databases are driven by the
need to run on clusters, and this is certainly true of those that were talked
about during the initial meetup. This has an effect on their data model as well
as their approach to consistency. Relational databases use ACID transactions
(p. <u style='text-underline:#0000EE'><span style='color:#0000EE'>19</span></u>)
to handle consistency across the whole database. This inherently clashes with a
cluster environment, so NoSQL databases offer a range of options for
consistency and distribution.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>However, not all NoSQL databases are
strongly oriented towards running on clusters. Graph databases are one style of
NoSQL databases that uses a distribution model similar to relational databases
but offers a different data model that makes it better at handling data with
complex relationships.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>NoSQL databases are generally based on
the needs of the early 21st century web estates, so usually only systems
developed during that time frame are called NoSQLthus ruling out hoards of
databases created before the new millennium, let alone BC (Before Codd).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>NoSQL databases operate without a
schema, allowing you to freely add fields to database records without having to
define any changes in structure first. This is particularly useful when dealing
with nonuniform data and custom fields which forced relational databases to use
names like <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>customField6</span>
or custom field tables that are awkward to process and understand.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>All of the above are common
characteristics of things that we see described as NoSQL databases. None of
these are definitional, and indeed its likely that there will never be a
coherent definition of NoSQL(sigh). However, this crude set of characteristics
has been our guide in writing this book. Our chief enthusiasm with this subject
is that the rise of NoSQL has opened up the range of options for data storage.
Consequently, this opening up shouldnt be confined to whats usually classed
as a NoSQL store. We hope that other data storage options will become more
acceptable, including many that predate the NoSQL movement. There is a limit,
however, to what we can usefully discuss in this book, so weve decided to
concentrate on this noDefinition.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:15.5pt'>When you first hear NoSQL,an immediate question is what
does it stand fora noto SQL?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>Most people who talk about NoSQL say that it really means
Not Only SQL,but this interpretation has a couple of problems. Most people
write NoSQLwhereas Not Only SQLwould be written NOSQL.Also, there
wouldnt be much point in calling something a NoSQL database under the not
onlymeaningbecause then, Oracle or Postgres would fit that definition, we
would prove that black equals white and would all get run over on crosswalks.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:22.05pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>To resolve this, we suggest that you dont
worry about what the term stands for, but rather about what it means (which is
recommended with most acronyms). Thus, when NoSQLis applied to a database,
it refers to an ill-defined set of mostly open-source databases, mostly
developed in the early 21st century, and mostly not using SQL.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The not-onlyinterpretation does have
its value, as it describes the ecosystem that many people think is the future
of databases. This is in fact what we consider to be the most important
contribution of this way of thinkingits better to think of NoSQL as a
movement rather than a technology. We dont think that relational databases are
going awaythey are still going to be the most common form of database in use.
Even though weve written this book, we still recommend relational databases.
Their familiarity, stability, feature set, and available support are compelling
arguments for most projects.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The change is that now we see relational
databases as one option for data storage. This point of view is often referred
to as <b style='mso-bidi-font-weight:normal'>polyglot persistence</b>using
different data stores in different circumstances. Instead of just picking a
relational database because everyone does, we need to understand the nature of
the data were storing and how we want to manipulate it. The result is that
most organizations will have a mix of data storage technologies for different
circumstances.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.85pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>In order to make this polyglot world work,
our view is that organizations also need to shift from integration databases to
application databases. Indeed, we assume in this book that youll be using a
NoSQL database as an application database; we dont generally consider NoSQL
databases a good choice for integration databases. We dont see this as a
disadvantage as we think that even if you dont use NoSQL, shifting to
encapsulating data in services is a good direction to take.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>In our account of the history of NoSQL development,
weve concentrated on big data running on clusters. While we think this is the
key thing that drove the opening up of the database world, it isnt the only
reason we see project teams considering NoSQL databases. An equally important
reason is the old frustration with the impedance mismatch problem. The big data
concerns have created an opportunity for people to think freshly about their
data storage needs, and some development teams see that using a NoSQL database
can help their productivity by simplifying their database access even if they
have no need to scale beyond a single machine.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>So, as you read the rest of this book, remember there
are two primary reasons for considering NoSQL. One is to handle data access
with sizes and performance that demand a cluster; the other is to improve the
productivity of application development by using a more convenient data
interaction</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>style.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;margin-left:
-.25pt;line-height:110%'><span style='font-size:17.5pt;mso-bidi-font-size:11.0pt;
line-height:110%'>1.6. Key Points</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l10 level1 lfo2'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Relational
databases have been a successful technology for twenty years, providing
persistence,concurrency control, and an integration mechanism.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l10 level1 lfo2'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Application
developers have been frustrated with the impedance mismatch between
therelational model and the in-memory data structures.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l10 level1 lfo2'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>There
is a movement away from using databases as integration points towards
encapsulatingdatabases within applications and integrating through services.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l10 level1 lfo2'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>The
vital factor for a change in data storage was the need to support large volumes
of data byrunning on clusters. Relational databases are not designed to run
efficiently on clusters.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l10 level1 lfo2'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>NoSQL
is an accidental neologism. There is no prescriptive definitionall you can
make is anobservation of common characteristics.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l10 level1 lfo2'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>The
common characteristics of NoSQL databases are</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l10 level1 lfo2'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Not
using the relational model</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l10 level1 lfo2'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Running
well on clusters</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l10 level1 lfo2'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Open-source</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l10 level1 lfo2'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Built
for the 21st century web estates</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l10 level1 lfo2'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Schemaless</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l10 level1 lfo2'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>The
most important result of the rise of NoSQL is Polyglot Persistence.</p>

<h2 style='margin-left:-.25pt'>Chapter 2. Aggregate Data Models</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>A data model is the model through which we perceive and
manipulate our data. For people using a database, the data model describes how
we interact with the data in the database. This is distinct from a storage
model, which describes how the database stores and manipulates the data
internally. In an ideal world, we should be ignorant of the storage model, but
in practice we need at least some inkling of itprimarily to achieve decent
performance.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In conversation, the term data model
often means the model of the specific data in an application. A developer might
point to an entity-relationship diagram of their database and refer to that as
their data model containing customers, orders, products, and the like. However,
in this book well mostly be using data modelto refer to the model by which
the database organizes datawhat might be more formally called a metamodel.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The dominant data model of the last
couple of decades is the relational data model, which is best visualized as a
set of tables, rather like a page of a spreadsheet. Each table has rows, with
each row representing some entity of interest. We describe this entity through
columns, each having a single value. A column may refer to another row in the
same or different table, which constitutes a relationship between those
entities. (Were using informal but common terminology when we speak of tables
and rows; the more formal terms would be relations and tuples.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>One of the most obvious shifts with
NoSQL is a move away from the relational model. Each NoSQL solution has a
different model that it uses, which we put into four categories widely used in
the NoSQL ecosystem: key-value, document, column-family, and graph. Of these,
the first three share a common characteristic of their data models which we
will call aggregate orientation. In this chapter well explain what we mean by
aggregate orientation and what it means for data models.</p>

<h3 style='margin-left:-.25pt'>2.1. Aggregates</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>The relational model takes the information that we want to
store and divides it into tuples (rows). A tuple is a limited data structure:
It captures a set of values, so you cannot nest one tuple within another to get
nested records, nor can you put a list of values or tuples within another. This
simplicity underpins the relational modelit allows us to think of all
operations as operating on and returning tuples.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:11.25pt;margin-bottom:
0in;margin-left:-.75pt;margin-bottom:.0001pt;text-align:justify;text-justify:
inter-ideograph;text-indent:14.5pt;line-height:103%'>Aggregate orientation
takes a different approach. It recognizes that often, you want to operate on
data in units that have a more complex structure than a set of tuples. It can
be handy to think in terms of a complex record that allows lists and other
record structures to be nested inside it. As well see, key-value, document,
and column-family databases all make use of this more complex record.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>However, there is no common term for this complex record;
in this book we use the term aggregate.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Aggregate is a term that comes from Domain-Driven
Design <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Evans]</span></u>.
In Domain-Driven Design, an <b style='mso-bidi-font-weight:normal'>aggregate</b>
is a collection of related objects that we wish to treat as a unit. In
particular, it is a unit for data manipulation and management of consistency.
Typically, we like to update aggregates with atomic operations and communicate
with our data storage in terms of aggregates. This definition matches really
well with how key-value, document, and column-family databases work. Dealing in
aggregates makes it much easier for these databases to handle operating on a
cluster, since the aggregate makes a natural unit for replication and sharding.
Aggregates are also often easier for application programmers to work with,
since they often manipulate data through aggregate structures.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>2.1.1. Example of Relations and Aggregates</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>At this point, an example may help
explain what were talking about. Lets assume we have to build an e-commerce
website; we are going to be selling items directly to customers over the web,
and we will have to store information about users, our product catalog, orders,
shipping addresses, billing addresses, and payment data. We can use this scenario
to model the data using a relation data store as well as NoSQL data stores and
talk about their pros and cons. For a relational database, we might start with
a data model shown in <u style='text-underline:#0000EE'><span style='color:
#0000EE'>Figure 2.1</span></u>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:91.45pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_1765" o:spid="_x0000_i1122"
 type="#_x0000_t75" style='width:412.5pt;height:317.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image003.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=550 height=423
src="nosql_files/image003.jpg" v:shapes="Picture_x0020_1765"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:.6pt;margin-bottom:.35pt;
margin-left:1.0pt;text-align:center'>Figure 2.1. Data model oriented around a
relational database (using UML notation <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Fowler</span></u></h4>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.0pt;
margin-bottom:2.25pt;margin-left:0in;text-align:center;text-indent:0in;
line-height:107%'><b style='mso-bidi-font-weight:normal'><u style='text-underline:
#0000EE'><span style='color:#0000EE'>UML]</span></u>)</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'><u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure
2.2</span></u> presents some sample data for this model.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:61.5pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_1785" o:spid="_x0000_i1121"
 type="#_x0000_t75" style='width:472.5pt;height:321.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image004.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=630 height=429
src="nosql_files/image004.jpg" v:shapes="Picture_x0020_1785"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:.8pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 2.2. Typical data using RDBMS data
model</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>As were good relational soldiers,
everything is properly normalized, so that no data is repeated in multiple
tables. We also have referential integrity. A realistic order system would
naturally be more involved than this, but this is the benefit of the rarefied
air of a book.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>Now lets see how
this model might look when we think in more aggregate-oriented terms (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 2.3</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:44.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_1797" o:spid="_x0000_i1120"
 type="#_x0000_t75" style='width:507pt;height:289.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image005.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=676 height=386
src="nosql_files/image005.jpg" v:shapes="Picture_x0020_1797"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:.8pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 2.3. An aggregate data model</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>Again, we have some sample data, which well show in JSON
format as thats a common representation for data in NoSQL land.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>// in customers</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;id&quot;:1,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;name&quot;:&quot;Martin&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;billingAddress&quot;:[{&quot;city&quot;:&quot;Chicago&quot;}]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>// in orders</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;id&quot;:99,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;customerId&quot;:1,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;orderItems&quot;:[</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;productId&quot;:27,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;price&quot;: 32.45,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;productName&quot;: &quot;NoSQL Distilled&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;shippingAddress&quot;:[{&quot;city&quot;:&quot;Chicago&quot;}]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;orderPayment&quot;:[</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;ccinfo&quot;:&quot;1000-1000-1000-1000&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;txnId&quot;:&quot;abelif879rft&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;billingAddress&quot;: {&quot;city&quot;: &quot;Chicago&quot;}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In this model, we have two main
aggregates: customer and order. Weve used the black-diamond composition marker
in UML to show how data fits into the aggregation structure. The customer
contains a list of billing addresses; the order contains a list of order items,
a shipping address, and payments. The payment itself contains a billing address
for that payment.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>A single logical address record appears
three times in the example data, but instead of using IDs its treated as a
value and copied each time. This fits the domain where we would not want the
shipping address, nor the payments billing address, to change. In a relational
database, we would ensure that the address rows arent updated for this case,
making a new row instead. With aggregates, we can copy the whole address
structure into the aggregate as we need to.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The link between the customer and the
order isnt within either aggregateits a relationship between aggregates.
Similarly, the link from an order item would cross into a separate aggregate
structure for products, which we havent gone into. Weve shown the product
name as part of the order item herethis kind of denormalization is similar to
the tradeoffs with relational databases, but is more common with aggregates
because we want to minimize the number of aggregates we access during a data
interaction.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.0pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>The important thing to notice here isnt the
particular way weve drawn the aggregate boundary so much as the fact that you
have to think about accessing that dataand make that part of your thinking
when developing the application data model. Indeed we could draw our aggregate
boundaries differently, putting all the orders for a customer into the customer
aggregate (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure
2.4</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:62.95pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_1859" o:spid="_x0000_i1119"
 type="#_x0000_t75" style='width:469.5pt;height:394.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image006.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=626 height=526
src="nosql_files/image006.jpg" v:shapes="Picture_x0020_1859"><![endif]></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:38.75pt;margin-bottom:
2.75pt;margin-left:15.0pt;text-indent:57.35pt;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 2.4. Embed all the objects for
customer and the customers orders </b>Using the above data model, an example <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:105%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span> and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:105%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Order</span> would look
like this:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>// in customers</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;customer&quot;: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;id&quot;: 1,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;name&quot;: &quot;Martin&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;billingAddress&quot;:
[{&quot;city&quot;: &quot;Chicago&quot;}],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;orders&quot;: [</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;id&quot;:99,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;customerId&quot;:1,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;orderItems&quot;:[</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;productId&quot;:27,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;price&quot;: 32.45,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;productName&quot;: &quot;NoSQL Distilled&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;shippingAddress&quot;:[{&quot;city&quot;:&quot;Chicago&quot;}]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;orderPayment&quot;:[</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;ccinfo&quot;:&quot;1000-1000-1000-1000&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;txnId&quot;:&quot;abelif879rft&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;billingAddress&quot;: {&quot;city&quot;: &quot;Chicago&quot;}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.75pt;text-indent:15.0pt'>Like most things in modeling, theres no
universal answer for how to draw your aggregate boundaries. It depends entirely
on how you tend to manipulate your data. If you tend to access a customer
together with all of that customers orders at once, then you would prefer a
single aggregate. However, if you tend to focus on accessing a single order at
a time, then you should prefer having separate aggregates for each order.
Naturally, this is very context-specific; some applications will prefer one or
the other, even within a single system, which is exactly why many people prefer</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.75pt;text-indent:15.0pt'>aggregate ignorance.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>2.1.2. Consequences of Aggregate Orientation</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>While the relational mapping captures the various data
elements and their relationships reasonably well, it does so without any notion
of an aggregate entity. In our domain language, we might say that an order
consists of order items, a shipping address, and a payment. This can be
expressed in the relational model in terms of foreign key relationshipsbut
there is nothing to distinguish relationships that represent aggregations from
those that dont. As a result, the database cant use a knowledge of aggregate
structure to help it store and distribute the data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Various data modeling techniques have
provided ways of marking aggregate or composite structures. The problem,
however, is that modelers rarely provide any semantics for what makes an
aggregate relationship different from any other; where there are semantics,
they vary. When working with aggregate-oriented databases, we have a clearer
semantics to consider by focusing on the unit of interaction with the data
storage. It is, however, not a logical data property: Its all about how the
data is being used by applicationsa concern that is often outside the bounds
of data modeling.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Relational databases have no concept of
aggregate within their data model, so we call them <b style='mso-bidi-font-weight:
normal'>aggregate-ignorant</b>. In the NoSQL world, graph databases are also
aggregate-ignorant. Being aggregate-ignorant is not a bad thing. Its often
difficult to draw aggregate boundaries well, particularly if the same data is
used in many different contexts. An order makes a good aggregate when a
customer is making and reviewing orders, and when the retailer is processing
orders. However, if a retailer wants to analyze its product sales over the last
few months, then an order aggregate becomes a trouble. To get to product sales
history, youll have to dig into every aggregate in the database. So an
aggregate structure may help with some data interactions but be an obstacle for
others. An aggregate-ignorant model allows you to easily look at the data in
different ways, so it is a better choice when you dont have a primary
structure for manipulating your data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.0pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>The clinching reason for aggregate orientation is that
it helps greatly with running on a cluster, which as youll remember is the
killer argument for the rise of NoSQL. If were running on a cluster, we need
to minimize how many nodes we need to query when we are gathering data. By
explicitly including aggregates, we give the database important information
about which bits of data will be manipulated together, and thus should live on
the same node.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:1.65pt;
margin-left:-.75pt;text-indent:15.0pt'>Aggregates have an important consequence
for transactions. Relational databases allow you to manipulate any combination
of rows from any tables in a single transaction. Such transactions are called <b
style='mso-bidi-font-weight:normal'>ACID transactions</b>: Atomic, Consistent,
Isolated, and Durable. ACID is a rather contrived acronym; the real point is the
atomicity: Many rows spanning many tables are updated as a single operation.
This operation either succeeds or fails in its entirety, and concurrent
operations are isolated from each other so they cannot see a partial update.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Its often said that NoSQL databases
dont support ACID transactions and thus sacrifice consistency. This is a
rather sweeping simplification. In general, its true that aggregate-oriented
databases dont have ACID transactions that span multiple aggregates. Instead,
they support atomic manipulation of a single aggregate at a time. This means
that if we need to manipulate multiple aggregates in an atomic way, we have to
manage that ourselves in the application code. In practice, we find that most
of the time we are able to keep our atomicity needs to within a single
aggregate; indeed, thats part of the consideration for deciding how to divide
up our data into aggregates. We should also remember that graph and other
aggregate-ignorant databases usually do support ACID transactions similar to
relational databases. Above all, the topic of consistency is much more involved
than whether a database is ACID or not, as well explore in <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Chapter 5</span></u>.</p>

<h3 style='margin-left:-.25pt'>2.2. Key-Value and Document Data Models</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>We said earlier on that key-value and document databases
were strongly aggregate-oriented. What we meant by this was that we think of
these databases as primarily constructed through aggregates. Both of these
types of databases consist of lots of aggregates with each aggregate having a
key or ID thats used to get at the data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The two models differ in that in a
key-value database, the aggregate is opaque to the databasejust some big blob
of mostly meaningless bits. In contrast, a document database is able to see a
structure in the aggregate. The advantage of opacity is that we can store
whatever we like in the aggregate. The database may impose some general size
limit, but other than that we have complete freedom. A document database
imposes limits on what we can place in it, defining allowable structures and types.
In return, however, we get more flexibility in access.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>With a key-value store, we can only
access an aggregate by lookup based on its key. With a document database, we
can submit queries to the database based on the fields in the aggregate, we can
retrieve part of the aggregate rather than the whole thing, and database can
create indexes based on the contents of the aggregate.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.6pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>In practice, the line between key-value and document
gets a bit blurry. People often put an ID field in a document database to do a
key-value style lookup. Databases classified as key-value databases may allow
you structures for data beyond just an opaque aggregate. For example, Riak
allows you to add metadata to aggregates for indexing and interaggregate links,
Redis allows you to break down the aggregate into lists or sets. You can
support querying by integrating search tools such as Solr. As an example, Riak
includes a search facility that uses Solr-like searching on any aggregates that
are stored as JSON or XML structures.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Despite this blurriness, the general distinction still
holds. With key-value databases, we expect to mostly look up aggregates using a
key. With document databases, we mostly expect to submit some form of query
based on the internal structure of the document; this might be a key, but its
more likely to be something else.</p>

<h3 style='margin-left:-.25pt'>2.3. Column-Family Stores</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:1.5pt;
margin-left:-.25pt'>One of the early and influential NoSQL databases was
Googles BigTable <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Chang
etc.]</span></u>. Its name conjured up a tabular structure which it realized
with sparse columns and no schema. As youll soon see, it doesnt help to think
of this structure as a table; rather, it is a two-level map. But, however you
think about the structure, it has been a model that influenced later databases
such as HBase and Cassandra.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>These databases with a bigtable-style
data model are often referred to as column stores, but that name has been
around for a while to describe a different animal. Pre-NoSQL column stores,
such as C-Store <u style='text-underline:#0000EE'><span style='color:#0000EE'>[C-Store]</span></u>,
were happy with SQL and the relational model. The thing that made them
different was the way in which they physically stored data. Most databases have
a row as a unit of storage which, in particular, helps write performance.
However, there are many scenarios where writes are rare, but you often need to
read a few columns of many rows at once. In this situation, its better to
store groups of columns for all rows as the basic storage unitwhich is why
these databases are called column stores.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:10.5pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Bigtable and its offspring follow this
notion of storing groups of columns (column families) together, but part
company with C-Store and friends by abandoning the relational model and SQL. In
this book, we refer to this class of databases as column-family databases.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>Perhaps the best
way to think of the column-family model is as a two-level aggregate structure.
As with key-value stores, the first key is often described as a row identifier,
picking up the aggregate of interest. The difference with column-family
structures is that this row aggregate is itself formed of a map of more
detailed values. These second-level values are referred to as columns. As well
as accessing the row as a whole, operations also allow picking out a particular
column, so to get a particular customers name from <u style='text-underline:
#0000EE'><span style='color:#0000EE'>Figure 2.5</span></u> you could do something
like <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>get('1234',
'name')</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:.75in;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_2035" o:spid="_x0000_i1118"
 type="#_x0000_t75" style='width:487.5pt;height:347.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image007.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=650 height=463
src="nosql_files/image007.jpg" v:shapes="Picture_x0020_2035"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:2.1pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 2.5. Representing customer
information in a column-family structure</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Column-family databases organize their
columns into column families. Each column has to be part of a single column
family, and the column acts as unit for access, with the assumption that data
for a particular column family will be usually accessed together.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>This also gives you a couple of ways to think about how the
data is structured.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l0 level1 lfo3'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Row-oriented:
Each row is an aggregate (for example, customer with the ID of 1234) withcolumn
families representing useful chunks of data (profile, order history) within
that aggregate.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l0 level1 lfo3'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Column-oriented:
Each column family defines a record type (e.g., customer profiles) with rowsfor
each of the records. You then think of a row as the join of records in all
column families.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>This latter aspect reflects the columnar
nature of column-family databases. Since the database knows about these common
groupings of data, it can use this information for its storage and access behavior.
Even though a document database declares some structure to the database, each
document is still seen as a single unit. Column families give a two-dimensional
quality to column-family databases.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>This terminology is as established by Google Bigtable
and HBase, but Cassandra looks at things slightly differently. A row in
Cassandra only occurs in one column family, but that column family may contain
supercolumnscolumns that contain nested columns. The supercolumns in Cassandra
are the best equivalent to the classic Bigtable column families.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.75pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>It can still be confusing to think of
column-families as tables. You can add any column to any row, and rows can have
very different column keys. While new columns are added to rows during regular
database access, defining new column families is much rarer and may involve
stopping the database for it to happen.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>The example of <u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 2.5</span></u> illustrates another aspect of
column-family databases that may be unfamiliar for people used to relational
tables: the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>orders</span>
column family. Since columns can be added freely, you can model a list of items
by making each item a separate column. This is very odd if you think of a
column family as a table, but quite natural if you think of a column-family row
as an aggregate. Cassandra uses the terms wideand skinny.<b
style='mso-bidi-font-weight:normal'>Skinny rows</b> have few columns with the
same columns used across the many different rows. In this case, the column
family defines a record type, each row is a record, and each column is a field.
A <b style='mso-bidi-font-weight:normal'>wide row</b> has many columns (perhaps
thousands), with rows having very different columns. A wide column family
models a list, with each column being one element in that list.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>A consequence of wide column families is
that a column family may define a sort order for its columns. This way we can
access orders by their order key and access ranges of orders by their keys.
While this might not be useful if we keyed orders by their IDs, it would be if
we made the key out of a concatenation of date and ID (e.g., <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>20111027-1001</span>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:8.25pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Although its useful to distinguish column
families by their wide or skinny nature, theres no technical reason why a
column family cannot contain both field-like columns and list-like columns
although doing this would confuse the sort ordering.</p>

<h3 style='margin-left:-.25pt'>2.4. Summarizing Aggregate-Oriented Databases</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>At this point, weve covered enough material to give you a
reasonable overview of the three different styles of aggregate-oriented data
models and how they differ.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>What they all share is the notion of an
aggregate indexed by a key that you can use for lookup. This aggregate is
central to running on a cluster, as the database will ensure that all the data
for an aggregate is stored together on one node. The aggregate also acts as the
atomic unit for updates, providing a useful, if limited, amount of
transactional control.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:1.6pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Within that notion of aggregate, we have some
differences. The key-value data model treats the aggregate as an opaque whole,
which means you can only do key lookup for the whole aggregateyou cannot run
a query nor retrieve a part of the aggregate.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The document model makes the aggregate
transparent to the database allowing you to do queries and partial retrievals.
However, since the document has no schema, the database cannot act much on the
structure of the document to optimize the storage and retrieval of parts of the
aggregate.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Column-family models divide the
aggregate into column families, allowing the database to treat them as units of
data within the row aggregate. This imposes some structure on the aggregate but
allows the database to take advantage of that structure to improve its
accessibility.</p>

<h3 style='margin-left:-.25pt'>2.5. Further Reading</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:16.05pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>For more on the general concept of
aggregates, which are often used with relational databases too, see <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Evans]</span></u>.
The Domain-Driven Design community is the best source for further information
about aggregatesrecent information usually appears at
http://domaindrivendesign.org.</p>

<h3 style='margin-left:-.25pt'>2.6. Key Points</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l3 level1 lfo4'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>An
aggregate is a collection of data that we interact with as a unit. Aggregates
form theboundaries for ACID operations with the database.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l3 level1 lfo4'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Key-value,
document, and column-family databases can all be seen as forms of
aggregate-oriented database.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l3 level1 lfo4'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Aggregates
make it easier for the database to manage data storage over clusters.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.15pt;
margin-left:34.5pt;text-indent:-9.0pt;line-height:103%;mso-list:l3 level1 lfo4'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:103%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Aggregate-oriented
databases work best when most data interaction is done with the sameaggregate;
aggregate-ignorant databases are better when interactions use data organized in
many different formations.</p>

<h2 style='margin-left:-.25pt'>Chapter 3. More Details on Data Models</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.25pt'>So far weve covered the key feature in most NoSQL
databases: their use of aggregates and how aggregate-oriented databases model
aggregates in different ways. While aggregates are a central part of the NoSQL
story, there is more to the data modeling side than that, and well explore
these further concepts in this chapter.</p>

<h3 style='margin-left:-.25pt'>3.1. Relationships</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Aggregates are useful in that they put together data that
is commonly accessed together. But there are still lots of cases where data
thats related is accessed differently. Consider the relationship between a
customer and all of his orders. Some applications will want to access the order
history whenever they access the customer; this fits in well with combining the
customer with his order history into a single aggregate. Other applications,
however, want to process orders individually and thus model orders as
independent aggregates.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>In this case, youll want separate order and customer
aggregates but with some kind of relationship between them so that any work on
an order can look up customer data. The simplest way to provide such a link is
to embed the ID of the customer within the orders aggregate data. That way, if
you need data from the customer record, you read the order, ferret out the
customer ID, and make another call to the database to read the customer data.
This will work, and will be just fine in many scenariosbut the database will
be ignorant of the relationship in the data. This can be important because
there are times when its useful for the database to know about these links.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>As a result, many databaseseven
key-value storesprovide ways to make these relationships visible to the
database. Document stores make the content of the aggregate available to the
database to form indexes and queries. Riak, a key-value store, allows you to
put link information in metadata, supporting partial retrieval and link-walking
capability.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:19.0pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>An important aspect of relationships
between aggregates is how they handle updates. Aggregateoriented databases
treat the aggregate as the unit of data-retrieval. Consequently, atomicity is
only supported within the contents of a single aggregate. If you update
multiple aggregates at once, you have to deal yourself with a failure partway
through. Relational databases help you with this by allowing you to modify
multiple records in a single transaction, providing ACID guarantees while
altering many rows.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>All of this means that
aggregate-oriented databases become more awkward as you need to operate across
multiple aggregates. There are various ways to deal with this, which well
explore later in this chapter, but the fundamental awkwardness remains.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>This may imply that if you have data based on lots of
relationships, you should prefer a relational database over a NoSQL store.
While thats true for aggregate-oriented databases, its worth remembering that
relational databases arent all that stellar with complex relationships either.
While you can express queries involving joins in SQL, things quickly get very
hairyboth with SQL writing and with the resulting performanceas the number of
joins mounts up.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>This makes it a good moment to introduce
another category of databases thats often lumped into the NoSQL pile.</p>

<h3 style='margin-left:-.25pt'>3.2. Graph Databases</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>Graph databases are an odd fish in
the NoSQL pond. Most NoSQL databases were inspired by the need to run on
clusters, which led to aggregate-oriented data models of large records with
simple connections. Graph databases are motivated by a different frustration
with relational databases and thus have an opposite modelsmall records with
complex interconnections, something like <u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 3.1</span></u>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_2196" o:spid="_x0000_i1117"
 type="#_x0000_t75" style='width:525pt;height:413.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image008.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=551
src="nosql_files/image008.jpg" v:shapes="Picture_x0020_2196"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:2.1pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 3.1. An example graph structure</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In this context, a graph isnt a bar
chart or histogram; instead, we refer to a graph data structure of nodes
connected by edges.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In <u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 3.1</span></u> we have a web of information whose
nodes are very small (nothing more than a name) but there is a rich structure
of interconnections between them. With this structure, we can ask questions such
as find the books in the Databases category that are written by someone whom a
friend of mine likes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.1pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Graph databases specialize in capturing this sort of
informationbut on a much larger scale than a readable diagram could capture.
This is ideal for capturing any data consisting of complex relationships such
as social networks, product preferences, or eligibility rules.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The fundamental data model of a graph
database is very simple: nodes connected by edges (also called arcs). Beyond
this essential characteristic there is a lot of variation in data modelsin
particular, what mechanisms you have to store data in your nodes and edges. A
quick sample of some current capabilities illustrates this variety of
possibilities: FlockDB is simply nodes and edges with no mechanism for
additional attributes; Neo4J allows you to attach Java objects as properties to
nodes and edges in a schemaless fashion (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Features</span></u>,p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>113</span></u>); Infinite Graph stores your Java objects,
which are subclasses of its built-in types, as nodes and edges.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:11.6pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Once you have built up a graph of nodes
and edges, a graph database allows you to query that network with query
operations designed with this kind of graph in mind. This is where the
important differences between graph and relational databases come in. Although
relational databases can implement relationships using foreign keys, the joins
required to navigate around can get quite expensivewhich means performance is
often poor for highly connected data models. Graph databases make traversal
along the relationships very cheap. A large part of this is because graph
databases shift most of the work of navigating relationships from query time to
insert time. This naturally pays off for situations where querying performance
is more important than insert speed.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:19.5pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Most of the time you find data by
navigating through the network of edges, with queries such as tell me all the
things that both Anna and Barbara like.You do need a starting place, however,
so usually some nodes can be indexed by an attribute such as ID. So you might
start with an ID lookup (i.e., look up the people named Annaand Barbara)
and then start using the edges. Still, graph databases expect most of your
query work to be navigating relationships.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>The emphasis on relationships makes
graph databases very different from aggregate-oriented databases. This data
model difference has consequences in other aspects, too; youll find such
databases are more likely to run on a single server rather than distributed
across clusters. ACID transactions need to cover multiple nodes and edges to
maintain consistency. The only thing they have in common with
aggregate-oriented databases is their rejection of the relational model and an
upsurge in attention they received around the same time as the rest of the NoSQL
field.</p>

<h3 style='margin-left:-.25pt'>3.3. Schemaless Databases</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>A common theme across all the forms of NoSQL databases is
that they are schemaless. When you want to store data in a relational database,
you first have to define a schemaa defined structure for the database which
says what tables exist, which columns exist, and what data types each column
can hold. Before you store some data, you have to have the schema defined for
it.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>With NoSQL databases, storing data is
much more casual. A key-value store allows you to store any data you like under
a key. A document database effectively does the same thing, since it makes no
restrictions on the structure of the documents you store. Column-family
databases allow you to store any data under any column you like. Graph
databases allow you to freely add new edges and freely add properties to nodes
and edges as you wish.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Advocates of schemalessness rejoice in this freedom
and flexibility. With a schema, you have to figure out in advance what you need
to store, but that can be hard to do. Without a schema binding you, you can easily
store whatever you need. This allows you to easily change your data storage as
you learn more about your project. You can easily add new things as you
discover them. Furthermore, if you find you dont need some things anymore, you
can just stop storing them, without worrying about losing old data as you would
if you delete columns in a relational schema.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:1.8pt;
margin-left:-.75pt;text-indent:15.0pt'>As well as handling changes, a
schemaless store also makes it easier to deal with <b style='mso-bidi-font-weight:
normal'>nonuniform data</b>: data where each record has a different set of fields.
A schema puts all rows of a table into a straightjacket, which becomes awkward
if you have different kinds of data in different rows. You either end up with
lots of columns that are usually null (a sparse table), or you end up with
meaningless columns like <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>custom
column 4</span>. Schemalessness avoids this, allowing each record to contain
just what it needsno more, no less.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Schemalessness is appealing, and it
certainly avoids many problems that exist with fixed-schema databases, but it
brings some problems of its own. If all you are doing is storing some data and
displaying it in a report as a simple list of <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>fieldName: value</span> lines then a
schema is only going to get in the way. But usually we do with our data more
than this, and we do it with programs that need to know that the billing
address is called <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>billingAddress</span>
and not <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>addressForBilling</span>
and that the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>quantify</span>
field is going to be an integer <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>5</span>
and not <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>five</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The vital, if sometimes inconvenient,
fact is that whenever we write a program that accesses data, that program
almost always relies on some form of implicit schema. Unless it just says
something like</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>//pseudo code</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:346.35pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>foreach (Record r in records) {<span
style='mso-spacerun:yes'></span>foreach (Field f in r.fields) {<span
style='mso-spacerun:yes'></span>print (f.name, f.value)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>it will assume that certain field names are present and
carry data with a certain meaning, and assume something about the type of data
stored within that field. Programs are not humans; they cannot read qtyand
infer that that must be the same as quantityat least not unless we
specifically program them to do so. So, however schemaless our database is,
there is usually an implicit schema present. This <b style='mso-bidi-font-weight:
normal'>implicit schema</b> is a set of assumptions about the datas structure
in the code that manipulates the data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.75pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Having the implicit schema in the
application code results in some problems. It means that in order to understand
what data is present you have to dig into the application code. If that code is
well structured you should be able to find a clear place from which to deduce
the schema. But there are no guarantees; it all depends on how clear the
application code is. Furthermore, the database remains ignorant of the
schemait cant use the schema to help it decide how to store and retrieve data
efficiently. It cant apply its own validations upon that data to ensure that
different applications dont manipulate data in an inconsistent way.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>These are the reasons why relational
databases have a fixed schema, and indeed the reasons why most databases have
had fixed schemas in the past. Schemas have value, and the rejection of schemas
by NoSQL databases is indeed quite startling.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Essentially, a schemaless database
shifts the schema into the application code that accesses it. This becomes
problematic if multiple applications, developed by different people, access the
same database. These problems can be reduced with a couple of approaches. One
is to encapsulate all database interaction within a single application and
integrate it with other applications using web services. This fits in well with
many peoples current preference for using web services for integration.
Another approach is to clearly delineate different areas of an aggregate for
access by different applications. These could be different sections in a document
database or different column families an a column-family database.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:1.5pt;
margin-left:-.75pt;text-indent:15.0pt'>Although NoSQL fans often criticize
relational schemas for having to be defined up front and being inflexible,
thats not really true. Relational schemas can be changed at any time with standard
SQL commands. If necessary, you can create new columns in an ad-hoc way to
store nonuniform data. We have only rarely seen this done, but it worked
reasonably well where we have. Most of the time, however, nonuniformity in your
data is a good reason to favor a schemaless database.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Schemalessness does have a big impact on
changes of a databases structure over time, particularly for more uniform
data. Although its not practiced as widely as it ought to be, changing a
relational databases schema can be done in a controlled way. Similarly, you
have to exercise control when changing how you store data in a schemaless
database so that you can easily access both old and new data. Furthermore, the
flexibility that schemalessness gives you only applies within an aggregateif
you need to change your aggregate boundaries, the migration is every bit as
complex as it is in the relational case. Well talk more about database
migration later (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Schema
Migrations</span></u>,p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>123</span></u>).</p>

<h3 style='margin-left:-.25pt'>3.4. Materialized Views</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>When we talked about aggregate-oriented data models, we
stressed their advantages. If you want to access orders, its useful to have
all the data for an order contained in a single aggregate that can be stored
and accessed as a unit. But aggregate-orientation has a corresponding
disadvantage: What happens if a product manager wants to know how much a
particular item has sold over the last couple of weeks? Now the
aggregate-orientation works against you, forcing you to potentially read every
order in the database to answer the question. You can reduce this burden by
building an index on the product, but youre still working against the
aggregate structure.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.35pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Relational databases have an advantage
here because their lack of aggregate structure allows them to support accessing
data in different ways. Furthermore, they provide a convenient mechanism that
allows you to look at data differently from the way its storedviews. A view
is like a relational table (it is a relation) but its defined by computation
over the base tables. When you access a view, the database computes the data in
the viewa handy form of encapsulation.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Views provide a mechanism to hide from
the client whether data is derived data or base databut cant avoid the fact
that some views are expensive to compute. To cope with this, <b
style='mso-bidi-font-weight:normal'>materialized views </b>were invented, which
are views that are computed in advance and cached on disk. Materialized views
are effective for data that is read heavily but can stand being somewhat stale.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Although NoSQL databases dont have views,
they may have precomputed and cached queries, and they reuse the term
materialized viewto describe them. Its also much more of a central aspect
for aggregate-oriented databases than it is for relational systems, since most
applications will have to deal with some queries that dont fit well with the
aggregate structure. (Often, NoSQL databases create materialized views using a
map-reduce computation, which well talk about in <u style='text-underline:
#0000EE'><span style='color:#0000EE'>Chapter 7</span></u>.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>There are two rough strategies to
building a materialized view. The first is the eager approach where you update
the materialized view at the same time you update the base data for it. In this
case, adding an order would also update the purchase history aggregates for
each product. This approach is good when you have more frequent reads of the
materialized view than you have writes and you want the materialized views to
be as fresh as possible. The application database (p. <u style='text-underline:
#0000EE'><span style='color:#0000EE'>7</span></u>) approach is valuable here as
it makes it easier to ensure that any updates to base data also update
materialized</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>views.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:34.5pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>If you dont want to pay that overhead on
each update, you can run batch jobs to update the materialized views at regular
intervals. Youll need to understand your business requirements to assess how
stale your materialized views can be.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>You can build materialized views outside
of the database by reading the data, computing the view, and saving it back to
the database. More often databases will support building materialized views
themselves. In this case, you provide the computation that needs to be done,
and the database executes the computation when needed according to some
parameters that you configure. This is particularly handy for eager updates of
views with incremental map-reduce (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Incremental Map-Reduce</span></u>,p. <u
style='text-underline:#0000EE'><span style='color:#0000EE'>76</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Materialized views can be used within the same
aggregate. An order document might include an order summary element that
provides summary information about the order so that a query for an order
summary does not have to transfer the entire order document. Using different
column families for materialized views is a common feature of column-family
databases. An advantage of doing this is that it allows you to update the
materialized view within the same atomic operation.</p>

<h3 style='margin-left:-.25pt'>3.5. Modeling for Data Access</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>As mentioned earlier, when modeling data aggregates we need
to consider how the data is going to be read as well as what are the side
effects on data related to those aggregates.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>Lets start with
the model where all the data for the customer is embedded using a key-value
store (see <u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure
3.2</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:128.95pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_2434" o:spid="_x0000_i1116"
 type="#_x0000_t75" style='width:337.5pt;height:327.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image009.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=450 height=437
src="nosql_files/image009.jpg" v:shapes="Picture_x0020_2434"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.25pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 3.2. Embed all the objects for
customer and their orders.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In this scenario, the application can
read the customers information and all the related data by using the key. If
the requirements are to read the orders or the products sold in each order, the
whole object has to be read and then parsed on the client side to build the
results. When references are needed, we could switch to document stores and
then query inside the documents, or even change the data for the key-value
store to split the value object into <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span>
and <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Order</span>
objects and then maintain these objectsreferences to each other.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.3pt;
margin-left:-.75pt;text-indent:15.0pt'>With the references (see <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 3.3</span></u>),
we can now find the orders independently from the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Customer</span>, and with the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>orderId</span> reference
in the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span>
we can find all <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Order</span>s
for the</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'><span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span>.
Using aggregates this way allows for read optimization, but we have to push the
<span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>orderId </span>reference
into <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span>
every time with a new <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Order</span>.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'># Customer object</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;customerId&quot;: 1,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;customer&quot;: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;name&quot;: &quot;Martin&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;billingAddress&quot;: [{&quot;city&quot;: &quot;Chicago&quot;}],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;payment&quot;: [{&quot;type&quot;:
&quot;debit&quot;,&quot;ccinfo&quot;: &quot;1000-1000-1000-1000&quot;}],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;orders&quot;:[{&quot;orderId&quot;:99}]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'></span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'># Order object</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;customerId&quot;: 1,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;orderId&quot;: 99,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;order&quot;:{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;orderDate&quot;:&quot;Nov-20-2011&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;orderItems&quot;:[{&quot;productId&quot;:27, &quot;price&quot;:
32.45}],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;orderPayment&quot;:[{&quot;ccinfo&quot;:&quot;1000-1000-1000-1000&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'>
</span>&quot;txnId&quot;:&quot;abelif879rft&quot;}],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;shippingAddress&quot;:{&quot;city&quot;:&quot;Chicago&quot;}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.05pt;
margin-left:166.45pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_2503" o:spid="_x0000_i1115"
 type="#_x0000_t75" style='width:262.5pt;height:342pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image010.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=350 height=456
src="nosql_files/image010.jpg" v:shapes="Picture_x0020_2503"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.25pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 3.3. </b><b style='mso-bidi-font-weight:
normal'><span style='font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span>
is stored separately from </b><b style='mso-bidi-font-weight:normal'><span
style='font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Order</span>.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Aggregates can also be used to obtain
analytics; for example, an aggregate update may fill in information on which <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Order</span>s have a given
<span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Product</span>
in them. This denormalization of the data allows for fast access to the data we
are interested in and is the basis for <b style='mso-bidi-font-weight:normal'>Real
Time BI</b> or <b style='mso-bidi-font-weight:normal'>Real Time Analytics</b>
where enterprises dont have to rely on end-of-the-day batch runs to populate
data warehouse tables and generate analytics; now they can fill in this type of
data, for multiple types of requirements, when the order is placed by the
customer.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;itemid&quot;:27,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;orders&quot;:{99,545,897,678}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;itemid&quot;:29,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;orders&quot;:{199,545,704,819}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.35pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In document stores, since we can query
inside documents, removing references to <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Order</span>s from the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span> object is
possible. This change allows us to not update the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Customer</span> object when new orders
are placed by the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span>.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'># Customer object</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;customerId&quot;: 1,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;name&quot;: &quot;Martin&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;billingAddress&quot;:
[{&quot;city&quot;: &quot;Chicago&quot;}],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;payment&quot;: [</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>{&quot;type&quot;: &quot;debit&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;ccinfo&quot;: &quot;1000-1000-1000-1000&quot;}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'># Order object</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;orderId&quot;: 99,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;customerId&quot;: 1,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;orderDate&quot;:&quot;Nov-20-2011&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;orderItems&quot;:[{&quot;productId&quot;:27,
&quot;price&quot;: 32.45}],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;orderPayment&quot;:[{&quot;ccinfo&quot;:&quot;1000-1000-1000-1000&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;txnId&quot;:&quot;abelif879rft&quot;}],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;shippingAddress&quot;:{&quot;city&quot;:&quot;Chicago&quot;}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Since document data stores allow you to
query by attributes inside the document, searches such as find all orders that
include the <i style='mso-bidi-font-style:normal'>Refactoring Databases</i>
productare possible, but the decision to create an aggregate of items and
orders they belong to is not based on the databases query capability but on
the read optimization desired by the application.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When modeling for column-family stores,
we have the benefit of the columns being ordered, allowing us to name columns
that are frequently used so that they are fetched first. When using the column
families to model the data, it is important to remember to do it per your query
requirements and not for the purpose of writing; the general rule is to make it
easy to query and denormalize the data during write.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>As you can imagine, there are multiple
ways to model the data; one way is to store the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Customer </span>and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Order</span> in different <i
style='mso-bidi-font-style:normal'>column-family</i> families (see <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 3.4</span></u>).
Here, it is important to note the reference to all the orders placed by the
customer are in the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span>
column family. Similar other denormalizations are generally done so that query
(read) performance is improved.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:147.7pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_2602" o:spid="_x0000_i1114"
 type="#_x0000_t75" style='width:300pt;height:462.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image011.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=400 height=617
src="nosql_files/image011.jpg" v:shapes="Picture_x0020_2602"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:2.1pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 3.4. Conceptual view into a column
data store</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When using graph databases to model the
same data, we model all objects as nodes and relations within them as
relationships; these relationships have types and directional significance.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.7pt;
margin-left:-.75pt;text-indent:15.0pt'>Each node has independent relationships
with other nodes. These relationships have names like <i style='mso-bidi-font-style:
normal'><span style='font-family:"Courier New";mso-fareast-font-family:"Courier New"'>PURCHASED</span></i>,
<i style='mso-bidi-font-style:normal'><span style='font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>PAID_WITH</span></i>, or <i
style='mso-bidi-font-style:normal'><span style='font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>BELONGS_TO</span></i> (see <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 3.5</span></u>);
these relationship names let you traverse the graph. Lets say you want to find
all the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span>s
who <i style='mso-bidi-font-style:normal'><span style='font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>PURCHASED</span></i> a product with the</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>name <i style='mso-bidi-font-style:normal'>Refactoring
Database</i>. All we need to do is query for the product node <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Refactoring Databases</span>
and look for all the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span>s
with the incoming <i style='mso-bidi-font-style:normal'><span style='font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>PURCHASED</span></i>
relationship.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:140.2pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_2637" o:spid="_x0000_i1113"
 type="#_x0000_t75" style='width:315pt;height:263.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image012.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=420 height=351
src="nosql_files/image012.jpg" v:shapes="Picture_x0020_2637"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:1.25pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 3.5. Graph model of e-commerce data</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:13.5pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>This type of relationship traversal is
very easy with graph databases. It is especially convenient when you need to
use the data to recommend products to users or to find patterns in actions
taken by users.</p>

<h3 style='margin-left:-.25pt'>3.6. Key Points</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l6 level1 lfo5'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Aggregate-oriented
databases make inter-aggregate relationships more difficult to handle
thanintra-aggregate relationships.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l6 level1 lfo5'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Graph
databases organize data into node and edge graphs; they work best for data that
hascomplex relationship structures.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l6 level1 lfo5'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Schemaless
databases allow you to freely add fields to records, but there is usually an
implicitschema expected by users of the data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l6 level1 lfo5'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Aggregate-oriented
databases often compute materialized views to provide data organizeddifferently
from their primary aggregates. This is often done with map-reduce computations.</p>

<h2 style='margin-left:-.25pt'>Chapter 4. Distribution Models</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>The primary driver of interest in NoSQL has been its
ability to run databases on a large cluster. As data volumes increase, it
becomes more difficult and expensive to scale upbuy a bigger server to run the
database on. A more appealing option is to scale outrun the database on a
cluster of servers. Aggregate orientation fits well with scaling out because
the aggregate is a natural unit to use for distribution.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.15pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Depending on your distribution model, you
can get a data store that will give you the ability to handle larger quantities
of data, the ability to process a greater read or write traffic, or more
availability in the face of network slowdowns or breakages. These are often
important benefits, but they come at a cost. Running over a cluster introduces
complexityso its not something to do unless the benefits are compelling.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>Broadly, there are
two paths to data distribution: replication and sharding. Replication takes the
same data and copies it over multiple nodes. Sharding puts different data on
different nodes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.25pt'>Replication and sharding are orthogonal techniques: You can
use either or both of them. Replication comes into two forms: master-slave and
peer-to-peer. We will now discuss these techniques starting at the simplest and
working up to the more complex: first single-server, then master-slave
replication, then sharding, and finally peer-to-peer replication.</p>

<h3 style='margin-left:-.25pt'>4.1. Single Server</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>The first and the simplest distribution option is the one
we would most often recommendno distribution at all. Run the database on a
single machine that handles all the reads and writes to the data store. We
prefer this option because it eliminates all the complexities that the other
options introduce; its easy for operations people to manage and easy for
application developers to reason about.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Although a lot of NoSQL databases are
designed around the idea of running on a cluster, it can make sense to use
NoSQL with a single-server distribution model if the data model of the NoSQL
store is more suited to the application. Graph databases are the obvious
category herethese work best in a single-server configuration. If your data
usage is mostly about processing aggregates, then a single-server document or
key-value store may well be worthwhile because its easier on application
developers.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:10.6pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>For the rest of this chapter well be
wading through the advantages and complications of more sophisticated
distribution schemes. Dont let the volume of words fool you into thinking that
we would prefer these options. If we can get away without distributing our
data, we will always choose a single-server approach. <b style='mso-bidi-font-weight:
normal'><span style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:
103%'>4.2. Sharding</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.25pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>Often, a busy data store is busy because different
people are accessing different parts of the dataset. In these circumstances we
can support horizontal scalability by putting different parts of the data onto
different serversa technique thats called <b style='mso-bidi-font-weight:
normal'>sharding</b> (see <u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 4.1</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_2706" o:spid="_x0000_i1112"
 type="#_x0000_t75" style='width:525pt;height:312.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image013.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=417
src="nosql_files/image013.jpg" v:shapes="Picture_x0020_2706"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:.5pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 4.1. Sharding puts different data on
separate nodes, each of which does its own reads and writes.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In the ideal case, we have different
users all talking to different server nodes. Each user only has to talk to one
server, so gets rapid responses from that server. The load is balanced out
nicely between serversfor example, if we have ten servers, each one only has
to handle 10% of the load.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Of course the ideal case is a pretty
rare beast. In order to get close to it we have to ensure that data thats
accessed together is clumped together on the same node and that these clumps
are arranged on the nodes to provide the best data access.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>The first part of this question is how to clump the
data up so that one user mostly gets her data from a single server. This is
where aggregate orientation comes in really handy. The whole point of
aggregates is that we design them to combine data thats commonly accessed
togetherso aggregates leap out as an obvious unit of distribution.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When it comes to arranging the data on
the nodes, there are several factors that can help improve performance. If you
know that most accesses of certain aggregates are based on a physical location,
you can place the data close to where its being accessed. If you have orders
for someone who lives in Boston, you can place that data in your eastern US
data center.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Another factor is trying to keep the
load even. This means that you should try to arrange aggregates so they are
evenly distributed across the nodes which all get equal amounts of the load.
This may vary over time, for example if some data tends to be accessed on
certain days of the weekso there may be domain-specific rules youd like to
use.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In some cases, its useful to put
aggregates together if you think they may be read in sequence. The Bigtable
paper <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Chang
etc.]</span></u> described keeping its rows in lexicographic order and sorting
web addresses based on reversed domain names (e.g., <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>com.martinfowler</span>). This way data
for multiple pages could be accessed together to improve processing efficiency.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>Historically most people have done sharding as part of
application logic. You might put all</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>customers with surnames starting from A to D on one shard
and E to G on another. This complicates the programming model, as application
code needs to ensure that queries are distributed across the various shards.
Furthermore, rebalancing the sharding means changing the application code and
migrating the data. Many NoSQL databases offer <b style='mso-bidi-font-weight:
normal'>auto-sharding</b>, where the database takes on the responsibility of
allocating data to shards and ensuring that data access goes to the right
shard. This can make it much easier to use sharding in an application.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Sharding is particularly valuable for
performance because it can improve both read and write performance. Using
replication, particularly with caching, can greatly improve read performance
but does little for applications that have a lot of writes. Sharding provides a
way to horizontally scale</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>writes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Sharding does little to improve
resilience when used alone. Although the data is on different nodes, a node
failure makes that shards data unavailable just as surely as it does for a
single-server solution. The resilience benefit it does provide is that only the
users of the data on that shard will suffer; however, its not good to have a
database with part of its data missing. With a single server its easier to pay
the effort and cost to keep that server up and running; clusters usually try to
use less reliable machines, and youre more likely to get a node failure. So in
practice, sharding alone is likely to decrease resilience.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:13.5pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Despite the fact that sharding is made
much easier with aggregates, its still not a step to be taken lightly. Some
databases are intended from the beginning to use sharding, in which case its
wise to run them on a cluster from the very beginning of development, and
certainly in production. Other databases use sharding as a deliberate step up
from a single-server configuration, in which case its best to start
single-server and only use sharding once your load projections clearly indicate
that you are running out of headroom.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.35pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>In any case the step from a single node to
sharding is going to be tricky. We have heard tales of teams getting into
trouble because they left sharding to very late, so when they turned it on in
production their database became essentially unavailable because the sharding
support consumed all the database resources for moving the data onto new
shards. The lesson here is to use sharding well before you need towhen you
have enough headroom to carry out the sharding.</p>

<h3 style='margin-left:-.25pt'>4.3. Master-Slave Replication</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>With master-slave distribution, you replicate data across
multiple nodes. One node is designated as the master, or primary. This master
is the authoritative source for the data and is usually responsible for
processing any updates to that data. The other nodes are slaves, or
secondaries. A replication process synchronizes the slaves with the master (see
<u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 4.2</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_2791" o:spid="_x0000_i1111"
 type="#_x0000_t75" style='width:525pt;height:403.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image014.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=538
src="nosql_files/image014.jpg" v:shapes="Picture_x0020_2791"><![endif]></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.65pt;
margin-left:191.9pt;text-indent:-185.9pt;line-height:105%'><b style='mso-bidi-font-weight:
normal'>Figure 4.2. Data is replicated from master to slaves. The master
services all writes; reads may come from either master or slaves.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Master-slave replication is most helpful
for scaling when you have a read-intensive dataset. You can scale horizontally
to handle more read requests by adding more slave nodes and ensuring that all
read requests are routed to the slaves. You are still, however, limited by the
ability of the master to process updates and its ability to pass those updates
on. Consequently it isnt such a good scheme for datasets with heavy write
traffic, although offloading the read traffic will help a bit with handling the
write load.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>A second advantage of master-slave
replication is <b style='mso-bidi-font-weight:normal'>read resilience</b>:
Should the master fail, the slaves can still handle read requests. Again, this
is useful if most of your data access is reads. The failure of the master does
eliminate the ability to handle writes until either the master is restored or a
new master is appointed. However, having slaves as replicates of the master
does speed up recovery after a failure of the master since a slave can be
appointed a new master very quickly.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The ability to appoint a slave to
replace a failed master means that master-slave replication is useful even if
you dont need to scale out. All read and write traffic can go to the master
while the slave acts as a hot backup. In this case its easiest to think of the
system as a single-server store with a hot backup. You get the convenience of
the single-server configuration but with greater resiliencewhich is
particularly handy if you want to be able to handle server failures gracefully.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Masters can be appointed manually or automatically.
Manual appointing typically means that when you configure your cluster, you
configure one node as the master. With automatic appointment, you create a
cluster of nodes and they elect one of themselves to be the master. Apart from
simpler configuration, automatic appointment means that the cluster can
automatically appoint a new master when a master fails, reducing downtime.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>In order to get read resilience, you need to ensure
that the read and write paths into your application are different, so that you
can handle a failure in the write path and still read. This includes such
things as putting the reads and writes through separate database connectionsa
facility that is not often supported by database interaction libraries. As with
any feature, you cannot be sure you have read resilience without good tests
that disable the writes and check that reads still occur.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.35pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Replication comes with some alluring
benefits, but it also comes with an inevitable dark sideinconsistency. You
have the danger that different clients, reading different slaves, will see
different values because the changes havent all propagated to the slaves. In
the worst case, that can mean that a client cannot read a write it just made.
Even if you use master-slave replication just for hot backup this can be a
concern, because if the master fails, any updates not passed on to the backup
are lost. Well talk about how to deal with these issues later (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Consistency</span></u>,
p. <u style='text-underline:#0000EE'><span style='color:#0000EE'>47</span></u>).</p>

<h3 style='margin-left:-.25pt'>4.4. Peer-to-Peer Replication</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:14.25pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>Master-slave replication helps with read
scalability but doesnt help with scalability of writes. It provides resilience
against failure of a slave, but not of a master. Essentially, the master is
still a bottleneck and a single point of failure. Peer-to-peer replication (see
<u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 4.3</span></u>)
attacks these problems by not having a master. All the replicas have equal
weight, they can all accept writes, and the loss of any of them doesnt prevent
access to the data store.<br clear=all style='mso-special-character:line-break;
page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_2858" o:spid="_x0000_i1110"
 type="#_x0000_t75" style='width:525pt;height:417.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image015.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=557
src="nosql_files/image015.jpg" v:shapes="Picture_x0020_2858"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.25pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 4.3. Peer-to-peer replication has
all nodes applying reads and writes to all the data.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The prospect here looks mighty fine.
With a peer-to-peer replication cluster, you can ride over node failures
without losing access to data. Furthermore, you can easily add nodes to improve
your performance. Theres much to like herebut there are complications.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The biggest complication is, again,
consistency. When you can write to two different places, you run the risk that
two people will attempt to update the same record at the same timea write-write
conflict. Inconsistencies on read lead to problems but at least they are
relatively transient. Inconsistent writes are forever.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Well talk more about how to deal with
write inconsistencies later on, but for the moment well note a couple of broad
options. At one end, we can ensure that whenever we write data, the replicas
coordinate to ensure we avoid a conflict. This can give us just as strong a
guarantee as a master, albeit at the cost of network traffic to coordinate the
writes. We dont need all the replicas to agree on the write, just a majority,
so we can still survive losing a minority of the replica nodes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>At the other extreme, we can decide to cope with an
inconsistent write. There are contexts when we can come up with policy to merge
inconsistent writes. In this case we can get the full performance benefit of
writing to any replica.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.05pt;
margin-left:15.5pt'>These points are at the ends of a spectrum where we trade
off consistency for availability.</p>

<h3 style='margin-left:-.25pt'>4.5. Combining Sharding and Replication</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>Replication and sharding are
strategies that can be combined. If we use both master-slave replication and
sharding (see <u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure
4.4</span></u>), this means that we have multiple masters, but each data item
only has a single master. Depending on your configuration, you may choose a
node to be a master for some data and slaves for others, or you may dedicate
nodes for master or slave duties.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:91.45pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_2889" o:spid="_x0000_i1109"
 type="#_x0000_t75" style='width:412.5pt;height:258.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image016.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=550 height=345
src="nosql_files/image016.jpg" v:shapes="Picture_x0020_2889"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:1.25pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 4.4. Using master-slave replication
together with sharding</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Using peer-to-peer replication and
sharding is a common strategy for column-family databases. In a scenario like
this you might have tens or hundreds of nodes in a cluster with data sharded
over them. A good starting point for peer-to-peer replication is to have a
replication factor of 3, so each shard is present on three nodes. Should a node
fail, then the shards on that node will be built on the other nodes (see <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 4.5</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:128.95pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_2900" o:spid="_x0000_i1108"
 type="#_x0000_t75" style='width:337.5pt;height:174.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image017.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=450 height=233
src="nosql_files/image017.jpg" v:shapes="Picture_x0020_2900"><![endif]></span></p>

<h4 style='margin-top:0in;margin-right:72.15pt;margin-bottom:0in;margin-left:
-.75pt;margin-bottom:.0001pt;text-indent:98.2pt;line-height:146%'>Figure 4.5.
Using peer-to-peer replication together with sharding <span style='font-size:
17.5pt;mso-bidi-font-size:11.0pt;line-height:146%'>4.6. Key Points</span></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:45.0pt;text-indent:-9.0pt;mso-list:l4 level1 lfo6'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>There
are two styles of distributing data:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:45.0pt;text-indent:-9.0pt;mso-list:l4 level1 lfo6'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Sharding
distributes different data across multiple servers, so each server acts as the
singlesource for a subset of data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:45.0pt;text-indent:-9.0pt;mso-list:l4 level1 lfo6'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Replication
copies data across multiple servers, so each bit of data can be found in multipleplaces.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:35.0pt'>A system may use either or both techniques.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:45.0pt;text-indent:-9.0pt;mso-list:l9 level1 lfo7'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Replication
comes in two forms:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:45.0pt;text-indent:-9.0pt;mso-list:l9 level1 lfo7'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Master-slave
replication makes one node the authoritative copy that handles writes
whileslaves synchronize with the master and may handle reads.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:45.0pt;text-indent:-9.0pt;mso-list:l9 level1 lfo7'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Peer-to-peer
replication allows writes to any node; the nodes coordinate to synchronize
theircopies of the data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:35.0pt'>Master-slave replication reduces the chance of update
conflicts but peer-to-peer replication avoids loading all writes onto a single
point of failure.<br clear=all style='mso-special-character:line-break;
page-break-before:always'>
</p>

<h2 style='margin-left:-.25pt'>Chapter 5. Consistency</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:13.5pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>One of the biggest changes from a centralized
relational database to a cluster-oriented NoSQL database is in how you think
about consistency. Relational databases try to exhibit <b style='mso-bidi-font-weight:
normal'>strong consistency</b> by avoiding all the various inconsistencies that
well shortly be discussing. Once you start looking at the NoSQL world, phrases
such as CAP theoremand eventual consistencyappear, and as soon as you
start building something you have to think about what sort of consistency you
need for your system.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.5pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Consistency comes in various forms, and that one word
covers a myriad of ways errors can creep into your life. So were going to
begin by talking about the various shapes consistency can take. After that
well discuss why you may want to relax consistency (and its big sister,
durability).</p>

<h3 style='margin-left:-.25pt'>5.1. Update Consistency</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Well begin by considering updating a telephone number.
Coincidentally, Martin and Pramod are looking at the company website and notice
that the phone number is out of date. Implausibly, they both have update
access, so they both go in at the same time to update the number. To make the
example interesting, well assume they update it slightly differently, because
each uses a slightly different format. This issue is called a <b
style='mso-bidi-font-weight:normal'>write-write conflict</b>: two people
updating the same data item at the same time.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When the writes reach the server, the
server will <b style='mso-bidi-font-weight:normal'>serialize</b> themdecide to
apply one, then the other. Lets assume it uses alphabetical order and picks
Martins update first, then Pramods. Without any concurrency control, Martins
update would be applied and immediately overwritten by</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Pramods. In this case Martins is a <b style='mso-bidi-font-weight:
normal'>lost update</b>. Here the lost update is not a big problem, but often
it is. We see this as a failure of consistency because Pramods update was
based on the state before Martins update, yet was applied after it.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Approaches for maintaining consistency
in the face of concurrency are often described as pessimistic or optimistic. A <b
style='mso-bidi-font-weight:normal'>pessimistic</b> approach works by
preventing conflicts from occurring; an <b style='mso-bidi-font-weight:normal'>optimistic</b>
approach lets conflicts occur, but detects them and takes action to sort them
out. For update conflicts, the most common pessimistic approach is to have
write locks, so that in order to change a value you need to acquire a lock, and
the system ensures that only one client can get a lock at a time. So Martin and
Pramod would both attempt to acquire the write lock, but only Martin (the first
one) would succeed. Pramod would then see the result of Martins write before
deciding whether to make his own update.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.1pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>A common optimistic approach is a <b style='mso-bidi-font-weight:
normal'>conditional update</b> where any client that does an update tests the
value just before updating it to see if its changed since his last read. In
this case, Martins update would succeed but Pramods would fail. The error
would let Pramod know that he should look at the value again and decide whether
to attempt a further update.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Both the pessimistic and optimistic approaches that
weve just described rely on a consistent serialization of the updates. With a
single server, this is obviousit has to choose one, then the other. But if
theres more than one server, such as with peer-to-peer replication, then two
nodes might apply the updates in a different order, resulting in a different
value for the telephone number on each peer. Often, when people talk about
concurrency in distributed systems, they talk about sequential
consistencyensuring that all nodes apply operations in the same order.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>There is another optimistic way to
handle a write-write conflictsave both updates and record that they are in
conflict. This approach is familiar to many programmers from version control
systems, particularly distributed version control systems that by their nature
will often have conflicting commits. The next step again follows from version
control: You have to merge the two updates somehow. Maybe you show both values
to the user and ask them to sort it outthis is what happens if you update the
same contact on your phone and your computer. Alternatively, the computer may
be able to perform the merge itself; if it was a phone formatting issue, it may
be able to realize that and apply the new number with the standard format. Any
automated merge of write-write conflicts is highly domain-specific and needs to
be programmed for each particular case.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Often, when people first encounter these
issues, their reaction is to prefer pessimistic concurrency because they are
determined to avoid conflicts. While in some cases this is the right answer,
there is always a tradeoff. Concurrent programming involves a fundamental
tradeoff between safety (avoiding errors such as update conflicts) and liveness
(responding quickly to clients). Pessimistic approaches often severely degrade
the responsiveness of a system to the degree that it becomes unfit for its
purpose. This problem is made worse by the danger of errorspessimistic
concurrency often leads to deadlocks, which are hard to prevent and debug.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Replication makes it much more likely to
run into write-write conflicts. If different nodes have different copies of
some data which can be independently updated, then youll get conflicts unless
you take specific measures to avoid them. Using a single node as the target for
all writes for some data makes it much easier to maintain update consistency.
Of the distribution models we discussed earlier, all but peer-to-peer
replication do this.</p>

<h3 style='margin-left:-.25pt'>5.2. Read Consistency</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Having a data store that maintains update consistency is
one thing, but it doesnt guarantee that readers of that data store will always
get consistent responses to their requests. Lets imagine we have an order with
line items and a shipping charge. The shipping charge is calculated based on
the line items in the order. If we add a line item, we thus also need to
recalculate and update the shipping charge. In a relational database, the
shipping charge and line items will be in separate tables. The danger of
inconsistency is that Martin adds a line item to his order, Pramod then reads
the line items and shipping charge, and then Martin updates the shipping
charge. This is an <b style='mso-bidi-font-weight:normal'>inconsistent read</b>
or <b style='mso-bidi-font-weight:normal'>read-write conflict</b>: In <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 5.1</span></u>
Pramod has done a read in the middle of Martins write.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:3.0pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_3030" o:spid="_x0000_i1107"
 type="#_x0000_t75" style='width:589.5pt;height:416.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image018.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=786 height=555
src="nosql_files/image019.jpg" v:shapes="Picture_x0020_3030"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:1.25pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 5.1. A read-write conflict in
logical consistency</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>We refer to this type of consistency as <b
style='mso-bidi-font-weight:normal'>logical consistency</b>: ensuring that
different data items make sense together. To avoid a logically inconsistent
read-write conflict, relational databases support the notion of transactions.
Providing Martin wraps his two writes in a transaction, the system guarantees
that Pramod will either read both data items before the update or both after
the update.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:27.85pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>A common claim we hear is that NoSQL
databases dont support transactions and thus cant be consistent. Such claim
is mostly wrong because it glosses over lots of important details. Our first
clarification is that any statement about lack of transactions usually only
applies to some NoSQL databases, in particular the aggregate-oriented ones. In
contrast, graph databases tend to support ACID transactions just the same as
relational databases.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Secondly, aggregate-oriented databases
do support atomic updates, but only within a single aggregate. This means that
you will have logical consistency within an aggregate but not between
aggregates. So in the example, you could avoid running into that inconsistency
if the order, the delivery charge, and the line items are all part of a single
order aggregate.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Of course not all data can be put in the
same aggregate, so any update that affects multiple aggregates leaves open a
time when clients could perform an inconsistent read. The length of time an
inconsistency is present is called the <b style='mso-bidi-font-weight:normal'>inconsistency
window</b>. A NoSQL system may have a quite short inconsistency window: As one
data point, Amazons documentation says that the inconsistency window for its
SimpleDB service is usually less than a second.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>This example of a logically inconsistent
read is the classic example that youll see in any book that touches database
programming. Once you introduce replication, however, you get a whole new kind
of inconsistency. Lets imagine theres one last hotel room for a desirable
event. The hotel reservation system runs on many nodes. Martin and Cindy are a
couple considering this room, but they are discussing this on the phone because
Martin is in London and Cindy is in Boston. Meanwhile Pramod, who is in Mumbai,
goes and books that last room. That updates the replicated room availability,
but the update gets to Boston quicker than it gets to London. When Martin and
Cindy fire up their browsers to see if the room is available, Cindy sees it
booked and Martin sees it free. This is another inconsistent readbut its a
breach of a different form of consistency we call <b style='mso-bidi-font-weight:
normal'>replication consistency</b>: ensuring that the same data item has the
same value when read from different replicas (see <u style='text-underline:
#0000EE'><span style='color:#0000EE'>Figure 5.2</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:72.7pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_3075" o:spid="_x0000_i1106"
 type="#_x0000_t75" style='width:450pt;height:339pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image020.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=600 height=452
src="nosql_files/image020.jpg" v:shapes="Picture_x0020_3075"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:1.25pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 5.2. An example of replication
inconsistency</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Eventually, of course, the updates will propagate
fully, and Martin will see the room is fully booked. Therefore this situation
is generally referred to as <b style='mso-bidi-font-weight:normal'>eventually
consistent</b>, meaning that at any time nodes may have replication
inconsistencies but, if there are no further updates, eventually all nodes will
be updated to the same value. Data that is out of date is generally referred to
as <b style='mso-bidi-font-weight:normal'>stale</b>, which reminds us that a
cache is another form of replicationessentially following the master-slave
distribution model.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Although replication consistency is independent from
logical consistency, replication can exacerbate a logical inconsistency by
lengthening its inconsistency window. Two different updates on the master may
be performed in rapid succession, leaving an inconsistency window of
milliseconds. But delays in networking could mean that the same inconsistency
window lasts for much longer on a slave.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>Consistency guarantees arent something thats global to an
application. You can usually specify</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>the level of consistency you want with individual requests.
This allows you to use weak consistency most of the time when it isnt an
issue, but request strong consistency when it is.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>The presence of an inconsistency window means that
different people will see different things at the same time. If Martin and
Cindy are looking at rooms while on a transatlantic call, it can cause
confusion. Its more common for users to act independently, and then this is
not a problem. But inconsistency windows can be particularly problematic when
you get inconsistencies with yourself. Consider the example of posting comments
on a blog entry. Few people are going to worry about inconsistency windows of
even a few minutes while people are typing in their latest thoughts. Often,
systems handle the load of such sites by running on a cluster and
load-balancing incoming requests to different nodes. Therein lies a danger: You
may post a message using one node, then refresh your browser, but the refresh
goes to a different node which hasnt received your post yetand it looks like
your post was lost.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.25pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>In situations like this, you can tolerate
reasonably long inconsistency windows, but you need <b style='mso-bidi-font-weight:
normal'>readyour-writes consistency</b> which means that, once youve made an
update, youre guaranteed to continue seeing that update. One way to get this
in an otherwise eventually consistent system is to provide <b style='mso-bidi-font-weight:
normal'>session consistency</b>: Within a users session there is
read-your-writes consistency. This does mean that the user may lose that
consistency should their session end for some reason or should the user access
the same system simultaneously from different computers, but these cases are
relatively rare.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>There are a couple of techniques to
provide session consistency. A common way, and often the easiest way, is to
have a <b style='mso-bidi-font-weight:normal'>sticky session</b>: a session
thats tied to one node (this is also called <b style='mso-bidi-font-weight:
normal'>session affinity</b>). A sticky session allows you to ensure that as
long as you keep read-your-writes consistency on a node, youll get it for
sessions too. The downside is that sticky sessions reduce the ability of the
load balancer to do its job.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Another approach for session consistency
is to use version stamps (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Version Stamps</span></u>,p. <u style='text-underline:
#0000EE'><span style='color:#0000EE'>61</span></u>) and ensure every interaction
with the data store includes the latest version stamp seen by a session. The
server node must then ensure that it has the updates that include that version
stamp before responding to a request.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Maintaining session consistency with sticky sessions
and master-slave replication can be awkward if you want to read from the slaves
to improve read performance but still need to write to the master. One way of
handling this is for writes to be sent the slave, who then takes responsibility
for forwarding them to the master while maintaining session consistency for its
client. Another approach is to switch the session to the master temporarily
when doing a write, just long enough that reads are done from the master until
the slaves have caught up with the update.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Were talking about replication consistency in the
context of a data store, but its also an important factor in overall
application design. Even a simple database system will have lots of occasions
where data is presented to a user, the user cogitates, and then updates that
data. Its usually a bad idea to keep a transaction open during user
interaction because theres a real danger of conflicts when the user tries to
make her update, which leads to such approaches as offline locks <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Fowler PoEAA]</span></u>.</p>

<h3 style='margin-left:-.25pt'>5.3. Relaxing Consistency</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>Consistency is a Good Thingbut, sadly, sometimes we have
to sacrifice it. It is always possible to design a system to avoid
inconsistencies, but often impossible to do so without making unbearable
sacrifices in other characteristics of the system. As a result, we often have
to tradeoff consistency for something else. While some architects see this as a
disaster, we see it as part of the inevitable tradeoffs involved in system
design. Furthermore, different domains have different tolerances for
inconsistency, and we need to take this tolerance into account as we make our
decisions.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.25pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Trading off consistency is a familiar
concept even in single-server relational database systems. Here, our principal
tool to enforce consistency is the transaction, and transactions can provide
strong consistency guarantees. However, transaction systems usually come with
the ability to relax isolation levels, allowing queries to read data that
hasnt been committed yet, and in practice we see most applications relax
consistency down from the highest isolation level (serialized) in order to get
effective performance. We most commonly see people using the read-committed
transaction level, which eliminates some read-write conflicts but allows
others.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.6pt;margin-bottom:9.1pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Many systems forgo transactions entirely because the
performance impact of transactions is too high. Weve seen this in a couple
different ways. On a small scale, we saw the popularity of MySQL during the
days when it didnt support transactions. Many websites liked the high speed of
MySQL and were prepared to live without transactions. At the other end of the
scale, some very large websites, such as eBay <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Pritchett]</span></u>, have had to forgo transactions in
order to perform acceptablythis is particularly true when you need to
introduce sharding. Even without these constraints, many application builders
need to interact with remote systems that cant be properly included within a
transaction boundary, so updating outside of transactions is a quite common
occurrence for enterprise applications.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>5.3.1. The CAP Theorem</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:19.05pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>In the NoSQL world its common to refer to
the CAP theorem as the reason why you may need to relax consistency. It was
originally proposed by Eric Brewer in 2000 <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Brewer]</span></u> and given a formal proof by Seth
Gilbert and Nancy Lynch <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Lynch and Gilbert]</span></u> a couple of years later.
(You may also hear this referred to as Brewers Conjecture.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:15.5pt'>The basic statement of the CAP theorem is that, given the
three properties of Consistency,</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>Availability, and Partition tolerance, you can only get
two. Obviously this depends very much on how you define these three properties,
and differing opinions have led to several debates on what the real
consequences of the CAP theorem are.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.65pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Consistency is pretty much as weve
defined it so far. <b style='mso-bidi-font-weight:normal'>Availability</b> has
a particular meaning in the context of CAPit means that if you can talk to a
node in the cluster, it can read and write data. Thats subtly different from
the usual meaning, which well explore later. <b style='mso-bidi-font-weight:
normal'>Partition tolerance</b> means that the cluster can survive
communication breakages in the cluster that separate the cluster into multiple
partitions unable to communicate with each other (situation known as a <b
style='mso-bidi-font-weight:normal'>split brain</b>, see <u style='text-underline:
#0000EE'><span style='color:#0000EE'>Figure 5.3</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:3.0pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_3247" o:spid="_x0000_i1105"
 type="#_x0000_t75" style='width:588.75pt;height:389.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image021.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=785 height=519
src="nosql_files/image022.jpg" v:shapes="Picture_x0020_3247"><![endif]></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.55pt;
margin-left:-.25pt;line-height:105%'><b style='mso-bidi-font-weight:normal'>Figure
5.3. With two breaks in the communication lines, the network partitions into
two groups.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>A single-server system is the obvious
example of a CA systema system that has Consistency and Availability but not
Partition tolerance. A single machine cant partition, so it does not have to
worry about partition tolerance. Theres only one nodeso if its up, its
available. Being up and keeping consistency is reasonable. This is the world
that most relational database systems live in.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>It is theoretically possible to have a
CA cluster. However, this would mean that if a partition ever occurs in the
cluster, all the nodes in the cluster would go down so that no client can talk
to a node. By the usual definition of available,this would mean a lack of
availability, but this is where CAPs special usage of availabilitygets
confusing. CAP defines availabilityto mean every request received by a
nonfailing node in the system must result in a response<u style='text-underline:
#0000EE'><span style='color:#0000EE'>[Lynch and Gilbert]</span></u>. So a
failed, unresponsive node doesnt infer a lack of CAP availability.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>This does imply that you can build a CA cluster, but
you have to ensure it will only partition rarely and completely. This can be
done, at least within a data center, but its usually prohibitively expensive.
Remember that in order to bring down all the nodes in a cluster on a partition,
you also have to detect the partition in a timely mannerwhich itself is no
small feat.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>So clusters have to be tolerant of network partitions.
And here is the real point of the CAP theorem. Although the CAP theorem is
often stated as you can only get two out of three,in practice what its
saying is that in a system that may suffer partitions, as distributed system
do, you have to trade off consistency versus availability. This isnt a binary
decision; often, you can trade off a little consistency to get some
availability. The resulting system would be neither perfectly consistent nor
perfectly availablebut would have a combination that is reasonable for your
particular needs.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>An example should help illustrate this. Martin and
Pramod are both trying to book the last hotel room on a system that uses
peer-to-peer distribution with two nodes (London for Martin and Mumbai for
Pramod). If we want to ensure consistency, then when Martin tries to book his
room on the London node, that node must communicate with the Mumbai node before
confirming the booking. Essentially, both nodes must agree on the serialization
of their requests. This gives us consistencybut should the network link break,
then neither system can book any hotel room, sacrificing availability.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:11.25pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>One way to improve availability is to
designate one node as the master for a particular hotel and ensure all bookings
are processed by that master. Should that master be Mumbai, then Mumbai can
still process hotel bookings for that hotel and Pramod will get the last room.
If we use master-slave replication, London users can see the inconsistent room
information but cannot make a booking and thus cause an update inconsistency.
However, users expect that it could happen in this situationso, again, the
compromise works for this particular use case.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>This improves the situation, but we still cant book a
room on the London node for the hotel whose master is in Mumbai if the
connection goes down. In CAP terminology, this is a failure of availability in
that Martin can talk to the London node but the London node cannot update the
data. To gain more availability, we might allow both systems to keep accepting
hotel reservations even if the network link breaks down. The danger here is
that Martin and Pramod book the last hotel room. However, depending on how this
hotel operates, that may be fine. Often, travel companies tolerate a certain
amount of overbooking in order to cope with no-shows. Conversely, some hotels
always keep a few rooms clear even when they are fully booked, in order to be
able to swap a guest out of a room with problems or to accommodate a
high-status late booking. Some might even cancel the booking with an apology
once they detected the conflictreasoning that the cost of that is less than
the cost of losing bookings on network failures.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The classic example of allowing
inconsistent writes is the shopping cart, as discussed in Dynamo <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Amazons Dynamo]</span></u>.
In this case you are always allowed to write to your shopping cart, even if
network failures mean you end up with multiple shopping carts. The checkout
process can merge the two shopping carts by putting the union of the items from
the carts into a single cart and returning that. Almost always thats the
correct answerbut if not, the user gets the opportunity to look at the cart before
completing the order.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.0pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>The lesson here is that although most software
developers treat update consistency as The Way Things Must Be, there are cases
where you can deal gracefully with inconsistent answers to requests. These
situations are closely tied to the domain and require domain knowledge to know
how to resolve. Thus you cant usually look to solve them purely within the
development teamyou have to talk to domain experts. If you can find a way to
handle inconsistent updates, this gives you more options to increase
availability and performance. For a shopping cart, it means that shoppers can
always shop, and do so quickly. And as Patriotic Americans, we know how vital
it is to support Our Retail Destiny.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>A similar logic applies to read
consistency. If you are trading financial instruments over a computerized
exchange, you may not be able to tolerate any data that isnt right up to date.
However, if you are posting a news item to a media website, you may be able to
tolerate old pages for minutes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In these cases you need to know how
tolerant you are of stale reads, and how long the inconsistency window can
beoften in terms of the average length, worst case, and some measure of the
distribution for the lengths. Different data items may have different tolerances
for staleness, and thus may need different settings in your replication
configuration.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Advocates of NoSQL often say that instead of following
the ACID properties of relational transactions, NoSQL systems follow the BASE
properties (Basically Available, Soft state, Eventual consistency) <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Brewer]</span></u>.
Although we feel we ought to mention the BASE acronym here, we dont think its
very useful. The acronym is even more contrived than ACID, and neither
basically availablenor soft statehave been well defined. We should also
stress that when Brewer introduced the notion of BASE, he saw the tradeoff
between ACID and BASE as a spectrum, not a binary choice.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Weve included this discussion of the CAP theorem
because its often used (and abused) when talking about the tradeoffs involving
consistency in distributed databases. However, its usually better to think not
about the tradeoff between consistency and availability but rather between
consistency and <i style='mso-bidi-font-style:normal'>latency</i>. We can
summarize much of the discussion about consistency in distribution by saying
that we can improve consistency by getting more nodes involved in the
interaction, but each node we add increases the response time of that
interaction. We can then think of availability as the limit of latency that were
prepared to tolerate; once latency gets too high, we give up and treat the data
as unavailablewhich neatly fits its definition in the context of CAP.</p>

<h3 style='margin-left:-.25pt'>5.4. Relaxing Durability</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>So far weve talked about consistency, which is most of
what people mean when they talk about the</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>ACID properties of database transactions. The key to
Consistency is serializing requests by forming Atomic, Isolated work units. But
most people would scoff at relaxing durabilityafter all, what is the point of
a data store if it can lose updates?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.75pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>As it turns out, there are cases where you
may want to trade off some durability for higher performance. If a database can
run mostly in memory, apply updates to its in-memory representation, and
periodically flush changes to disk, then it may be able to provide substantially
higher responsiveness to requests. The cost is that, should the server crash,
any updates since the last flush will be lost.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.6pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>One example of where this tradeoff may be worthwhile
is storing user-session state. A big website may have many users and keep
temporary information about what each user is doing in some kind of session
state. Theres a lot of activity on this state, creating lots of demand, which
affects the responsiveness of the website. The vital point is that losing the
session data isnt too much of a tragedyit will create some annoyance, but
maybe less than a slower website would cause. This makes it a good candidate
for nondurable writes. Often, you can specify the durability needs on a
call-by-call basis, so that more important updates can force a flush to disk.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:15.75pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Another example of relaxing durability is
capturing telemetric data from physical devices. It may be that youd rather
capture data at a faster rate, at the cost of missing the last updates should
the server go down.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Another class of durability tradeoffs
comes up with replicated data. A failure of <b style='mso-bidi-font-weight:
normal'>replication durability</b> occurs when a node processes an update but
fails before that update is replicated to the other nodes. A simple case of
this may happen if you have a master-slave distribution model where the slaves
appoint a new master automatically should the existing master fail. If a master
does fail, any writes not passed onto the replicas will effectively become
lost. Should the master come back online, those updates will conflict with
updates that have happened since. We think of this as a durability problem
because you think your update has succeeded since the master acknowledged it,
but a master node failure caused it to be lost.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>If youre sufficiently confident in bringing
the master back online rapidly, this is a reason not to auto-failover to a
slave. Otherwise, you can improve replication durability by ensuring that the
master waits for some replicas to acknowledge the update before the master
acknowledges it to the client. Obviously, however, that will slow down updates
and make the cluster unavailable if slaves failso, again, we have a tradeoff,
depending upon how vital durability is. As with basic durability, its useful
for individual calls to indicate what level of durability they need.</p>

<h3 style='margin-left:-.25pt'>5.5. Quorums</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>When youre trading off consistency or durability, its not
an all or nothing proposition. The more nodes you involve in a request, the
higher is the chance of avoiding an inconsistency. This naturally leads to the question:
How many nodes need to be involved to get strong consistency?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Imagine some data replicated over three
nodes. You dont need all nodes to acknowledge a write to ensure strong
consistency; all you need is two of thema majority. If you have conflicting
writes, only one can get a majority. This is referred to as a <b
style='mso-bidi-font-weight:normal'>write quorum</b> and expressed in a
slightly pretentious inequality of <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>W
&gt; N/2</span>, meaning the number of nodes participating in the write (<span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>W</span>) must be more
than the half the number of nodes involved in replication (<span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>N</span>). The number of
replicas is often called the <b style='mso-bidi-font-weight:normal'>replication
factor</b>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Similarly to the write quorum, there is
the notion of read quorum: How many nodes you need to contact to be sure you
have the most up-to-date change. The read quorum is a bit more complicated
because it depends on how many nodes need to confirm a write.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Lets consider a replication factor of 3. If all
writes need two nodes to confirm (<span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>W
= 2</span>) then we need to contact at least two nodes to be sure well get the
latest data. If, however, writes are only confirmed by a single node (<span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>W = 1</span>) we need to
talk to all three nodes to be sure we have the latest updates. In this case,
since we dont have a write quorum, we may have an update conflict, but by
contacting enough readers we can be sure to detect it. Thus we can get strongly
consistent reads even if we dont have strong consistency on our writes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.25pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>This relationship between the number of
nodes you need to contact for a read (<span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>R</span>),
those confirming a write (<span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>W</span>),
and the replication factor (<span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>N</span>)
can be captured in an inequality: You can have a strongly consistent read if <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>R + W &gt; N</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>These inequalities
are written with a peer-to-peer distribution model in mind. If you have a
masterslave distribution, you only have to write to the master to avoid
write-write conflicts, and similarly only read from the master to avoid
read-write conflicts. With this notation, it is common to confuse the number of
nodes in the cluster with the replication factor, but these are often different.
I may have</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>100 nodes in my cluster, but only have a replication factor
of 3, with most of the distribution occurring due to sharding.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Indeed most authorities suggest that a
replication factor of 3 is enough to have good resilience. This allows a single
node to fail while still maintaining quora for reads and writes. If you have
automatic rebalancing, it wont take too long for the cluster to create a third
replica, so the chances of losing a second replica before a replacement comes
up are slight.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:15.1pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>The number of nodes participating in an
operation can vary with the operation. When writing, we might require quorum
for some types of updates but not others, depending on how much we value
consistency and availability. Similarly, a read that needs speed but can
tolerate staleness should contact less nodes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Often you may need to take both into account. If you
need fast, strongly consistent reads, you could require writes to be
acknowledged by all the nodes, thus allowing reads to contact only one (<span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>N = 3</span>, <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>W = 3</span>, <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>R = 1</span>). That would
mean that your writes are slow, since they have to contact all three nodes, and
you would not be able to tolerate losing a node. But in some circumstances that
may be the tradeoff to make.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>The point to all of this is that you
have a range of options to work with and can choose which combination of
problems and advantages to prefer. Some writers on NoSQL talk about a simple
tradeoff between consistency and availability; we hope you now realize that
its more flexibleand more complicatedthan that.</p>

<h3 style='margin-left:-.25pt'>5.6. Further Reading</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>There are all sorts of interesting blog posts and papers on
the Internet about consistency in distributed systems, but the most helpful
source for us was <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Tanenbaum
and Van Steen]</span></u>. It does an excellent job of organizing much of the
fundamentals of distributed systems and is the best place to go if youd like
to delve deeper than we have in this chapter.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>As we were finishing this book, <i style='mso-bidi-font-style:
normal'>IEEE Computer</i> had a special issue [IEEE Computer Feb 2012] on the
growing influence of the CAP theorem, which is a helpful source of further
clarification for this topic.</p>

<h3 style='margin-left:-.25pt'>5.7. Key Points</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l11 level1 lfo8'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Write-write
conflicts occur when two clients try to write the same data at the same time.
Read-write conflicts occur when one client reads inconsistent data in the
middle of another clients write.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l11 level1 lfo8'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Pessimistic
approaches lock data records to prevent conflicts. Optimistic approaches
detectconflicts and fix them.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l11 level1 lfo8'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Distributed
systems see read-write conflicts due to some nodes having received updates
whileother nodes have not. Eventual consistency means that at some point the
system will become consistent once all the writes have propagated to all the
nodes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.15pt;
margin-left:34.5pt;text-indent:-9.0pt;line-height:103%;mso-list:l11 level1 lfo8'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:103%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Clients
usually want read-your-writes consistency, which means a client can write and
thenimmediately read the new value. This can be difficult if the read and the
write happen on different nodes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l11 level1 lfo8'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>To
get good consistency, you need to involve many nodes in data operations, but
this increaseslatency. So you often have to trade off consistency versus
latency.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l11 level1 lfo8'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>The
CAP theorem states that if you get a network partition, you have to trade off
availability ofdata versus consistency.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l11 level1 lfo8'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Durability
can also be traded off against latency, particularly if you want to survive
failureswith replicated data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l11 level1 lfo8'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>You
do not need to contact all replicants to preserve strong consistency with
replication; youjust need a large enough quorum.</p>

<h2 style='margin-left:-.25pt'>Chapter 6. Version Stamps</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Many critics of NoSQL databases focus on the lack of
support for transactions. Transactions are a useful tool that helps programmers
support consistency. One reason why many NoSQL proponents worry less about a
lack of transactions is that aggregate-oriented NoSQL databases do support
atomic updates within an aggregateand aggregates are designed so that their
data forms a natural unit of update. That said, its true that transactional
needs are something to take into account when you decide what database to use.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>As part of this, its important to remember that
transactions have limitations. Even within a transactional system we still have
to deal with updates that require human intervention and usually cannot be run
within transactions because they would involve holding a transaction open for
too long. We can cope with these using <b style='mso-bidi-font-weight:normal'>version
stamps</b>which turn out to be handy in other situations as well, particularly
as we move away from the single-server distribution model.</p>

<h3 style='margin-left:-.25pt'>6.1. Business and System Transactions</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:11.25pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>The need to support update consistency
without transactions is actually a common feature of systems even when they are
built on top of transactional databases. When users think about transactions,
they usually mean <b style='mso-bidi-font-weight:normal'>business transactions</b>.
A business transaction may be something like browsing a product catalog,
choosing a bottle of Talisker at a good price, filling in credit card
information, and confirming the order. Yet all of this usually wont occur
within the <b style='mso-bidi-font-weight:normal'>system transaction</b>
provided by the database because this would mean locking the database elements
while the user is trying to find their credit card and gets called off to lunch
by their colleagues.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Usually applications only begin a system transaction
at the end of the interaction with the user, so that the locks are only held
for a short period of time. The problem, however, is that calculations and
decisions may have been made based on data thats changed. The price list may
have updated the price of the Talisker, or someone may have updated the
customers address, changing the shipping charges.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The broad techniques for handling this
are offline concurrency <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Fowler PoEAA]</span></u>, useful in NoSQL situations
too. A particularly useful approach is the Optimistic Offline Lock <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Fowler PoEAA]</span></u>,
a form of conditional update where a client operation rereads any information
that the business transaction relies on and checks that it hasnt changed since
it was originally read and displayed to the user. A good way of doing this is
to ensure that records in the database contain some form of <b
style='mso-bidi-font-weight:normal'>version stamp</b>: a field that changes
every time the underlying data in the record changes. When you read the data
you keep a note of the version stamp, so that when you write data you can check
to see if the version has changed.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.85pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>You may have come across this technique
with updating resources with HTTP <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[HTTP]</span></u>. One way of doing this is to use etags.
Whenever you get a resource, the server responds with an etag in the header.
This etag is an opaque string that indicates the version of the resource. If
you then update that resource, you can use a conditional update by supplying
the etag that you got from your last GET. If the resource has changed on the
server, the etags wont match and the server will refuse the update, returning
a 412 (Precondition Failed) response.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Some databases provide a similar
mechanism of conditional update that allows you to ensure updates wont be
based on stale data. You can do this check yourself, although you then have to
ensure no other thread can run against the resource between your read and your
update. (Sometimes this is called a compare-and-set (CAS) operation, whose name
comes from the CAS operations done in processors. The difference is that a
processor CAS compares a value before setting it, while a database conditional
update compares a version stamp of the value.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>There are various ways you can construct
your version stamps. You can use a counter, always incrementing it when you
update the resource. Counters are useful since they make it easy to tell if one
version is more recent than another. On the other hand, they require the server
to generate the counter value, and also need a single master to ensure the
counters arent duplicated.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Another approach is to create a GUID, a
large random number thats guaranteed to be unique. These use some combination
of dates, hardware information, and whatever other sources of randomness they
can pick up. The nice thing about GUIDs is that they can be generated by anyone
and youll never get a duplicate; a disadvantage is that they are large and
cant be compared directly for recentness.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>A third approach is to make a hash of
the contents of the resource. With a big enough hash key size, a content hash
can be globally unique like a GUID and can also be generated by anyone; the
advantage is that they are deterministicany node will generate the same
content hash for same resource data. However, like GUIDs they cant be directly
compared for recentness, and they can be lengthy.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>A fourth approach is to use the timestamp of the last
update. Like counters, they are reasonably short and can be directly compared
for recentness, yet have the advantage of not needing a single master. Multiple
machines can generate timestampsbut to work properly, their clocks have to be
kept in sync. One node with a bad clock can cause all sorts of data
corruptions. Theres also a danger that if the timestamp is too granular you
can get duplicatesits no good using timestamps of a millisecond precision if
you get many updates per millisecond.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>You can blend the advantages of these
different version stamp schemes by using more than one of them to create a
composite stamp. For example, CouchDB uses a combination of counter and content
hash. Most of the time this allows version stamps to be compared for
recentness, even when you use peer-to-peer replication. Should two peers update
at the same time, the combination of the same count and different content
hashes makes it easy to spot the conflict.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>As well as helping to avoid update
conflicts, version stamps are also useful for providing session consistency (p.
<u style='text-underline:#0000EE'><span style='color:#0000EE'>52</span></u>).</p>

<h3 style='margin-left:-.25pt'>6.2. Version Stamps on Multiple Nodes</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>The basic version stamp works well when you have a single
authoritative source for data, such as a single server or master-slave
replication. In that case the version stamp is controlled by the master. Any
slaves follow the masters stamps. But this system has to be enhanced in a
peer-to-peer distribution model because theres no longer a single place to set
the version stamps.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>If youre asking two nodes for some data, you run into
the chance that they may give you different answers. If this happens, your
reaction may vary depending on the cause of that difference. It may be that an
update has only reached one node but not the other, in which case you can
accept the latest (assuming you can tell which one that is). Alternatively, you
may have run into an inconsistent update, in which case you need to decide how
to deal with that. In this situation, a simple GUID or etag wont suffice,
since these dont tell you enough about the relationships.</p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:6.4pt;
margin-bottom:.8pt;margin-left:5.25pt;text-align:center;line-height:103%'>The
simplest form of version stamp is a counter. Each time a node updates the data,
it increments</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>the counter and puts the value of the counter into the
version stamp. If you have blue and green slave replicas of a single master,
and the blue node answers with a version stamp of 4 and the green node with 6,
you know that the greens answer is more recent.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In multiple-master cases, we need
something fancier. One approach, used by distributed version control systems,
is to ensure that all nodes contain a history of version stamps. That way you
can see if the blue nodes answer is an ancestor of the greens answer. This
would either require the clients to hold onto version stamp histories, or the
server nodes to keep version stamp histories and include them when asked for
data. This also detects an inconsistency, which we would see if we get two
version stamps and neither of them has the other in their histories. Although
version control systems keep these kinds of histories, they arent found in
NoSQL databases.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>A simple but problematic approach is to
use timestamps. The main problem here is that its usually difficult to ensure
that all the nodes have a consistent notion of time, particularly if updates
can happen rapidly. Should a nodes clock get out of sync, it can cause all
sorts of trouble. In addition, you cant detect write-write conflicts with
timestamps, so it would only work well for the singlemaster caseand then a
counter is usually better.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.1pt;
margin-left:-.75pt;text-indent:15.0pt'>The most common approach used by
peer-to-peer NoSQL systems is a special form of version stamp which we call a
vector stamp. In essence, a <b style='mso-bidi-font-weight:normal'>vector stamp</b>
is a set of counters, one for each node. A vector stamp for three nodes (blue,
green, black) would look something like <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>[blue: 43, green: 54, black: 12]</span>.
Each time a node has an internal update, it updates its own counter, so an
update in the green node would change the vector to <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>[blue: 43, green: 55, black: 12]</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Whenever two nodes communicate, they synchronize their
vector stamps. There are several variations of exactly how this synchronization
is done. Were coining the term vector stampas a general term in this book;
youll also come across <b style='mso-bidi-font-weight:normal'>vector clocks</b>
and <b style='mso-bidi-font-weight:normal'>version vectors</b>these are
specific forms of vector stamps that differ in how they synchronize.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>By using this scheme you can tell if one
version stamp is newer than another because the newer stamp will have all its
counters greater than or equal to those in the older stamp. So <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>[blue: 1, green: 2, black:
5]</span> is newer than <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>[blue:1,
green: 1, black 5]</span> since one of its counters is greater. If both stamps
have a counter greater than the other, e.g. <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>[blue: 1, green: 2, black: 5] </span>and
<span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>[blue: 2,
green: 1, black: 5]</span>, then you have a write-write conflict.</p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:9.25pt;
margin-bottom:.8pt;margin-left:5.25pt;text-align:center;line-height:103%'>There
may be missing values in the vector, in which case we use treat the missing
value as <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>0</span>.
So</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'><span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>[blue:
6, black: 2]</span> would be treated as <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>[blue: 6, green: 0, black: 2]</span>.
This allows you to easily add new nodes without invalidating the existing
vector stamps.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Vector stamps are a valuable tool that
spots inconsistencies, but doesnt resolve them. Any conflict resolution will
depend on the domain you are working in. This is part of the
consistency/latency tradeoff. You either have to live with the fact that
network partitions may make your system unavailable, or you have to detect and
deal with inconsistencies.</p>

<h3 style='margin-left:-.25pt'>6.3. Key Points</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.1pt;
margin-left:34.5pt;text-indent:-9.0pt;line-height:103%;mso-list:l12 level1 lfo9'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:103%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Version
stamps help you detect concurrency conflicts. When you read data, then update
it, youcan check the version stamp to ensure nobody updated the data between
your read and write.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l12 level1 lfo9'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Version
stamps can be implemented using counters, GUIDs, content hashes, timestamps, or
acombination of these.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l12 level1 lfo9'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>With
distributed systems, a vector of version stamps allows you to detect when
different nodes</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:35.0pt'>have conflicting updates.<br clear=all style='mso-special-character:
line-break;page-break-before:always'>
</p>

<h2 style='margin-left:-.25pt'>Chapter 7. Map-Reduce</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:15.0pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>The rise of aggregate-oriented databases is
in large part due to the growth of clusters. Running on a cluster means you
have to make your tradeoffs in data storage differently than when running on a
single machine. Clusters dont just change the rules for data storagethey also
change the rules for computation. If you store lots of data on a cluster,
processing that data efficiently means you have to think differently about how
you organize your processing.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>With a centralized database, there are generally two
ways you can run the processing logic against it: either on the database server
itself or on a client machine. Running it on a client machine gives you more
flexibility in choosing a programming environment, which usually makes for
programs that are easier to create or extend. This comes at the cost of having
to shlep lots of data from the database server. If you need to hit a lot of
data, then it makes sense to do the processing on the server, paying the price
in programming convenience and increasing the load on the database server.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When you have a cluster, there is good
news immediatelyyou have lots of machines to spread the computation over.
However, you also still need to try to reduce the amount of data that needs to
be transferred across the network by doing as much processing as you can on the
same node as the data it needs.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>The map-reduce pattern (a form of <i
style='mso-bidi-font-style:normal'>Scatter-Gather</i> <u style='text-underline:
#0000EE'><span style='color:#0000EE'>[Hohpe and Woolf]</span></u>) is a way to
organize processing in such a way as to take advantage of multiple machines on
a cluster while keeping as much processing and the data it needs together on
the same machine. It first gained prominence with Googles MapReduce framework <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Dean and Ghemawat]</span></u>.
A widely used open-source implementation is part of the Hadoop project,
although several databases include their own implementations. As with most
patterns, there are differences in detail between these implementations, so
well concentrate on the general concept. The name map-reducereveals its
inspiration from the map and reduce operations on collections in functional
programming languages.</p>

<h3 style='margin-left:-.25pt'>7.1. Basic Map-Reduce</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>To explain the basic idea, well start from an example
weve already flogged to deaththat of customers and orders. Lets assume we
have chosen orders as our aggregate, with each order having line items. Each
line item has a product ID, quantity, and the price charged. This aggregate
makes a lot of sense as usually people want to see the whole order in one
access. We have lots of orders, so weve sharded the dataset over many
machines.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>However, sales analysis people want to
see a product and its total revenue for the last seven days. This report
doesnt fit the aggregate structure that we havewhich is the downside of using
aggregates. In order to get the product revenue report, youll have to visit
every machine in the cluster and examine many records on each machine.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>This is exactly the kind of situation
that calls for map-reduce. The first stage in a map-reduce job is the map. A
map is a function whose input is a single aggregate and whose output is a bunch
of keyvalue pairs. In this case, the input would be an order. The output would
be key-value pairs corresponding to the line items. Each one would have the
product ID as the key and an embedded map with the quantity and price as the
values (see <u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure
7.1</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_3824" o:spid="_x0000_i1104"
 type="#_x0000_t75" style='width:525pt;height:276pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image023.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=368
src="nosql_files/image023.jpg" v:shapes="Picture_x0020_3824"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.25pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 7.1. A map function reads records
from the database and emits key-value pairs.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Each application of the map function is independent of
all the others. This allows them to be safely parallelizable, so that a
map-reduce framework can create efficient map tasks on each node and freely
allocate each order to a map task. This yields a great deal of parallelism and
locality of data access. For this example, we are just selecting a value out of
the record, but theres no reason why we cant carry out some arbitrarily
complex function as part of the mapproviding it only depends on one
aggregates worth of data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>A map operation only
operates on a single record; the reduce function takes multiple map outputs
with the same key and combines their values. So, a map function might yield
1000 line items from orders for Database Refactoring; the reduce function
would reduce down to one, with the totals for the quantity and revenue. While
the map function is limited to working only on data from a single aggregate,
the reduce function can use all values emitted for a single key (see <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 7.2</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_3842" o:spid="_x0000_i1103"
 type="#_x0000_t75" style='width:525pt;height:183.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image024.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=245
src="nosql_files/image024.jpg" v:shapes="Picture_x0020_3842"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:.5pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 7.2. A reduce function takes several
key-value pairs with the same key and aggregates them into one.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>The map-reduce framework arranges for
map tasks to be run on the correct nodes to process all the documents and for
data to be moved to the reduce function. To make it easier to write the reduce
function, the framework collects all the values for a single pair and calls the
reduce function once with the key and the collection of all the values for that
key. So to run a map-reduce job, you just need to write these two functions.</p>

<h3 style='margin-left:-.25pt'>7.2. Partitioning and Combining</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>In the simplest form, we think of a
map-reduce job as having a single reduce function. The outputs from all the map
tasks running on the various nodes are concatenated together and sent into the
reduce. While this will work, there are things we can do to increase the
parallelism and to reduce the data transfer (see <u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 7.3</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:16.5pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_3862" o:spid="_x0000_i1102"
 type="#_x0000_t75" style='width:562.5pt;height:396pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image025.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=750 height=528
src="nosql_files/image025.jpg" v:shapes="Picture_x0020_3862"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.25pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 7.3. Partitioning allows reduce
functions to run in parallel on different keys.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The first thing we can do is increase
parallelism by partitioning the output of the mappers. Each reduce function
operates on the results of a single key. This is a limitationit means you
cant do anything in the reduce that operates across keysbut its also a
benefit in that it allows you to run multiple reducers in parallel. To take
advantage of this, the results of the mapper are divided up based the key on
each processing node. Typically, multiple keys are grouped together into
partitions. The framework then takes the data from all the nodes for one
partition, combines it into a single group for that partition, and sends it off
to a reducer. Multiple reducers can then operate on the partitions in parallel,
with the final results merged together. (This step is also called shuffling,and
the partitions are sometimes referred to as bucketsor regions.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>The next problem
we can deal with is the amount of data being moved from node to node between
the map and reduce stages. Much of this data is repetitive, consisting of
multiple key-value pairs for the same key. A combiner function cuts this data
down by combining all the data for the same key into a single value (see <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 7.4</span></u>).
A combiner function is, in essence, a reducer functionindeed, in many cases
the same function can be used for combining as the final reduction. The reduce
function needs a special shape for this to work: Its output must match its
input. We call such a function a <b style='mso-bidi-font-weight:normal'>combinable
reducer</b>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:16.5pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_3891" o:spid="_x0000_i1101"
 type="#_x0000_t75" style='width:562.5pt;height:217.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image026.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=750 height=290
src="nosql_files/image026.jpg" v:shapes="Picture_x0020_3891"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.25pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 7.4. Combining reduces data before
sending it across the network.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>Not all reduce
functions are combinable. Consider a function that counts the number of unique
customers for a particular product. The map function for such an operation
would need to emit the product and the customer. The reducer can then combine
them and count how many times each customer appears for a particular product,
emitting the product and the count (see <u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 7.5</span></u>). But this reducers output is
different from its input, so it cant be used as a combiner. You can still run
a combining function here: one that just eliminates duplicate product-customer
pairs, but it will be different from the final reducer.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:110.2pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_3905" o:spid="_x0000_i1100"
 type="#_x0000_t75" style='width:375pt;height:185.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image027.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=500 height=247
src="nosql_files/image027.jpg" v:shapes="Picture_x0020_3905"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:.5pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 7.5. This reduce function, which
counts how many unique customers order a particular tea, is not combinable.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:10.1pt;margin-bottom:
9.85pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>When you have combining reducers, the
map-reduce framework can safely run not only in parallel (to reduce different
partitions), but also in series to reduce the same partition at different times
and places. In addition to allowing combining to occur on a node before data
transmission, you can also start combining before mappers have finished. This
provides a good bit of extra flexibility to the map-reduce processing. Some
map-reduce frameworks require all reducers to be combining reducers, which
maximizes this flexibility. If you need to do a noncombining reducer with one
of these frameworks, youll need to separate the processing into pipelined
map-reduce steps.</p>

<h3 style='margin-left:-.25pt'>7.3. Composing Map-Reduce Calculations</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>The map-reduce approach is a way of thinking about concurrent
processing that trades off flexibility in how you structure your computation
for a relatively straightforward model for parallelizing the computation over a
cluster. Since its a tradeoff, there are constraints on what you can do in
your calculations. Within a map task, you can only operate on a single
aggregate. Within a reduce task, you can only operate on a single key. This
means you have to think differently about structuring your programs so they
work well within these constraints.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
0in;margin-left:-.75pt;margin-bottom:.0001pt;text-align:justify;text-justify:
inter-ideograph;text-indent:14.5pt;line-height:103%'>One simple limitation is
that you have to structure your calculations around operations that fit in well
with the notion of a reduce operation. A good example of this is calculating
averages. Lets consider the kind of orders weve been looking at so far;
suppose we want to know the average ordered quantity of each product. An
important property of averages is that they are not composable that is, if I
take two groups of orders, I cant combine their averages alone. Instead, I
need to take total amount and the count of orders from each group, combine
those, and then calculate the average from the combined sum and count (see <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 7.6</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_3943" o:spid="_x0000_i1099"
 type="#_x0000_t75" style='width:525pt;height:213pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image028.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=284
src="nosql_files/image028.jpg" v:shapes="Picture_x0020_3943"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:.5pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 7.6. When calculating averages, the
sum and count can be combined in the reduce calculation, but the average must
be calculated from the combined sum and count.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>This notion of looking for calculations
that reduce neatly also affects how we do counts. To make a count, the mapping
function will emit count fields with a value of <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>1</span>, which can be summed to get a
total count (see <u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure
7.7</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:16.5pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_3961" o:spid="_x0000_i1098"
 type="#_x0000_t75" style='width:562.5pt;height:235.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image029.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=750 height=314
src="nosql_files/image029.jpg" v:shapes="Picture_x0020_3961"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.25pt;
margin-bottom:9.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 7.7. When making a count, each map
emits </b><b style='mso-bidi-font-weight:normal'><span style='font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>1</span>, which can be summed to get a
total.</b></p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>7.3.1. A Two Stage Map-Reduce Example</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>As map-reduce calculations get more complex, its useful to
break them down into stages using a pipes-and-filters approach, with the output
of one stage serving as input to the next, rather like the pipelines in UNIX.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>Consider an
example where we want to compare the sales of products for each month in 2011
to the prior year. To do this, well break the calculations down into two
stages. The first stage will produce records showing the aggregate figures for
a single product in a single month of the year. The second stage then uses
these as inputs and produces the result for a single product by comparing one
months results with the same month in the prior year (see <u style='text-underline:
#0000EE'><span style='color:#0000EE'>Figure 7.8</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_3978" o:spid="_x0000_i1097"
 type="#_x0000_t75" style='width:525pt;height:226.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image030.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=302
src="nosql_files/image030.jpg" v:shapes="Picture_x0020_3978"><![endif]></span></p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:2.65pt;margin-left:
241.0pt;text-indent:-241.75pt'>Figure 7.8. A calculation broken down into two
map-reduce steps, which will be expanded in the next three figures</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>A first stage (<u style='text-underline:
#0000EE'><span style='color:#0000EE'>Figure 7.9</span></u>) would read the
original order records and output a series of key-value pairs for the sales of
each product per month.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:16.5pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_3995" o:spid="_x0000_i1096"
 type="#_x0000_t75" style='width:562.5pt;height:364.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image031.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=750 height=486
src="nosql_files/image031.jpg" v:shapes="Picture_x0020_3995"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:1.5pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 7.9. Creating records for monthly
sales of a product</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>This stage is similar to the map-reduce
examples weve seen so far. The only new feature is using a composite key so
that we can reduce records based on the values of multiple fields.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>The second-stage mappers (<u style='text-underline:
#0000EE'><span style='color:#0000EE'>Figure 7.10</span></u>) process this
output depending on the year. A 2011 record populates the current year quantity
while a 2010 record populates a prior year quantity. Records for earlier years
(such as 2009) dont result in any mapping output being emitted.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:72.7pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_4011" o:spid="_x0000_i1095"
 type="#_x0000_t75" style='width:450pt;height:368.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image032.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=600 height=491
src="nosql_files/image032.jpg" v:shapes="Picture_x0020_4011"><![endif]></span></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:19.5pt;
margin-bottom:2.25pt;margin-left:0in;text-align:right;text-indent:0in;
line-height:107%'><b style='mso-bidi-font-weight:normal'>Figure 7.10. The
second stage mapper creates base records for year-on-year comparisons.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>The reduce in this
case (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 7.11</span></u>)
is a merge of records, where combining the values by summing allows two
different year outputs to be reduced to a single value (with a calculation
based on the reduced values thrown in for good measure).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:3.0pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_4020"
 o:spid="_x0000_i1094" type="#_x0000_t75" style='width:589.5pt;height:318.75pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image033.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=786 height=425
src="nosql_files/image033.jpg" v:shapes="Picture_x0020_4020"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.25pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 7.11. The reduction step is a merge
of incomplete records.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Decomposing this report into multiple
map-reduce steps makes it easier to write. Like many transformation examples,
once youve found a transformation framework that makes it easy to compose
steps, its usually easier to compose many small steps together than try to
cram heaps of logic into a single step.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Another advantage is that the
intermediate output may be useful for different outputs too, so you can get
some reuse. This reuse is important as it saves time both in programming and in
execution. The intermediate records can be saved in the data store, forming a
materialized view (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Materialized
Views</span></u>,p. <u style='text-underline:#0000EE'><span style='color:
#0000EE'>30</span></u>). Early stages of map-reduce operations are particularly
valuable to save since they often represent the heaviest amount of data access,
so building them once as a basis for many downstream uses saves a lot of work.
As with any reuse activity, however, its important to build them out of
experience with real queries, as speculative reuse rarely fulfills its promise.
So its important to look at the forms of various queries as they are built and
factor out the common parts of the calculations into materialized views.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:15.0pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Map-reduce is a pattern that can be
implemented in any programming language. However, the constraints of the style
make it a good fit for languages specifically designed for map-reduce
computations. Apache Pig <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Pig]</span></u>, an offshoot of the Hadoop <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Hadoop]</span></u>
project, is a language specifically built to make it easy to write map-reduce
programs. It certainly makes it much easier to work with Hadoop than the
underlying Java libraries. In a similar vein, if you want to specify mapreduce
programs using an SQL-like syntax, there is hive <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Hive]</span></u>, another Hadoop offshoot.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:9.1pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>The map-reduce pattern is important to know about even
outside of the context of NoSQL databases. Googles original map-reduce system
operated on files stored on a distributed file system an approach thats used
by the open-source Hadoop project. While it takes some thought to get used to
the constraints of structuring computations in map-reduce steps, the result is
a calculation that is inherently well-suited to running on a cluster. When
dealing with high volumes of data, you need to take a cluster-oriented
approach. Aggregate-oriented databases fit well with this style of calculation.
We think that in the next few years many more organizations will be processing
the volumes of data that demand a cluster-oriented solutionand the map-reduce
pattern will see more and more use.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>7.3.2. Incremental Map-Reduce</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>The examples weve discussed so far are complete map-reduce
computations, where we start with raw inputs and create a final output. Many
map-reduce computations take a while to perform, even with clustered hardware,
and new data keeps coming in which means we need to rerun the computation to
keep the output up to date. Starting from scratch each time can take too long,
so often its useful to structure a map-reduce computation to allow incremental
updates, so that only the minimum computation needs to be done.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:15.1pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>The map stages of a map-reduce are easy to
handle incrementallyonly if the input data changes does the mapper need to be
rerun. Since maps are isolated from each other, incremental updates are
straightforward.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The more complex case is the reduce
step, since it pulls together the outputs from many maps and any change in the
map outputs could trigger a new reduction. This recomputation can be lessened
depending on how parallel the reduce step is. If we are partitioning the data
for reduction, then any partition thats unchanged does not need to be
re-reduced. Similarly, if theres a combiner step, it doesnt need to be rerun
if its source data hasnt changed.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>If our reducer is combinable, theres
some more opportunities for computation avoidance. If the changes are
additivethat is, if we are only adding new records but are not changing or
deleting any old recordsthen we can just run the reduce with the existing
result and the new additions. If there are destructive changes, that is updates
and deletes, then we can avoid some recomputation by breaking up the reduce
operation into steps and only recalculating those steps whose inputs have
changedessentially, using a <i style='mso-bidi-font-style:normal'>Dependency
Network</i> <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Fowler
DSL]</span></u> to organize the computation.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>The map-reduce framework controls much
of this, so you have to understand how a specific framework supports
incremental operation.</p>

<h3 style='margin-left:-.25pt'>7.4. Further Reading</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:13.65pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>If youre going to use map-reduce
calculations, your first port of call will be the documentation for the
particular database you are using. Each database has its own approach,
vocabulary, and quirks, and thats what youll need to be familiar with. Beyond
that, there is a need to capture more general information on how to structure
map-reduce jobs to maximize maintainability and performance. We dont have any
specific books to point to yet, but we suspect that a good though easily
overlooked source are books on Hadoop. Although Hadoop is not a database, its
a tool that uses map-reduce heavily, so writing an effective map-reduce task
with Hadoop is likely to be useful in other contexts (subject to the changes in
detail between Hadoop and whatever systems youre using). <b style='mso-bidi-font-weight:
normal'><span style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:
103%'>7.5. Key Points</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l1 level1 lfo10'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Map-reduce
is a pattern to allow computations to be parallelized over a cluster.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l1 level1 lfo10'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>The
map task reads data from an aggregate and boils it down to relevant key-value
pairs. Mapsonly read a single record at a time and can thus be parallelized and
run on the node that stores the record.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l1 level1 lfo10'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Reduce
tasks take many values for a single key output from map tasks and summarize
them intoa single output. Each reducer operates on the result of a single key,
so it can be parallelized by key.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l1 level1 lfo10'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Reducers
that have the same form for input and output can be combined into pipelines.
Thisimproves parallelism and reduces the amount of data to be transferred.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l1 level1 lfo10'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Map-reduce
operations can be composed into pipelines where the output of one reduce is
theinput to another operations map.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l1 level1 lfo10'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>If
the result of a map-reduce computation is widely used, it can be stored as a
materializedview.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l1 level1 lfo10'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Materialized
views can be updated through incremental map-reduce operations that onlycompute
changes to the view instead of recomputing everything from scratch.</p>

<h1 style='margin-left:178.95pt'>Part II: Implement<br clear=all
style='mso-special-character:line-break;page-break-before:always'>
</h1>

<h2 style='margin-left:-.25pt'>Chapter 8. Key-Value Databases</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>A key-value store is a simple hash
table, primarily used when all access to the database is via primary key. Think
of a table in a traditional RDBMS with two columns, such as <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>ID</span> and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>NAME</span>, the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>ID </span>column being the
key and <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>NAME</span>
column storing the value. In an RDBMS, the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>NAME</span> column is restricted to
storing data of type <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>String</span>.
The application can provide an <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>ID</span>
and <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>VALUE</span>
and persist the pair; if the <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>ID</span>
already exists the current value is overwritten, otherwise a new entry is
created. Lets look at how terminology compares in Oracle and Riak.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.05pt;
margin-left:.75in;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_4184" o:spid="_x0000_i1093"
 type="#_x0000_t75" style='width:487.5pt;height:141.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image034.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=650 height=189
src="nosql_files/image034.jpg" v:shapes="Picture_x0020_4184"><![endif]></span></p>

<h3 style='margin-left:-.25pt'>8.1. What Is a Key-Value Store</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Key-value stores are the simplest NoSQL data stores to use
from an API perspective. The client can either get the value for the key, put a
value for a key, or delete a key from the data store. The value is a blob that
the data store just stores, without caring or knowing whats inside; its the
responsibility of the application to understand what was stored. Since key-value
stores always use primary-key access, they generally have great performance and
can be easily scaled.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:15.5pt'>Some of the popular key-value databases are Riak <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Riak]</span></u>,
Redis (often referred to as Data</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Structure server) <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Redis]</span></u>, Memcached DB and its flavors <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Memcached]</span></u>,
Berkeley DB <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Berkeley</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'><u style='text-underline:#0000EE'><span style='color:#0000EE'>DB]</span></u>,
HamsterDB (especially suited for embedded use) <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[HamsterDB]</span></u>, Amazon DynamoDB</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'><u style='text-underline:#0000EE'><span style='color:#0000EE'>[Amazons
Dynamo]</span></u> (not open-source), and Project Voldemort <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Project Voldemort]</span></u>
(an open-source implementation of Amazon DynamoDB).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In some key-value stores, such as Redis,
the aggregate being stored does not have to be a domain objectit could be any
data structure. Redis supports storing <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>lists</span>, <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>sets</span>, <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>hashes</span> and can do range, diff,
union, and intersection operations. These features allow Redis to be used in
more different ways than a standard key-value store.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>There are many more key-value databases and many new
ones are being worked on at this time. For the sake of keeping discussions in
this book easier we will focus mostly on Riak. Riak lets us store keys into
buckets, which are just a way to segment the keysthink of buckets as flat
namespaces for the keys.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>If we wanted to store user session data,
shopping cart information, and user preferences in Riak, we could just store
all of them in the same bucket with a single key and single value for all of
these objects. In this scenario, we would have a single object that stores all
the data and is put into a single bucket (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 8.1</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:203.9pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_4271" o:spid="_x0000_i1092"
 type="#_x0000_t75" style='width:187.5pt;height:303.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image035.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=250 height=405
src="nosql_files/image035.jpg" v:shapes="Picture_x0020_4271"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:1.5pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 8.1. Storing all the data in a
single bucket</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.2pt;
margin-left:-.75pt;text-indent:15.0pt'>The downside of storing all the
different objects (aggregates) in the single bucket would be that one bucket
would store different types of aggregates, increasing the chance of key
conflicts. An alternate approach would be to append the name of the object to
the key, such as</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'><span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>288790b8a421_userProfile</span>, so that
we can get to individual objects as they are needed (<u style='text-underline:
#0000EE'><span style='color:#0000EE'>Figure 8.2</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:185.15pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_4284" o:spid="_x0000_i1091"
 type="#_x0000_t75" style='width:225pt;height:128.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image036.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=300 height=171
src="nosql_files/image036.jpg" v:shapes="Picture_x0020_4284"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.25pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 8.2. Change the key design to
segment the data in a single bucket.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>We could also create buckets which store
specific data. In Riak, they are known as <b style='mso-bidi-font-weight:normal'>domain
buckets</b> allowing the serialization and deserialization to be handled by the
client driver.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Bucket bucket =
client.fetchBucket(bucketName).execute();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>DomainBucket&lt;UserProfile&gt;
profileBucket =</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.65pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>DomainBucket.builder(bucket,
UserProfile.class).build();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Using domain buckets or different
buckets for different objects (such as <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>UserProfile</span> and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>ShoppingCart</span>)
segments the data across different buckets allowing you to read only the object
you need without having to change key design.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:10.2pt;
margin-left:-.75pt;text-indent:15.0pt'>Key-value stores such as Redis also
support storing random data structures, which can be sets, hashes, strings, and
so on. This feature can be used to store lists of things, like <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>states</span> or <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>addressTypes</span>, or an
array of users visits.</p>

<h3 style='margin-left:-.25pt'>8.2. Key-Value Store Features</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>While using any NoSQL data stores,
there is an inevitable need to understand how the features compare to the
standard RDBMS data stores that we are so used to. The primary reason is to
understand what features are missing and how does the application architecture
need to change to better use the features of a key-value data store. Some of
the features we will discuss for all the</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:8.8pt;
margin-left:-.25pt'>NoSQL data stores are consistency, transactions, query
features, structure of the data, and scaling.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>8.2.1. Consistency</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Consistency is applicable only for operations on a single
key, since these operations are either a get, put, or delete on a single key.
Optimistic writes can be performed, but are very expensive to implement,
because a change in value cannot be determined by the data store.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In distributed key-value store
implementations like Riak, the <i style='mso-bidi-font-style:normal'>eventually
consistent</i> (p. <u style='text-underline:#0000EE'><span style='color:#0000EE'>50</span></u>)
model of consistency is implemented. Since the value may have already been
replicated to other nodes, Riak has two ways of resolving update conflicts:
either the newest write wins and older writes loose, or both (all) values are
returned allowing the client to resolve the conflict.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In Riak, these options can be set up
during the bucket creation. Buckets are just a way to namespace keys so that
key collisions can be reducedfor example, all customer keys may reside in the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>customer</span> bucket.
When creating a bucket, default values for consistency can be provided, for
example that a write is considered good only when the data is consistent across
all the nodes where the data is stored.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Bucket bucket = connection</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>.createBucket(bucketName)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>.withRetrier(attempts(3))</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>.allowSiblings(siblingsAllowed)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>.nVal(numberOfReplicasOfTheData)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>.w(numberOfNodesToRespondToWrite)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>.r(numberOfNodesToRespondToRead)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>.execute();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:8.95pt;
margin-left:-.75pt;text-indent:15.0pt'>If we need data in every node to be
consistent, we can increase the <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>numberOfNodesToRespondToWrite</span>
set by <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>w</span>
to be the same as <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>nVal</span>.
Of course doing that will decrease the write performance of the cluster. To
improve on write or read conflicts, we can change the <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>allowSiblings</span> flag during bucket
creation: If it is set to false, we let the last write to win and not create
siblings.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>8.2.2. Transactions</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>Different products of the key-value store kind have
different specifications of transactions. Generally speaking, there are no
guarantees on the writes. Many data stores do implement transactions in
different ways. Riak uses the concept of quorum (<u style='text-underline:
#0000EE'><span style='color:#0000EE'>Quorums</span></u>,p. <u
style='text-underline:#0000EE'><span style='color:#0000EE'>57</span></u>)
implemented by using the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>W</span>
value replication factorduring the write API call.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:8.9pt;
margin-left:-.75pt;text-indent:15.0pt'>Assume we have a Riak cluster with a
replication factor of 5 and we supply the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>W</span> value of <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>3</span>. When writing,
the write is reported as successful only when it is written and reported as a
success on at least three of the nodes. This allows Riak to have write
tolerance; in our example, with <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>N</span>
equal to <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>5 </span>and
with a <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>W</span>
value of <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>3</span>,
the cluster can tolerate <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>N
- W = 2</span> nodes being down for write operations, though we would still
have lost some data on those nodes for read.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>8.2.3. Query Features</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>All key-value stores can query by the keyand thats about
it. If you have requirements to query by using some attribute of the value
column, its not possible to use the database: Your application needs to read
the value to figure out if the attribute meets the conditions.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.0pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Query by key also has an interesting side
effect. What if we dont know the key, especially during ad-hoc querying during
debugging? Most of the data stores will not give you a list of all the primary
keys; even if they did, retrieving lists of keys and then querying for the
value would be very cumbersome. Some key-value databases get around this by
providing the ability to search inside the value, such as <b style='mso-bidi-font-weight:
normal'>Riak Search</b> that allows you to query the data just like you would
query it using Lucene indexes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>While using key-value stores, lots of
thought has to be given to the design of the key. Can the key be generated
using some algorithm? Can the key be provided by the user (user ID, email,
etc.)? Or derived from timestamps or other data that can be derived outside of
the database?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>These query characteristics make
key-value stores likely candidates for storing session data (with the session
ID as the key), shopping cart data, user profiles, and so on. The <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>expiry_secs</span>
property can be used to expire keys after a certain time interval, especially
for session/shopping cart objects.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Bucket bucket = getBucket(bucketName);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.35pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>IRiakObject riakObject =
bucket.store(key, value).execute();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When writing to the Riak bucket using
the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>store</span>
API, the object is stored for the key provided. Similarly, we can get the value
stored for the key using the <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fetch</span>
API.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Bucket bucket = getBucket(bucketName);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:245.15pt;margin-bottom:
12.3pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>IRiakObject riakObject =
bucket.fetch(key).execute(); byte[] bytes = riakObject.getValue(); String value
= new String(bytes);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Riak provides an HTTP-based interface,
so that all operations can be performed from the web browser or on the command
line using <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>curl</span>.
Lets save this data to Riak:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;lastVisit&quot;:1324669989288,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;user&quot;:{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;customerId&quot;:&quot;91cfdf5bcb7c&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;name&quot;:&quot;buyer&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;countryCode&quot;:&quot;US&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;tzOffset&quot;:0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.8pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Use the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>curl</span> command to <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>POST</span> the data,
storing the data in the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>session</span>
bucket with the key of <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>a7e618d9db25</span>
(we have to provide this key):</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>curl -v -X POST -d '</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{ &quot;lastVisit&quot;:1324669989288,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;user&quot;:{&quot;customerId&quot;:&quot;91cfdf5bcb7c&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;name&quot;:&quot;buyer&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;countryCode&quot;:&quot;US&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;tzOffset&quot;:0}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
13.05pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>-H &quot;Content-Type:
application/json&quot; http://localhost:8098/buckets/session/keys/a7e618d9db25</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>The data for the key <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>a7e618d9db25</span> can be fetched by
using the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>curl</span>
command:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;
margin-left:-.25pt;line-height:107%'><b style='mso-bidi-font-weight:normal'><u
style='text-underline:#0000EE'><span style='font-size:11.5pt;mso-bidi-font-size:
11.0pt;line-height:107%;color:#0000EE'>Click here to view code image</span></u></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.9pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>curl -i
http://localhost:8098/buckets/session/keys/a7e618d9db25</span></p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>8.2.4. Structure of Data</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:8.95pt;
margin-left:-.25pt'>Key-value databases dont care what is stored in the value
part of the key-value pair. The value can be a blob, text, JSON, XML, and so
on. In Riak, we can use the <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Content-Type</span>
in the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>POST</span>
request to specify the data type.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>8.2.5. Scaling</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Many key-value stores scale by using sharding (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Sharding</span></u>,
p. <u style='text-underline:#0000EE'><span style='color:#0000EE'>38</span></u>).
With sharding, the value of the key determines on which node the key is stored.
Lets assume we are sharding by the first character of the key; if the key is <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>f4b19d79587d</span>, which
starts with an <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>f</span>,
it will be sent to different node than the key <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ad9c7a396542</span>. This kind of
sharding setup can increase performance as more nodes are added to the cluster.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Sharding also introduces some problems.
If the node used to store <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>f</span>
goes down, the data stored on that node becomes unavailable, nor can new data
be written with keys that start with <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>f</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Data stores such as Riak allow you to
control the aspects of the CAP Theorem (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>The CAP Theorem</span></u>,p. <u style='text-underline:
#0000EE'><span style='color:#0000EE'>53</span></u>): <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>N</span> (number of nodes to store the
key-value replicas), <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>R</span>
(number of nodes that have to have the data being fetched before the read is
considered successful), and <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>W</span>
(the number of nodes the write has to be written to before it is considered
successful).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Lets assume we have a 5-node Riak
cluster. Setting <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>N</span>
to <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>3</span> means
that all data is replicated to at least three nodes, setting <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>R</span> to <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>2</span> means any two
nodes must reply to a <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>GET</span>
request for it to be considered successful, and setting <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>W</span> to <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>2</span> ensures that the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>PUT</span> request is
written to two nodes before the write is considered successful.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>These settings allow us to fine-tune
node failures for read or write operations. Based on our need, we can change
these values for better read availability or write availability. Generally
speaking choose a <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>W</span>
value to match your consistency needs; these values can be set as defaults
during bucket creation.</p>

<h3 style='margin-left:-.25pt'>8.3. Suitable Use Cases</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:8.8pt;
margin-left:-.25pt'>Lets discuss some of the problems where key-value stores
are a good fit.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>8.3.1. Storing Session Information</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.55pt;
margin-left:-.25pt'>Generally, every web session is unique and is assigned a
unique <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>sessionid</span>
value. Applications that store the <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>sessionid</span>
on disk or in an RDBMS will greatly benefit from moving to a key-value store,
since everything about the session can be stored by a single <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>PUT</span> request or
retrieved using <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>GET</span>.
This single-request operation makes it very fast, as everything about the
session is stored in a single object. Solutions such as Memcached are used by
many web applications, and Riak can be used when availability is important.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>8.3.2. User Profiles, Preferences</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.25pt'>Almost every user has a unique <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>userId</span>, <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>username</span>, or some other
attribute, as well as preferences such as language, color, timezone, which
products the user has access to, and so on. This can all be put into an object,
so getting preferences of a user takes a single <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>GET</span> operation. Similarly, product
profiles can be stored.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>8.3.3. Shopping Cart Data</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.25pt'>E-commerce websites have shopping carts tied to the user.
As we want the shopping carts to be available all the time, across browsers,
machines, and sessions, all the shopping information can be put into the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>value</span> where the key
is the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>userid</span>.
A Riak cluster would be best suited for these kinds of applications.</p>

<h3 style='margin-left:-.25pt'>8.4. When Not to Use</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:8.8pt;
margin-left:-.25pt'>There are problem spaces where key-value stores are not the
best solution.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>8.4.1. Relationships among Data</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.25pt'>If you need to have relationships between different sets of
data, or correlate the data between different sets of keys, key-value stores
are not the best solution to use, even though some key-value stores provide
link-walking features.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>8.4.2. Multioperation Transactions</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.25pt'>If youre saving multiple keys and there is a failure to
save any one of them, and you want to revert or roll back the rest of the
operations, key-value stores are not the best solution to be used.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>8.4.3. Query by Data</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.25pt'>If you need to search the keys based on something found in
the value part of the key-value pairs, then key-value stores are not going to
perform well for you. There is no way to inspect the value on the database
side, with the exception of some products like Riak Search or indexing engines
like Lucene <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Lucene]</span></u>
or Solr <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Solr]</span></u>.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>8.4.4. Operations by Sets</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Since operations are limited to one key at a time, there is
no way to operate upon multiple keys at the same time. If you need to operate
upon multiple keys, you have to handle this from the client side.</p>

<h2 style='margin-left:-.25pt'>Chapter 9. Document Databases</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>Documents are the main concept in
document databases. The database stores and retrieves documents, which can be
XML, JSON, BSON, and so on. These documents are self-describing, hierarchical
tree data structures which can consist of maps, collections, and scalar values.
The documents stored are similar to each other but do not have to be exactly
the same. Document databases store documents in the value part of the key-value
store; think about document databases as key-value stores where the value is
examinable. Lets look at how terminology compares in Oracle and MongoDB.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.4pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_4688" o:spid="_x0000_i1090"
 type="#_x0000_t75" style='width:525pt;height:213pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image037.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=284
src="nosql_files/image037.jpg" v:shapes="Picture_x0020_4688"><![endif]></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.55pt;
margin-left:-.75pt;text-indent:15.0pt'>The <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>_id</span> is a special field that is
found on all documents in Mongo, just like <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ROWID</span> in Oracle. In MongoDB, <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>_id</span> can be assigned
by the user, as long as it is unique.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.5pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>9.1. What
Is a Document Database?</span></b></p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{ &quot;firstname&quot;:
&quot;Martin&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;likes&quot;: [ &quot;Biking&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'></span>&quot;Photography&quot; ],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:353.1pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;lastcity&quot;: &quot;Boston&quot;,<span
style='mso-spacerun:yes'></span>&quot;lastVisited&quot;:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The above document can be considered a
row in a traditional RDBMS. Lets look at another document:</p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;firstname&quot;: &quot;Pramod&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;citiesvisited&quot;: [ &quot;Chicago&quot;, &quot;London&quot;,
&quot;Pune&quot;, &quot;Bangalore&quot; ],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;addresses&quot;: [</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>{ &quot;state&quot;: &quot;AK&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;city&quot;: &quot;DILLINGHAM&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;type&quot;: &quot;R&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>},</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>{ &quot;state&quot;: &quot;MH&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;city&quot;: &quot;PUNE&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;type&quot;: &quot;R&quot; }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>],</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;lastcity&quot;: &quot;Chicago&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Looking at the documents, we can see
that they are similar, but have differences in attribute names. This is allowed
in document databases. The schema of the data can differ across documents, but
these documents can still belong to the same collectionunlike an RDBMS where
every row in a table has to follow the same schema. We represent a list of <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>citiesvisited</span> as an
array, or a list of <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>addresses
</span>as list of documents embedded inside the main document. Embedding child
documents as subobjects inside documents provides for easy access and better
performance.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>If you look at the documents, you will
see that some of the attributes are similar, such as <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>firstname</span> or <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>city</span>. At the same
time, there are attributes in the second document which do not exist in the
first document, such as <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>addresses</span>,
while <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>likes</span>
is in the first document but not the second.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:15.75pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>This different representation of data is
not the same as in RDBMS where every column has to be defined, and if it does
not have data it is marked as empty or set to <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>null</span>. In documents, there are no
empty attributes; if a given attribute is not found, we assume that it was not
set or not relevant to the document. Documents allow for new attributes to be
created without the need to define them or to change the existing documents.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Some of the popular document databases
we have seen are MongoDB <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[MongoDB]</span></u>, CouchDB <u style='text-underline:
#0000EE'><span style='color:#0000EE'>[CouchDB]</span></u>, Terrastore <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Terrastore]</span></u>,
OrientDB <u style='text-underline:#0000EE'><span style='color:#0000EE'>[OrientDB]</span></u>,
RavenDB <u style='text-underline:#0000EE'><span style='color:#0000EE'>[RavenDB]</span></u>,
and of course the well-known and often reviled Lotus Notes <u style='text-underline:
#0000EE'><span style='color:#0000EE'>[Notes Storage Facility]</span></u> that uses
document storage.</p>

<h3 style='margin-left:-.25pt'>9.2. Features</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:10.75pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>While there are many specialized document
databases, we will use MongoDB as a representative of the feature set. Keep in
mind that each product has some features that may not be found in other</p>

<p class=MsoNormal style='margin-top:0in;margin-right:10.75pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>document databases.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:8.9pt;
margin-left:-.75pt;text-indent:15.0pt'>Lets take some time to understand how
MongoDB works. Each MongoDB instance has multiple <i style='mso-bidi-font-style:
normal'>databases</i>, and each database can have multiple <i style='mso-bidi-font-style:
normal'>collections</i>. When we compare this with RDBMS, an RDBMS instance is
the same as MongoDB instance, the schemas in RDBMS are similar to MongoDB
databases, and the RDBMS tables are collections in MongoDB. When we store a
document, we have to choose which database and collection this document belongs
infor example, <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>database.collection.insert(document)</span>,
which is usually represented as <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>db.coll.insert(document)</span>.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>9.2.1. Consistency</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:5.2pt;
margin-left:-.25pt'>Consistency in MongoDB database is configured by using the <b
style='mso-bidi-font-weight:normal'>replica sets</b> and choosing to wait for
the writes to be replicated to all the slaves or a given number of slaves.
Every write can specify the number of servers the write has to be propagated to
before it returns as successful.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.35pt;margin-bottom:
1.85pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>A command like <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>db.runCommand({ getlasterror : 1 , w :
&quot;majority&quot; })</span> tells the database how strong is the consistency
you want. For example, if you have one server and specify the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>w</span> as <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>majority</span>, the write
will return immediately since there is only one node. If you have three nodes
in the replica set and specify <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>w</span>
as <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>majority</span>,
the write will have to complete at a minimum of two nodes before it is reported
as a success. You can increase the <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>w</span>
value for stronger consistency but you will suffer on write performance, since
now the writes have to complete at more nodes. Replica sets also allow you to
increase the read performance by allowing reading from slaves by setting <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>slaveOk</span>; this parameter
can be set on the connection, or database, or collection, or individually for
each operation.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:204.65pt;margin-bottom:
12.55pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Mongo mongo = new
Mongo(&quot;localhost:27017&quot;); mongo.slaveOk();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Here we are setting <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>slaveOk</span> per
operation, so that we can decide which operations can work with data from the
slave node.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>DBCollection collection =
getOrderCollection();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:258.65pt;margin-bottom:
12.3pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>BasicDBObject query = new
BasicDBObject(); query.put(&quot;name&quot;, &quot;Martin&quot;); DBCursor
cursor = collection.find(query).slaveOk();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Similar to various options available for
read, you can change the settings to achieve strong write consistency, if
desired. By default, a write is reported successful once the database receives
it; you can change this so as to wait for the writes to be synced to disk or to
propagate to two or more slaves. This is known as <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>WriteConcern</span>: You make sure that
certain writes are written to the master and some slaves by setting <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>WriteConcern</span> to <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>REPLICAS_SAFE</span>.
Shown below is code where we are setting the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>WriteConcern</span> for all writes to a
collection:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>DBCollection shopping =
database.getCollection(&quot;shopping&quot;); shopping.setWriteConcern(REPLICAS_SAFE);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'><span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>WriteConcern</span>
can also be set per operation by specifying it on the save command:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>WriteResult result =
shopping.insert(order, REPLICAS_SAFE);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.15pt;
margin-left:-.75pt;text-indent:15.0pt'>There is a tradeoff that you need to
carefully think about, based on your application needs and business
requirements, to decide what settings make sense for <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>slaveOk</span> during read or what
safety level you desire during write with <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>WriteConcern</span>.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>9.2.2. Transactions</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Transactions, in the traditional RDBMS sense, mean that you
can start modifying the database with <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>insert</span>,
<span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>update</span>,
or <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>delete</span>
commands over different tables and then decide if you want to keep the changes
or not by using <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>commit</span>
or <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>rollback</span>.
These constructs are generally not available in NoSQL solutionsa write either
succeeds or fails. Transactions at the single-document level are known as <b
style='mso-bidi-font-weight:normal'>atomic transactions</b>. Transactions
involving more than one operation are not possible, although there are products
such as RavenDB that do support transactions across multiple operations.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.25pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>By default, all writes are reported as
successful. A finer control over the write can be achieved by using <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>WriteConcern</span>
parameter. We ensure that <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>order</span>
is written to more than one node before its reported successful by using <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>WriteConcern.REPLICAS_SAFE</span>.
Different levels of <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>WriteConcern</span>
let you choose the safety level during writes; for example, when writing log
entries, you can use lowest level of safety, <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>WriteConcern.NONE</span>.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>final Mongo mongo = new Mongo(mongoURI);
mongo.setWriteConcern(REPLICAS_SAFE); DBCollection shopping =
mongo.getDB(orderDatabase)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:157.45pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'>
</span>.getCollection(shoppingCollection); try {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>WriteResult result = shopping.insert(order, REPLICAS_SAFE);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>//Writes made it to primary and at least
one secondary</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>} catch (MongoException writeException)
{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:157.45pt;margin-bottom:
13.05pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>//Writes did not make it to minimum of
two nodes including primary<span style='mso-spacerun:yes'>
</span>dealWithWriteFailure(order, writeException); }</span></p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>9.2.3. Availability</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:19.5pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>The CAP theorem (<u style='text-underline:
#0000EE'><span style='color:#0000EE'>The CAP Theorem</span></u>,p. <u
style='text-underline:#0000EE'><span style='color:#0000EE'>53</span></u>)
dictates that we can have only two of Consistency, Availability, and Partition
Tolerance. Document databases try to improve on availability by replicating
data using the master-slave setup. The same data is available on multiple nodes
and the clients can get to the data even when the primary node is down.
Usually, the application code does not have to determine if the primary node is
available or not. MongoDB implements replication, providing high availability
using <b style='mso-bidi-font-weight:normal'>replica sets</b>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In a replica set, there are two or more
nodes participating in an asynchronous master-slave replication. The
replica-set nodes elect the master, or primary, among themselves. Assuming all
the nodes have equal voting rights, some nodes can be favored for being closer
to the other servers, for having more RAM, and so on; users can affect this by
assigning a prioritya number between 0 and 1000to a node.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>All requests go to the master node, and
the data is replicated to the slave nodes. If the master node goes down, the
remaining nodes in the replica set vote among themselves to elect a new master;
all future requests are routed to the new master, and the slave nodes start
getting data from the new master. When the node that failed comes back online,
it joins in as a slave and catches up with the rest of the nodes by pulling all
the data it needs to get current.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'><u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 9.1</span></u> is an example configuration of
replica sets. We have two nodes, <b style='mso-bidi-font-weight:normal'>mongo A</b>
and <b style='mso-bidi-font-weight:normal'>mongo B</b>, running the MongoDB
database in the primary data-center, and <b style='mso-bidi-font-weight:normal'>mongo
C</b> in the secondary datacenter. If we want nodes in the primary datacenter
to be elected as primary nodes, we can assign them a higher priority than the
other nodes. More nodes can be added to the replica sets without having to take
them offline.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:83.95pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_5005" o:spid="_x0000_i1089"
 type="#_x0000_t75" style='width:427.5pt;height:258.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image038.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=570 height=345
src="nosql_files/image038.jpg" v:shapes="Picture_x0020_5005"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:.5pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 9.1. Replica set configuration with
higher priority assigned to nodes in the same datacenter</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The application writes or reads from the
primary (master) node. When connection is established, the application only
needs to connect to one node (primary or not, does not matter) in the replica
set, and the rest of the nodes are discovered automatically. When the primary
node goes down, the driver talks to the new primary elected by the replica set.
The application does not have to manage any of the communication failures or
node selection criteria. Using replica sets gives you the ability to have a
highly available document data store.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.75pt;text-indent:15.0pt'>Replica sets are generally used for data
redundancy, automated failover, read scaling, server maintenance without
downtime, and disaster recovery. Similar availability setups can be achieved
with CouchDB, RavenDB, Terrastore, and other products.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>9.2.4. Query Features</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Document databases provide different query features.
CouchDB allows you to query via viewscomplex queries on documents which can
be either materialized (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Materialized Views</span></u>,p. <u style='text-underline:
#0000EE'><span style='color:#0000EE'>30</span></u>) or dynamic (think of them
as RDBMS views which are either materialized or not). With CouchDB, if you need
to aggregate the number of reviews for a product as well as the average rating,
you could add a view implemented via map-reduce (<u style='text-underline:
#0000EE'><span style='color:#0000EE'>Basic Map-Reduce</span></u>,p. <u
style='text-underline:#0000EE'><span style='color:#0000EE'>68</span></u>) to
return the count of reviews and the average of their ratings.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When there are many requests, you dont
want to compute the count and average for every request; instead you can add a
materialized view that precomputes the values and stores the results in the
database. These materialized views are updated when queried, if any data was
changed since the last update.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>One of the good features of document
databases, as compared to key-value stores, is that we can query the data
inside the document without having to retrieve the whole document by its key
and then introspect the document. This feature brings these databases closer to
the RDBMS query model.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>MongoDB has a query language which is
expressed via JSON and has constructs such as <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>$query </span>for the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>where</span> clause, <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>$orderby</span> for sorting
the data, or <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>$explain</span>
to show the execution plan of the query. There are many more constructs like
these that can be combined to create a MongoDB query.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:6.0pt;
margin-left:-.75pt;text-indent:15.0pt'>Lets look at certain queries that we
can do against MongoDB. Suppose we want to return all the documents in an order
collection (all rows in the order table). The SQL for this would be:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SELECT * FROM order</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:206.5pt;margin-bottom:
3.05pt;margin-left:-.75pt;text-indent:15.0pt;line-height:187%'>The equivalent
query in Mongo shell would be: <span style='font-size:11.5pt;mso-bidi-font-size:
11.0pt;line-height:187%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>db.order.find()</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>Selecting the orders for a single <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>customerId</span> of <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>883c2c5b4e5b</span> would
be:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
13.1pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SELECT * FROM order WHERE customerId =
&quot;883c2c5b4e5b&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>The equivalent query in Mongo to get all orders for a
single <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>customerId</span>
of <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>883c2c5b4e5b</span>:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.95pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>db.order.find({&quot;customerId&quot;:&quot;883c2c5b4e5b&quot;})</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>Similarly, selecting <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>orderId</span> and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>orderDate</span> for one
customer in SQL would be:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:146%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:146%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SELECT orderId,orderDate FROM order
WHERE customerId = &quot;883c2c5b4e5b&quot; </span>and the equivalent in Mongo
would be:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>db.order.find({customerId:&quot;883c2c5b4e5b&quot;},{orderId:1,orderDate:1})</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Similarly, queries to count, sum, and so
on are all available. Since the documents are aggregated objects, it is really
easy to query for documents that have to be matched using the fields with child
objects. Lets say we want to query for all the orders where one of the items
ordered has a name like <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Refactoring</span>.
The SQL for this requirement would be:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SELECT * FROM customerOrder, orderItem,
product</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>WHERE</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>customerOrder.orderId = orderItem.customerOrderId</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>AND orderItem.productId =
product.productId</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:332.1pt;margin-bottom:
0in;margin-left:-.25pt;margin-bottom:.0001pt;line-height:146%'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:146%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>AND product.name LIKE
'%Refactoring%' </span>and the equivalent Mongo query would be:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>db.orders.find({&quot;items.product.name&quot;:/Refactoring/})</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.75pt;text-indent:15.0pt'>The query for MongoDB is simpler because
the objects are embedded inside a single document and you can query based on
the embedded child documents.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>9.2.5. Scaling</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>The idea of scaling is to add nodes or change data storage
without simply migrating the database to a bigger box. We are not talking about
making application changes to handle more load; instead, we are interested in
what features are in the database so that it can handle more load.</p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:3.75pt;
margin-bottom:.15pt;margin-left:.5pt;text-align:right;line-height:107%'>Scaling
for heavy-read loads can be achieved by adding more read slaves, so that all
the reads can</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>be directed to the slaves. Given a
heavy-read application, with our 3-node replica-set cluster, we can add more
read capacity to the cluster as the read load increases just by adding more
slave nodes to the replica set to execute reads with the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>slaveOk</span> flag (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 9.2</span></u>).
This is horizontal scaling for reads.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:62.2pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_5147" o:spid="_x0000_i1088"
 type="#_x0000_t75" style='width:471pt;height:234pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image039.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=628 height=312
src="nosql_files/image039.jpg" v:shapes="Picture_x0020_5147"><![endif]></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:40.3pt;margin-bottom:
5.8pt;margin-left:-.75pt;text-indent:70.85pt;line-height:154%'><b
style='mso-bidi-font-weight:normal'>Figure 9.2. Adding a new node, mongo D, to
an existing replica-set cluster </b>Once the new node, mongo D, is started, it
needs to be added to the replica set. <span style='font-size:11.5pt;mso-bidi-font-size:
11.0pt;line-height:154%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>rs.add(&quot;mongod:27017&quot;);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When a new node is added, it will sync
up with the existing nodes, join the replica set as secondary node, and start
serving read requests. An advantage of this setup is that we do not have to
restart any other nodes, and there is no downtime for the application either.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When we want to scale for write, we can
start sharding (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Sharding</span></u>,
p. <u style='text-underline:#0000EE'><span style='color:#0000EE'>38</span></u>)
the data. Sharding is similar to partitions in RDBMS where we split data by
value in a certain column, such as state or year. With RDBMS, partitions are
usually on the same node, so the client application does not have to query a
specific partition but can keep querying the base table; the RDBMS takes care
of finding the right partition for the query and returns the data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In sharding, the data is also split by
certain field, but then moved to different Mongo nodes. The data is dynamically
moved between nodes to ensure that shards are always balanced. We can add more
nodes to the cluster and increase the number of writable nodes, enabling
horizontal scaling for writes.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:204.65pt;margin-bottom:
12.3pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>db.runCommand( { shardcollection :
&quot;ecommerce.customer&quot;,<span style='mso-spacerun:yes'>
</span>key : {firstname : 1} } )</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:10.1pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Splitting the data on the first name of
the customer ensures that the data is balanced across the shards for optimal
write performance; furthermore, each shard can be a replica set ensuring better
read performance within the shard (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 9.3</span></u>). When we add a new shard to this
existing sharded cluster, the data will now be balanced across four shards
instead of three. As all this data movement and infrastructure refactoring is
happening, the application will not experience any downtime, although the
cluster may not perform optimally when large amounts of data are being moved to
rebalance the shards.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:110.2pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_5197" o:spid="_x0000_i1087"
 type="#_x0000_t75" style='width:375pt;height:195pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image040.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=500 height=260
src="nosql_files/image040.jpg" v:shapes="Picture_x0020_5197"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:1.5pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 9.3. MongoDB sharded setup where
each shard is a replica set</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>The shard key plays an important role.
You may want to place your MongoDB database shards closer to their users, so
sharding based on user location may be a good idea. When sharding by customer
location, all user data for the East Coast of the USA is in the shards that are
served from the East Coast, and all user data for the West Coast is in the
shards that are on the West Coast.</p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>9.3. Suitable Use Cases</h3>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>9.3.1. Event Logging</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.2pt;
margin-left:-.25pt'>Applications have different event logging needs; within the
enterprise, there are many different applications that want to log events.
Document databases can store all these different types of events and can act as
a central data store for event storage. This is especially true when the type
of data being captured by the events keeps changing. Events can be sharded by
the name of the application where the event originated or by the type of event
such as <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>order_processed</span>
or <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>customer_logged</span>.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>9.3.2. Content Management Systems, Blogging Platforms</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.25pt'>Since document databases have no predefined schemas and
usually understand JSON documents, they work well in content management systems
or applications for publishing websites, managing user comments, user
registrations, profiles, web-facing documents.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>9.3.3. Web Analytics or Real-Time Analytics</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.25pt'>Document databases can store data for real-time analytics;
since parts of the document can be updated, its very easy to store page views
or unique visitors, and new metrics can be easily added without schema changes.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>9.3.4. E-Commerce Applications</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.25pt'>E-commerce applications often need to have flexible schema
for products and orders, as well as the ability to evolve their data models
without expensive database refactoring or data migration (<u style='text-underline:
#0000EE'><span style='color:#0000EE'>Schema Changes in a NoSQL Data Store</span></u>,
p. <u style='text-underline:#0000EE'><span style='color:#0000EE'>128</span></u>).</p>

<h3 style='margin-left:-.25pt'>9.4. When Not to Use</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:8.8pt;
margin-left:-.25pt'>There are problem spaces where document databases are not
the best solution.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>9.4.1. Complex Transactions Spanning Different Operations</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.25pt'>If you need to have atomic cross-document operations, then
document databases may not be for you. However, there are some document
databases that do support these kinds of operations, such as RavenDB.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>9.4.2. Queries against Varying Aggregate Structure</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Flexible schema means that the database does not enforce
any restrictions on the schema. Data is saved in the form of application
entities. If you need to query these entities ad hoc, your queries will be
changing (in RDBMS terms, this would mean that as you join criteria between
tables, the tables to join keep changing). Since the data is saved as an
aggregate, if the design of the aggregate is constantly changing, you need to
save the aggregates at the lowest level of granularitybasically, you need to
normalize the data. In this scenario, document databases may not work.<br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<h2 style='margin-left:-.25pt'>Chapter 10. Column-Family Stores</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>Column-family stores, such as
Cassandra <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Cassandra]</span></u>,
HBase <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Hbase]</span></u>,
Hypertable <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Hypertable]</span></u>,
and Amazon SimpleDB <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Amazon
SimpleDB]</span></u>, allow you to store data with keys mapped to values and
the values grouped into multiple column families, each column family being a
map of data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.05pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_5286" o:spid="_x0000_i1086"
 type="#_x0000_t75" style='width:525pt;height:183pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image041.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=244
src="nosql_files/image041.jpg" v:shapes="Picture_x0020_5286"><![endif]></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>10.1. What
Is a Column-Family Data Store?</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>There are many column-family databases. In this chapter, we
will talk about Cassandra but also reference other column-family databases to
discuss features that may be of interest in particular scenarios.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>Column-family
databases store data in column families as rows that have many columns
associated with a row key (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 10.1</span></u>). Column families are groups of
related data that is often accessed together. For a <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Customer</span>, we would often access
their <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Profile</span>
information at the same time, but not their <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Orders</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:45.75pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_5305" o:spid="_x0000_i1085"
 type="#_x0000_t75" style='width:7in;height:222.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image042.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=672 height=297
src="nosql_files/image042.jpg" v:shapes="Picture_x0020_5305"><![endif]></span></p>

<h3 align=center style='margin-top:0in;margin-right:1.4pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center;line-height:105%'><span style='font-size:
15.0pt;mso-bidi-font-size:11.0pt;line-height:105%'>Figure 10.1. Cassandras
data model with column families</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:15.5pt'>Cassandra is one of the popular column-family databases;
there are others, such as HBase,</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Hypertable, and Amazon DynamoDB <u style='text-underline:
#0000EE'><span style='color:#0000EE'>[Amazon DynamoDB]</span></u>. Cassandra
can be described as fast and easily scalable with write operations spread
across the cluster. The cluster does not have a master node, so any read and
write can be handled by any node in the cluster.</p>

<h3 style='margin-left:-.25pt'>10.2. Features</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>Lets start by looking at how data is
structured in Cassandra. The basic unit of storage in Cassandra is a column. A
Cassandra column consists of a name-value pair where the name also behaves as
the key. Each of these key-value pairs is a single column and is always stored
with a timestamp value. The timestamp is used to expire data, resolve write
conflicts, deal with stale data, and do other things.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Once the column data is no longer used, the space can be
reclaimed later during a compaction phase.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:434.05pt;margin-bottom:
13.1pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>name: &quot;fullName&quot;,<span style='mso-spacerun:yes'>
</span>value: &quot;Martin Fowler&quot;,<span style='mso-spacerun:yes'>
</span>timestamp: 12345667890 }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>The <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>column</span>
has a key of <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>firstName</span>
and the value of <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Martin</span>
and has a timestamp attached to it. A row is a collection of columns attached
or linked to a key; a collection of similar rows makes a column family. When
the columns in a column family are simple columns, the column family is known
as <b style='mso-bidi-font-weight:normal'>standard column family</b>.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>//column family</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>//row</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:380.1pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;pramod-sadalage&quot; : {<span style='mso-spacerun:yes'>
</span>firstName: &quot;Pramod&quot;,<span style='mso-spacerun:yes'>
</span>lastName: &quot;Sadalage&quot;,<span style='mso-spacerun:yes'>
</span>lastVisit: &quot;2012/12/12&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>//row</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:393.6pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;martin-fowler&quot; : {<span style='mso-spacerun:yes'>
</span>firstName: &quot;Martin&quot;,<span style='mso-spacerun:yes'>
</span>lastName: &quot;Fowler&quot;,<span style='mso-spacerun:yes'>
</span>location: &quot;Boston&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:11.25pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Each column family can be compared to a
container of rows in an RDBMS table where the key identifies the row and the
row consists on multiple columns. The difference is that various rows do not
have to have the same columns, and columns can be added to any row at any time
without having to add it to other rows. We have the <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>pramod-sadalage</span> row and the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>martin-fowler</span> row
with different columns; both rows are part of the column family.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:10.75pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>When a column consists of a map of
columns, then we have a <b style='mso-bidi-font-weight:normal'>super column</b>.
A super column consists of a name and a value which is a map of columns. Think
of a super column as a container of columns.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:359.85pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>name: &quot;book:978-0767905923&quot;,<span style='mso-spacerun:yes'>
</span>value: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:373.35pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>author: &quot;Mitch Albon&quot;,<span style='mso-spacerun:yes'>
</span>title: &quot;Tuesdays with Morrie&quot;,<span
style='mso-spacerun:yes'></span>isbn: &quot;978-0767905923&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
13.0pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>When we use super columns to create a column family, we get
a <b style='mso-bidi-font-weight:normal'>super column family</b>.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>//super column family</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>//row</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:400.35pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>name: &quot;billing:martin-fowler&quot;,
value: {<span style='mso-spacerun:yes'></span>address: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:373.35pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>name: &quot;address:default&quot;,<span style='mso-spacerun:yes'>
</span>value: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:346.35pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>fullName: &quot;Martin Fowler&quot;,<span
style='mso-spacerun:yes'></span>street:&quot;100 N. Main
Street&quot;,<span style='mso-spacerun:yes'></span>zip:
&quot;20145&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:521.8pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>},<span style='mso-spacerun:yes'></span>billing: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:373.35pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>name: &quot;billing:default&quot;,<span style='mso-spacerun:yes'>
</span>value: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:278.9pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>creditcard: &quot;8888-8888-8888-8888&quot;,<span
style='mso-spacerun:yes'></span>expDate: &quot;12/2016&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>//row</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:386.85pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>name:
&quot;billing:pramod-sadalage&quot;, value: {<span style='mso-spacerun:yes'>
</span>address: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:373.35pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>name: &quot;address:default&quot;,<span style='mso-spacerun:yes'>
</span>value: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:332.85pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>fullName: &quot;Pramod Sadalage&quot;,<span
style='mso-spacerun:yes'></span>street:&quot;100 E. State Parkway&quot;,<span
style='mso-spacerun:yes'></span>zip: &quot;54130&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:515.05pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}<span style='mso-spacerun:yes'></span>},<span
style='mso-spacerun:yes'></span>billing: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:359.85pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>name: &quot;billing:default&quot;,<span style='mso-spacerun:yes'>
</span>value: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:265.4pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>creditcard: &quot;9999-8888-7777-4444&quot;,<span
style='mso-spacerun:yes'></span>expDate: &quot;01/2016&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.0pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Super column families are good to keep
related data together, but when some of the columns are not needed most of the
time, the columns are still fetched and deserialized by Cassandra, which may
not be optimal.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.1pt;margin-bottom:9.8pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:128%'>Cassandra puts the standard and super column families
into <b style='mso-bidi-font-weight:normal'>keyspaces</b>. A keyspace is
similar to a database in RDBMS where all column families related to the
application are stored. Keyspaces have to be created so that column families
can be assigned to them: <span style='font-size:11.5pt;mso-bidi-font-size:11.0pt;
line-height:128%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>create
keyspace ecommerce</span></p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>10.2.1. Consistency</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>When a write is received by Cassandra, the data is first
recorded in a commit log, then written to an in-memory structure known as <b
style='mso-bidi-font-weight:normal'>memtable</b>. A write operation is
considered successful once its written to the commit log and the memtable.
Writes are batched in memory and periodically written out to structures known
as <b style='mso-bidi-font-weight:normal'>SSTable</b>. SSTables are not written
to again after they are flushed; if there are changes to the data, a new
SSTable is written. Unused SSTables are reclaimed by <b style='mso-bidi-font-weight:
normal'>compactation</b>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Lets look at the read operation to see
how consistency settings affect it. If we have a consistency setting of <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>ONE</span> as the default
for all read operations, then when a read request is made, Cassandra returns
the data from the first replica, even if the data is stale. If the data is
stale, subsequent reads will get the latest (newest) data; this process is
known as <b style='mso-bidi-font-weight:normal'>read repair</b>. The low
consistency level is good to use when you do not care if you get stale data
and/or if you have high read performance requirements.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Similarly, if you are doing writes,
Cassandra would write to one nodes commit log and return a response to the
client. The consistency of <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>ONE</span>
is good if you have very high write performance requirements and also do not
mind if some writes are lost, which may happen if the node goes down before the
write is replicated to other nodes.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>quorum = new
ConfigurableConsistencyLevel();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.55pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>quorum.setDefaultReadConsistencyLevel(HConsistencyLevel.QUORUM);
quorum.setDefaultWriteConsistencyLevel(HConsistencyLevel.QUORUM);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Using the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>QUORUM</span> consistency setting for
both read and write operations ensures that majority of the nodes respond to
the read and the column with the newest timestamp is returned back to the
client, while the replicas that do not have the newest data are repaired via
the read repair operations. During write operations, the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>QUORUM</span> consistency
setting means that the write has to propagate to the majority of the nodes
before it is considered successful and the client is notified.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Using <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ALL</span> as consistency level means
that all nodes will have to respond to reads or writes, which will make the
cluster not tolerant to faultseven when one node is down, the write or read is
blocked and reported as a failure. Its therefore upon the system designers to
tune the consistency levels as the application requirements change. Within the
same application, there may be different requirements of consistency; they can
also change based on each operation, for example showing review comments for a
product has different consistency requirements compared to reading the status
of the last order placed by the customer.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.0pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>During <b style='mso-bidi-font-weight:normal'>keyspace</b>
creation, we can configure how many replicas of the data we need to store. This
number determines the replication factor of the data. If you have a replication
factor of 3, the data copied on to three nodes. When writing and reading data
with Cassandra, if you specify the consistency values of 2, you get that <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>R + W</span> is greater
than the replication factor <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>(2
+ 2 &gt; 3)</span> which gives you better consistency during writes and reads.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:6.0pt;
margin-left:-.75pt;text-indent:15.0pt'>We can run the node repair command for
the keyspace and force Cassandra to compare every key its responsible for with
the rest of the replicas. As this operation is expensive, we can also just
repair a specific column family or a list of column families:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:407.1pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:199%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:199%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>repair ecommerce repair ecommerce
customerInfo</span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
margin-bottom:7.55pt;margin-left:.5pt;text-align:center;line-height:103%'>While
a node is down, the data that was supposed to be stored by that node is handed
off to other nodes. As the node comes back online, the changes made to the data
are handed back to the node. This technique is known as <b style='mso-bidi-font-weight:
normal'>hinted handoff</b>. Hinted handoff allows for faster restore of failed
nodes.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>10.2.2. Transactions</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Cassandra does not have transactions in the traditional
sensewhere we could start multiple writes and then decide if we want to commit
the changes or not. In Cassandra, a write is atomic at the row level, which
means inserting or updating columns for a given row key will be treated as a
single write and will either succeed or fail. Writes are first written to
commit logs and memtables, and are only considered good when the write to
commit log and memtable was successful. If a node goes down, the commit log is
used to apply changes to the node, just like the <b style='mso-bidi-font-weight:
normal'>redo log</b> in Oracle.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:18.25pt;margin-bottom:
9.1pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>You can use external transaction
libraries, such as ZooKeeper <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[ZooKeeper]</span></u>, to synchronize your writes and
reads. There are also libraries such as Cages <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Cages]</span></u> that allow you to wrap your
transactions over ZooKeeper.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>10.2.3. Availability</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Cassandra is by design highly available, since there is no
master in the cluster and every node is a peer in the cluster. The availability
of a cluster can be increased by reducing the consistency level of the
requests. Availability is governed by the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>(R + W) &gt; N</span> formula (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Quorums</span></u>,
p. <u style='text-underline:#0000EE'><span style='color:#0000EE'>57</span></u>)
where <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>W</span> is
the minimum number of nodes where the write must be successfully written, <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>R</span> is the minimum
number of nodes that must respond successfully to a read, and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>N</span> is the number of
nodes participating in the replication of data. You can tune the availability
by changing the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>R</span>
and <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>W</span>
values for a fixed value of <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>N</span>.</p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:3.75pt;
margin-bottom:.15pt;margin-left:.5pt;text-align:right;line-height:107%'>In a
10-node Cassandra cluster with a replication factor for the keyspace set to 3 (<span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:107%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>N = 3</span>), if we set</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.1pt;
margin-left:-.25pt'><span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>R
= 2</span> and <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>W
= 2</span>, then we have <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>(2
+ 2) &gt; 3</span>. In this scenario, when one node goes down, availability is
not affected much, as the data can be retrieved from the other two nodes. If <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>W = 2</span> and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>R = 1</span>, when two
nodes are down the cluster is not available for write but we can still read.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Similarly, if <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>R
= 2</span> and <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>W
= 1</span>, we can write but the cluster is not available for read. With the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>R + W &gt; N</span>
equation, you are making conscious decisions about consistency tradeoffs.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.75pt;text-indent:15.0pt'>You should set up your keyspaces and
read/write operations based on your needshigher availability for write or
higher availability for read.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>10.2.4. Query Features</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:6.0pt;
margin-left:-.25pt'>When designing the data model in Cassandra, it is advised
to make the columns and column families optimized for reading the data, as it
does not have a rich query language; as data is inserted in the column
families, data in each row is sorted by column names. If we have a column that
is retrieved much more often than other columns, its better performance-wise
to use that value for the row key instead.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:-.25pt;line-height:107%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%'>10.2.4.1.
Basic Queries</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Basic queries that can be run using a Cassandra client
include the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>GET</span>,
<span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>SET</span>,
and <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>DEL</span>.
Before starting to query for data, we have to issue the keyspace command <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>use ecommerce;</span>.
This ensures that all of our queries are run against the keyspace that we put
our data into. Before starting to use the column family in the keyspace, we
have to define the column family.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>CREATE COLUMN FAMILY Customer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>WITH comparator = UTF8Type</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>AND key_validation_class=UTF8Type</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>AND column_metadata = [</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{column_name: city, validation_class:
UTF8Type}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{column_name: name, validation_class:
UTF8Type}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{column_name: web, validation_class:
UTF8Type}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
13.0pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>];</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>We have a column family named <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span> with <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>name</span>, <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>city</span>, and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>web</span> columns, and we
are inserting data in the column family with a Cassandra client.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SET
Customer['mfowler']['city']='Boston';</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SET Customer['mfowler']['name']='Martin
Fowler';</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SET
Customer['mfowler']['web']='www.martinfowler.com';</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>Using the Hector <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Hector]</span></u> Java client, we can insert the same
data in the column family.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:285.65pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ColumnFamilyTemplate&lt;String,
String&gt; template =<span style='mso-spacerun:yes'>
</span>cassandra.getColumnFamilyTemplate(); ColumnFamilyUpdater&lt;String,
String&gt; updater =<span style='mso-spacerun:yes'>
</span>template.createUpdater(key); for (String name : values.keySet()) {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>updater.setString(name, values.get(name));</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:569.0pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>} try {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:407.1pt;margin-bottom:
12.4pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>template.update(updater); } catch (HectorException e) {<span
style='mso-spacerun:yes'></span>handleException(e); }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:5.95pt;
margin-left:-.75pt;text-indent:15.0pt'>We can read the data back using the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>GET</span> command. There
are multiple ways to get the data; we can get the whole column family.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>GET Customer['mfowler'];</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:5.8pt;
margin-left:15.5pt'>We can even get just the column we are interested in from
the column family.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>GET Customer['mfowler']['web'];</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Getting the specific column we need is
more efficient, as only the data we care about is returnedwhich saves lots of
data movement, especially when the column family has a large number of columns.
Updating the data is the same as using the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SET</span> command for the column that
needs to be set to the new value. Using <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>DEL</span> command, we can delete either
a column or the entire column family.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>DEL Customer['mfowler']['city'];</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
9.9pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>DEL Customer['mfowler'];</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:-.25pt;line-height:107%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%'>10.2.4.2.
Advanced Queries and Indexing</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Cassandra allows you to index columns other than the keys
for the column family. We can define an index on the <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>city</span> column.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>UPDATE COLUMN FAMILY Customer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>WITH comparator = UTF8Type</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>AND column_metadata = [{column_name:
city,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:184.4pt;margin-bottom:
12.3pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'></span>validation_class:
UTF8Type,<span style='mso-spacerun:yes'>
</span>index_type: KEYS}];</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:5.8pt;
margin-left:15.5pt'>We can now query directly against the indexed column.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.2pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>GET Customer WHERE city = 'Boston';</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:6.0pt;
margin-left:-.75pt;text-indent:15.0pt'>These indexes are implemented as <i
style='mso-bidi-font-style:normal'>bit-mapped</i> indexes and perform well for
low-cardinality column values.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:-.25pt;line-height:107%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%'>10.2.4.3.
Cassandra Query Language (CQL)</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Cassandra has a query language that supports SQL-like
commands, known as Cassandra Query Language (CQL). We can use the CQL commands
to create a column family.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>CREATE COLUMNFAMILY Customer (</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:427.3pt;margin-bottom:
12.75pt;margin-left:0in;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:normal'><span style='font-size:11.5pt;mso-bidi-font-size:
11.0pt;font-family:"Courier New";mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'></span>KEY varchar PRIMARY KEY,<span
style='mso-spacerun:yes'></span>name varchar,<span
style='mso-spacerun:yes'></span>city varchar,<span
style='mso-spacerun:yes'></span>web<span style='mso-spacerun:yes'>
</span>varchar);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>We insert the same data using CQL.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>INSERT INTO Customer (KEY,name,city,web)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>VALUES ('mfowler',</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'></span>'Martin Fowler',</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'></span>'Boston',</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.45pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'></span>'www.martinfowler.com');</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:6.15pt;
margin-left:15.5pt'>We can read data using the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SELECT</span> command. Here we read all
the columns:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.65pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SELECT * FROM Customer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:6.1pt;
margin-left:15.5pt'>Or, we could just <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>SELECT</span>
the columns we need.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.65pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SELECT name,web FROM Customer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Indexing columns are created using the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>CREATE INDEX</span>
command, and then can be used to query the data.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SELECT name,web FROM Customer WHERE
city='Boston'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.3pt;
margin-left:-.75pt;text-indent:15.0pt'>CQL has many more features for querying
data, but it does not have all the features that SQL has. CQL does not allow
joins or subqueries, and its <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>where</span>
clauses are typically simple.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>10.2.5. Scaling</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.25pt'>Scaling an existing Cassandra cluster is a matter of adding
more nodes. As no single node is a master, when we add nodes to the cluster we
are improving the capacity of the cluster to support more writes and reads.
This type of horizontal scaling allows you to have maximum uptime, as the
cluster keeps serving requests from the clients while new nodes are being added
to the cluster.</p>

<h3 style='margin-left:-.25pt'>10.3. Suitable Use Cases</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Lets discuss some of the problems where column-family
databases are a good fit.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>10.3.1. Event Logging</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.75pt;margin-bottom:
0in;margin-left:-.75pt;margin-bottom:.0001pt;text-align:justify;text-justify:
inter-ideograph;text-indent:0in;line-height:103%'>Column-family databases with
their ability to store any data structures are a great choice to store event
information, such as application state or errors encountered by the
application. Within the enterprise, all applications can write their events to
Cassandra with their own columns and the rowkey of the form <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>appname:timestamp</span>.
Since we can scale writes, Cassandra would work ideally for an event logging
system (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure
10.2</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:28.5pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_5848" o:spid="_x0000_i1084"
 type="#_x0000_t75" style='width:538.5pt;height:85.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image043.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=718 height=114
src="nosql_files/image043.jpg" v:shapes="Picture_x0020_5848"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.25pt;
margin-bottom:8.55pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 10.2. Event logging with Cassandra</b></p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>10.3.2. Content Management Systems, Blogging Platforms</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.25pt'>Using column families, you can store blog entries with
tags, categories, links, and trackbacks in different columns. Comments can be
either stored in the same row or moved to a different keyspace; similarly, blog
users and the actual blogs can be put into different column families.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>10.3.3. Counters</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Often, in web applications you need to count and categorize
visitors of a page to calculate analytics. You can use the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>CounterColumnType</span>
during creation of a column family.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>CREATE COLUMN FAMILY visit_counter</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>WITH
default_validation_class=CounterColumnType</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>AND key_validation_class=UTF8Type AND
comparator=UTF8Type;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Once a column family is created, you can
have arbitrary columns for each page visited within the web application for
every user.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>INCR visit_counter['mfowler'][home] BY
1;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>INCR visit_counter['mfowler'][products]
BY 1;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:215.9pt;margin-bottom:
.25pt;margin-left:14.25pt;text-indent:-15.0pt;line-height:146%'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:146%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>INCR
visit_counter['mfowler'][contactus] BY 1; </span>Incrementing counters using
CQL:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;
margin-left:-.25pt;line-height:107%'><b style='mso-bidi-font-weight:normal'><u
style='text-underline:#0000EE'><span style='font-size:11.5pt;mso-bidi-font-size:
11.0pt;line-height:107%;color:#0000EE'>Click here to view code image</span></u></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.9pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>UPDATE visit_counter SET home = home + 1
WHERE KEY='mfowler'</span></p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>10.3.4. Expiring Usage</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>You may provide demo access to users, or may want to show
ad banners on a website for a specific time. You can do this by using <b
style='mso-bidi-font-weight:normal'>expiring columns</b>: Cassandra allows you
to have columns which, after a given time, are deleted automatically. This time
is known as TTL (Time To Live) and is defined in seconds. The column is deleted
after the TTL has elapsed; when the column does not exist, the access can be
revoked or the banner can be removed.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;
margin-left:-.25pt;line-height:107%'><b style='mso-bidi-font-weight:normal'><u
style='text-underline:#0000EE'><span style='font-size:11.5pt;mso-bidi-font-size:
11.0pt;line-height:107%;color:#0000EE'>Click here to view code image</span></u></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
15.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SET Customer['mfowler']['demo_access'] =
'allowed' WITH ttl=2592000;</span></p>

<h3 style='margin-left:-.25pt'>10.4. When Not to Use</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>There are problems for which column-family databases are
not the best solutions, such as systems that require ACID transactions for
writes and reads. If you need the database to aggregate the data using queries
(such as <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>SUM</span>
or <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>AVG</span>),
you have to do this on the client side using data retrieved by the client from
all the rows.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Cassandra is not great for early
prototypes or initial tech spikes: During the early stages, we are not sure how
the query patterns may change, and as the query patterns change, we have to
change the column family design. This causes friction for the product
innovation team and slows down developer productivity. RDBMS impose high cost
on schema change, which is traded off for a low cost of query change; in
Cassandra, the cost may be higher for query change as compared to schema
change.<br clear=all style='mso-special-character:line-break;page-break-before:
always'>
</p>

<h2 style='margin-left:-.25pt'>Chapter 11. Graph Databases</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>Graph databases allow you to store entities and
relationships between these entities. Entities are also known as nodes, which
have properties. Think of a node as an instance of an object in the
application. Relations are known as edges that can have properties. Edges have
directional significance; nodes are organized by relationships which allow you
to find interesting patterns between the nodes. The organization of the graph
lets the data to be stored once and then interpreted in different ways based on
relationships.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>11.1. What
Is a Graph Database?</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.65pt;
margin-left:-.25pt'>In the example graph in <u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 11.1</span></u>, we see a bunch of nodes related
to each other. Nodes are entities that have properties, such as <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>name</span>. The node of <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Martin</span> is actually
a <b style='mso-bidi-font-weight:normal'>node</b> that has <b style='mso-bidi-font-weight:
normal'>property</b> of <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>name
</span>set to <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Martin</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_5950" o:spid="_x0000_i1083"
 type="#_x0000_t75" style='width:525pt;height:413.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image044.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=551
src="nosql_files/image044.jpg" v:shapes="Picture_x0020_5950"><![endif]></span></p>

<h3 align=center style='margin-top:0in;margin-right:2.1pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center;line-height:105%'><span style='font-size:
15.0pt;mso-bidi-font-size:11.0pt;line-height:105%'>Figure 11.1. An example
graph structure</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>We also see that edges have types, such
as <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>likes</span>, <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>author</span>, and so on.
These properties let us organize the nodes; for example, the nodes <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Martin</span> and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Pramod</span> have an <b
style='mso-bidi-font-weight:normal'>edge</b> connecting them with a
relationship type of <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>friend</span>.
Edges can have multiple properties. We can assign a property of <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>since </span>on the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>friend</span> relationship
type between <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Martin</span>
and <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Pramod</span>.
Relationship types have directional significance; the <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>friend</span> relationship type is
bidirectional but <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>likes</span>
is not. When <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Dawn
likes</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:107%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>NoSQL Distilled</span>, it does not
automatically mean <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:107%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>NoSQL
Distilled likes Dawn</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Once we have a graph of these nodes and
edges created, we can query the graph in many ways, such as get all nodes
employed by <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Big Co</span>
that <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>like NoSQL
Distilled</span>.A query on the graph is also known as <b style='mso-bidi-font-weight:
normal'>traversing</b> the graph. An advantage of the graph databases is that
we can change the traversing requirements without having to change the nodes or
edges. If we want to get all nodes that <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>like NoSQL Distilled</span>,we can do
so without having to change the existing data or the model of the database,
because we can traverse the graph any way we like.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Usually, when we store a graph-like
structure in RDBMS, its for a single type of relationship (who is my manager
is a common example). Adding another relationship to the mix usually means a
lot of schema changes and data movement, which is not the case when we are
using graph databases. Similarly, in relational databases we model the graph
beforehand based on the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Traversal</span>
we want; if the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Traversal</span>
changes, the data will have to change.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.75pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>In graph databases, traversing the joins
or relationships is very fast. The relationship between nodes is not calculated
at query time but is actually persisted as a relationship. Traversing persisted
relationships is faster than calculating them for every query.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.75pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Nodes can have different types of
relationships between them, allowing you to both represent relationships
between the domain entities and to have secondary relationships for things like
category, path, time-trees, quad-trees for spatial indexing, or linked lists
for sorted access. Since there is no limit to the number and kind of
relationships a node can have, all they can be represented in the same graph
database.</p>

<h3 style='margin-left:-.25pt'>11.2. Features</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>There are many graph databases available, such as Neo4J <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Neo4J]</span></u>,
Infinite Graph <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Infinite
Graph]</span></u>, OrientDB <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[OrientDB]</span></u>, or FlockDB <u style='text-underline:
#0000EE'><span style='color:#0000EE'>[FlockDB]</span></u> (which is a special
case: a graph database that only supports single-depth relationships or
adjacency lists, where you cannot traverse more than one level deep for
relationships). We will take Neo4J as a representative of the graph database
solutions to discuss how they work and how they can be used to solve
application problems.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In Neo4J, creating a graph is as simple
as creating two nodes and then creating a relationship. Lets create two nodes,
<span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Martin</span>
and <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Pramod</span>:</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:191.15pt;margin-bottom:
12.3pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Node martin = graphDb.createNode();
martin.setProperty(&quot;name&quot;, &quot;Martin&quot;);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:191.15pt;margin-bottom:
12.9pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Node pramod = graphDb.createNode();
pramod.setProperty(&quot;name&quot;, &quot;Pramod&quot;);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>We have assigned the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>name</span> property of
the two nodes the values of <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Martin</span>
and <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Pramod</span>.
Once we have more than one node, we can create a relationship:</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:199%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:199%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>martin.createRelationshipTo(pramod,
FRIEND); pramod.createRelationshipTo(martin, FRIEND);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>We have to create relationship between the
nodes in both directions, for the direction of the relationship matters: For
example, a <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>product</span>
node can be liked by <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>user</span>
but the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>product</span>
cannot like the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>user</span>.
This directionality helps in designing a rich domain model (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 11.2</span></u>).
Nodes know about <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>INCOMING</span>
and <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>OUTGOING</span>
relationships that are traversable both ways.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:3.0pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_6106" o:spid="_x0000_i1082"
 type="#_x0000_t75" style='width:589.5pt;height:386.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image045.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=786 height=515
src="nosql_files/image046.jpg" v:shapes="Picture_x0020_6106"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:1.4pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 11.2. Relationships with properties</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Relationships are first-class citizens
in graph databases; most of the value of graph databases is derived from the
relationships. Relationships dont only have a type, a start node, and an end
node, but can have properties of their own. Using these properties on the
relationships, we can add intelligence to the relationshipfor example, since when
did they become friends, what is the distance between the nodes, or what
aspects are shared between the nodes. These properties on the relationships can
be used to query the graph.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.75pt;text-indent:15.0pt'>Since most of the power from the graph
databases comes from the relationships and their properties, a lot of thought
and design work is needed to model the relationships in the domain that we are
trying to work with. Adding new relationship types is easy; changing existing
nodes and their relationships is similar to data migration (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Migrations in Graph
Databases</span></u>,p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>131</span></u>), because these changes will have to be
done on each node and each relationship in the existing data.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>11.2.1. Consistency</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Since graph databases are operating on connected nodes,
most graph database solutions usually do not support distributing the nodes on
different servers. There are some solutions, however, that support node
distribution across a cluster of servers, such as Infinite Graph. Within a
single server, data is always consistent, especially in Neo4J which is fully
ACID-compliant. When running Neo4J in a cluster, a write to the master is
eventually synchronized to the slaves, while slaves are always available for read.
Writes to slaves are allowed and are immediately synchronized to the master;
other slaves will not be synchronized immediately, thoughthey will have to
wait for the data to propagate from the master.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.75pt;text-indent:15.0pt'>Graph databases ensure consistency
through transactions. They do not allow dangling relationships: The start node
and end node always have to exist, and nodes can only be deleted if they dont
have any relationships attached to them.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>11.2.2. Transactions</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.3pt;
margin-left:-.25pt'>Neo4J is ACID-compliant. Before changing any nodes or
adding any relationships to existing nodes, we have to start a transaction.
Without wrapping operations in transactions, we will get a</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'><span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>NotInTransactionException</span>.
Read operations can be done without initiating a transaction.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:278.9pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Transaction transaction =
database.beginTx(); try {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:184.4pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>Node node = database.createNode();<span style='mso-spacerun:yes'>
</span>node.setProperty(&quot;name&quot;, &quot;NoSQL Distilled&quot;);<span
style='mso-spacerun:yes'></span>node.setProperty(&quot;published&quot;,
&quot;2012&quot;);<span style='mso-spacerun:yes'>
</span>transaction.success();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>} finally {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:427.3pt;margin-bottom:
12.3pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>transaction.finish(); }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:9.05pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>In the above code, we started a transaction on the
database, then created a node and set properties on it. We marked the
transaction as <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>success</span>
and finally completed it by <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>finish</span>.
A transaction has to be marked as <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>success</span>,
otherwise Neo4J assumes that it was a failure and rolls it back when <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>finish </span>is issued.
Setting <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>success</span>
without issuing <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>finish</span>
also does not commit the data to the database. This way of managing
transactions has to be remembered when developing, as it differs from the
standard way of doing transactions in an RDBMS.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>11.2.3. Availability</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Neo4J, as of version 1.8, achieves high availability by
providing for replicated slaves. These slaves can also handle writes: When they
are written to, they synchronize the write to the current master, and the write
is committed first at the master and then at the slave. Other slaves will
eventually get the update. Other graph databases, such as Infinite Graph and
FlockDB, provide for distributed storage of the nodes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5pt;margin-bottom:9.1pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Neo4J uses the Apache ZooKeeper <u style='text-underline:
#0000EE'><span style='color:#0000EE'>[ZooKeeper]</span></u> to keep track of
the last transaction IDs persisted on each slave node and the current master
node. Once a server starts up, it communicates with ZooKeeper and finds out
which server is the master. If the server is the first one to join the cluster,
it becomes the master; when a master goes down, the cluster elects a master
from the available nodes, thus providing high availability.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>11.2.4. Query Features</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:8.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>Graph databases are supported by query languages such as
Gremlin <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Gremlin]</span></u>.
Gremlin is a domainspecific language for traversing graphs; it can traverse all
graph databases that implement the Blueprints <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Blueprints]</span></u> property graph. Neo4J also has
the Cypher <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Cypher]</span></u>
query language for querying the graph. Outside these query languages, Neo4J
allows you to query the graph for properties of the nodes, traverse the graph,
or navigate the nodes relationships using language bindings.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Properties of a node can be indexed
using the indexing service. Similarly, properties of relationships or edges can
be indexed, so a node or edge can be found by the value. Indexes should be
queried to find the starting node to begin a traversal. Lets look at searching
for the node using node indexing.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>If we have the graph shown in <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 11.1</span></u>,
we can index the nodes as they are added to the database, or we can index all
the nodes later by iterating over them. We first need to create an index for
the nodes using the <b style='mso-bidi-font-weight:normal'>IndexManager</b>.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.35pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Index&lt;Node&gt; nodeIndex =
graphDb.index().forNodes(&quot;nodes&quot;);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:19.9pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>We are indexing the nodes for the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>name</span> property.
Neo4J uses Lucene <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Lucene]</span></u>
as its indexing service. We will see later that we can also use the full-text
search capability of Lucene. When new nodes are created, they can be added to
the index.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:285.65pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Transaction transaction =
graphDb.beginTx(); try {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>Index&lt;Node&gt; nodeIndex =
graphDb.index().forNodes(&quot;nodes&quot;);<span style='mso-spacerun:yes'>
</span>nodeIndex.add(martin, &quot;name&quot;,
martin.getProperty(&quot;name&quot;));<span style='mso-spacerun:yes'>
</span>nodeIndex.add(pramod, &quot;name&quot;,
pramod.getProperty(&quot;name&quot;));<span style='mso-spacerun:yes'>
</span>transaction.success();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>} finally {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:427.3pt;margin-bottom:
12.3pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>transaction.finish(); }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Adding nodes to the index is done inside
the context of a transaction. Once the nodes are indexed, we can search them
using the indexed property. If we search for the node with the name of <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Barbara</span>, we would
query the index for the property of <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>name</span>
to have a value of <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Barbara</span>.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.6pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Node node =
nodeIndex.get(&quot;name&quot;, &quot;Barbara&quot;).getSingle();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>We get the node whose <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>name</span> is <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Martin</span>; given the node, we can
get all its relationships.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
13.4pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Node martin =
nodeIndex.get(&quot;name&quot;, &quot;Martin&quot;).getSingle();
allRelationships = martin.getRelationships();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>We can get both <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>INCOMING</span>
or <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>OUTGOING</span>
relationships.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>incomingRelations =
martin.getRelationships(Direction.INCOMING);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.3pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>We can also apply directional filters on the queries
when querying for a relationship. With the graph in <u style='text-underline:
#0000EE'><span style='color:#0000EE'>Figure 11.1</span></u>, if we want to find
all people who like <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>NoSQL
Distilled</span>, we can find the <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>NoSQL
Distilled</span> node and then get its relationships with <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Direction.INCOMING</span>.
At this point we can also add the type of relationship to the query filter,
since we are looking only for nodes that <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>LIKE NoSQL Distilled</span>.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Node nosqlDistilled =
nodeIndex.get(&quot;name&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'></span>&quot;NoSQL
Distilled&quot;).getSingle();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:164.2pt;margin-bottom:
12.3pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>relationships =
nosqlDistilled.getRelationships(INCOMING, LIKES); for (Relationship
relationship : relationships) {
likesNoSQLDistilled.add(relationship.getStartNode()); }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Finding nodes and their immediate
relations is easy, but this can also be achieved in RDBMS databases. Graph
databases are really powerful when you want to traverse the graphs at any depth
and specify a starting node for the traversal. This is especially useful when
you are trying to find nodes that are related to the starting node at more than
one level down. As the depth of the graph increases, it makes more sense to
traverse the relationships by using a <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Traverser</span>
where you can specify that you are looking for <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>INCOMING</span>, <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>OUTGOING</span>, or <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>BOTH</span> types of
relationships. You can also make the traverser go top-down or sideways on the
graph by using <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Order</span>
values of <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>BREADTH_FIRST
</span>or <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>DEPTH_FIRST</span>.
The traversal has to start at some nodein this example, we try to find all the
nodes at any depth that are related as a <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>FRIEND</span> with <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Barbara</span>:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Node barbara =
nodeIndex.get(&quot;name&quot;, &quot;Barbara&quot;).getSingle();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Traverser friendsTraverser =
barbara.traverse(Order.BREADTH_FIRST,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>StopEvaluator.END_OF_GRAPH,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>ReturnableEvaluator.ALL_BUT_START_NODE,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>EdgeType.FRIEND,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
13.05pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>Direction.OUTGOING);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>friendsTraverser</span> provides us a
way to find all the nodes that are related to <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Barbara</span> where the relationship
type is <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>FRIEND</span>.
The nodes can be at any depthfriend of a friend at any levelallowing you to
explore tree structures.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>One of the good features of graph
databases is finding paths between two nodesdetermining if there are multiple
paths, finding all of the paths or the shortest path. In the graph in <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 11.1</span></u>,
we know that <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Barbara</span>
is connected to <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Jill</span>
by two distinct paths; to find all these paths and the distance between <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Barbara</span> and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Jill</span> along those
different paths, we can use</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Node barbara =
nodeIndex.get(&quot;name&quot;, &quot;Barbara&quot;).getSingle();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Node jill =
nodeIndex.get(&quot;name&quot;, &quot;Jill&quot;).getSingle();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>PathFinder&lt;Path&gt; finder =
GraphAlgoFactory.allPaths(</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>Traversal.expanderForTypes(FRIEND,Direction.OUTGOING)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'></span>,MAX_DEPTH);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Iterable&lt;Path&gt; paths =
finder.findAllPaths(barbara, jill);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>This feature is used in social networks to show
relationships between any two nodes. To find all the paths and the distance
between the nodes for each path, we first get a list of distinct paths between
the two nodes. The length of each path is the <b style='mso-bidi-font-weight:
normal'>number of hops</b> on the graph needed to reach the destination node
from the start node. Often, you need to get the shortest path between two
nodes; of the two paths from <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Barbara</span>
to <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Jill</span>,
the shortest path can be found by using</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>PathFinder&lt;Path&gt; finder =
GraphAlgoFactory.shortestPath(</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>Traversal.expanderForTypes(FRIEND, Direction.OUTGOING)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'></span>,
MAX_DEPTH);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Iterable&lt;Path&gt; paths =
finder.findAllPaths(barbara, jill);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>Many other graph algorithms can be applied to the graph at
hand, such as Dijkstras algorithm <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Dijkstras]</span></u> for finding the shortest or
cheapest path between nodes.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>START beginingNode = (beginning node
specification)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>MATCH (relationship, pattern matches)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>WHERE (filtering condition: on data in
nodes and relationships)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>RETURN (What to return: nodes,
relationships, properties)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ORDER BY (properties to order by)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>SKIP (nodes to skip from top)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
13.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>LIMIT (limit results)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Neo4J also provides the <b
style='mso-bidi-font-weight:normal'>Cypher</b> query language to query the
graph. Cypher needs a node to <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>START
</span>the query. The start node can be identified by its node ID, a list of
node IDs, or index lookups. Cypher uses the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>MATCH</span> keyword for matching
patterns in relationships; the <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>WHERE</span>
keyword filters the properties on a node or relationship. The <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>RETURN</span> keyword
specifies what gets returned by the query nodes, relationships, or fields on
the nodes or relationships.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Cypher also provides methods to <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>ORDER</span>, <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>AGGREGATE</span>, <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>SKIP</span>, and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>LIMIT</span> the data. In <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 11.2</span></u>,
we find all nodes connected to <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Barbara</span>,
either incoming or outgoing, by using the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>--</span>.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>START barbara = node:nodeIndex(name =
&quot;Barbara&quot;)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>MATCH (barbara)--(connected_node)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>RETURN connected_node</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:5.8pt;
margin-left:15.5pt'>When interested in directional significance, we can use</p>

<p class=MsoNormal style='margin-top:0in;margin-right:356.35pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:146%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:146%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>MATCH (barbara)&lt;--(connected_node) </span>for
incoming relationships or</p>

<p class=MsoNormal style='margin-top:0in;margin-right:99.8pt;margin-bottom:
0in;margin-left:-.75pt;margin-bottom:.0001pt;text-align:justify;text-justify:
inter-ideograph;text-indent:0in;line-height:125%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:125%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>MATCH (barbara)--&gt;(connected_node) </span>for
outgoing relationships. Match can also be done on specific relationships using
the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:125%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>:RELATIONSHIP_TYPE</span>
convention and returning the required fields or nodes.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>START barbara = node:nodeIndex(name =
&quot;Barbara&quot;)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>MATCH
(barbara)-[:FRIEND]-&gt;(friend_node)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.7pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>RETURN
friend_node.name,friend_node.location</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>We start with <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Barbara</span>, find all outgoing
relationships with the type of <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>FRIEND</span>,
and return the friendsnames. The relationship type query only works for the
depth of one level; we can make it work for greater depths and find out the
depth of each of the result nodes.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>START barbara=node:nodeIndex(name =
&quot;Barbara&quot;)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>MATCH path =
barbara-[:FRIEND*1..3]-&gt;end_node</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>RETURN barbara.name,end_node.name,
length(path)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Similarly, we can query for
relationships where a particular relationship property exists. We can also filter
on the properties of relationships and query if a property exists or not.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>START barbara = node:nodeIndex(name =
&quot;Barbara&quot;)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>MATCH
(barbara)-[relation]-&gt;(related_node)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>WHERE type(relation) = 'FRIEND' AND
relation.share</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>RETURN related_node.name, relation.since</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.75pt;text-indent:15.0pt'>There are many other query features in
the Cypher language that can be used to query database graphs.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>11.2.5. Scaling</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>In NoSQL databases, one of the commonly used scaling
techniques is sharding, where data is split and distributed across different
servers. With graph databases, sharding is difficult, as graph databases are
not aggregate-oriented but relationship-oriented. Since any given node can be
related to any other node, storing related nodes on the same server is better
for graph traversal. Traversing a graph when the nodes are on different
machines is not good for performance. Knowing this limitation of the graph
databases, we can still scale them using some common techniques described by
Jim Webber <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Webber
Neo4J Scaling]</span></u>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.1pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Generally speaking, there are three ways
to scale graph databases. Since machines now can come with lots of RAM, we can
add enough RAM to the server so that the working set of nodes and relationships
is held entirely in memory. This technique is only helpful if the dataset that
we are working with will fit in a realistic amount of RAM.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>We can improve the read scaling of the
database by adding more slaves with read-only access to the data, with all the
writes going to the master. This pattern of writing once and reading from many
servers is a proven technique in MySQL clusters and is really useful when the
dataset is large enough to not fit in a single machines RAM, but small enough
to be replicated across multiple machines. Slaves can also contribute to
availability and read-scaling, as they can be configured to never become a
master, remaining always read-only.</p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.75pt;
margin-bottom:.8pt;margin-left:5.25pt;text-align:center;line-height:103%'>When
the dataset size makes replication impractical, we can shard (see the <u
style='text-underline:#0000EE'><span style='color:#0000EE'>Sharding</span></u>
section on</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>38</span></u>) the data from the application side using
domain-specific knowledge. For example, nodes that relate to the North America
can be created on one server while the nodes that relate to Asia on another.
This application-level sharding needs to understand that nodes are stored on
physically different databases (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 11.3</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:64.45pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_6577" o:spid="_x0000_i1081"
 type="#_x0000_t75" style='width:466.5pt;height:296.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image047.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=622 height=395
src="nosql_files/image047.jpg" v:shapes="Picture_x0020_6577"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.4pt;
margin-bottom:.15in;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 11.3. Application-level sharding of
nodes</b></p>

<h3 style='margin-left:-.25pt'>11.3. Suitable Use Cases</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:8.8pt;
margin-left:-.25pt'>Lets look at some suitable use cases for graph databases.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>11.3.1. Connected Data</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Social networks are where graph databases can be deployed
and used very effectively. These social graphs dont have to be only of the
friend kind; for example, they can represent employees, their knowledge, and
where they worked with other employees on different projects. Any link-rich
domain is well suited for graph databases.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.25pt;margin-bottom:
9.1pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>If you have relationships between domain
entities from different domains (such as social, spatial, commerce) in a single
database, you can make these relationships more valuable by providing the
ability to traverse across domains.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>11.3.2. Routing, Dispatch, and Location-Based Services</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.25pt'>Every location or address that has a delivery is a node,
and all the nodes where the delivery has to be made by the delivery person can
be modeled as a graph of nodes. Relationships between nodes can have the
property of distance, thus allowing you to deliver the goods in an efficient
manner. Distance and location properties can also be used in graphs of places
of interest, so that your application can provide recommendations of good
restaurants or entertainment options nearby. You can also create nodes for your
points of sales, such as bookstores or restaurants, and notify the users when
they are close to any of the nodes to provide location-based services.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>11.3.3. Recommendation Engines</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:1.5pt;
margin-left:-.25pt'>As nodes and relationships are created in the system, they
can be used to make recommendations like your friends also bought this
productor when invoicing this item, these other items are usually invoiced.
Or, it can be used to make recommendations to travelers mentioning that when
other visitors come to Barcelona they usually visit Antonio Gaudis creations.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>An interesting side effect of using the
graph databases for recommendations is that as the data size grows, the number
of nodes and relationships available to make the recommendations quickly
increases. The same data can also be used to mine informationfor example,
which products are always bought together, or which items are always invoiced
together; alerts can be raised when these conditions are not met. Like other
recommendation engines, graph databases can be used to search for patterns in
relationships to detect fraud in transactions.</p>

<h3 style='margin-left:-.25pt'>11.4. When Not to Use</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>In some situations, graph databases may not appropriate.
When you want to update all or a subset of entitiesfor example, in an
analytics solution where all entities may need to be updated with a changed
propertygraph databases may not be optimal since changing a property on all
the nodes is not a straightforward operation. Even if the data model works for
the problem domain, some databases may be unable to handle lots of data,
especially in global graph operations (those involving the whole graph).<br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:19.45pt;margin-left:
-.25pt'>Chapter 12. Schema Migrations</h2>

<h3 style='margin-left:-.25pt'>12.1. Schema Changes</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>The recent trend in discussing NoSQL databases is to
highlight their <i style='mso-bidi-font-style:normal'>schemaless</i> natureit
is a popular feature that allows developers to concentrate on the domain design
without worrying about schema changes. Its especially true with the rise of
agile methods <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Agile
Methods]</span></u> where responding to changing requirements is important.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.1pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Discussions, iterations, and feedback loops involving
domain experts and product owners are important to derive the right
understanding of the data; these discussions must not be hampered by a
databases schema complexity. With NoSQL data stores, changes to the schema can
be made with the least amount of friction, improving developer productivity (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>The Emergence of
NoSQL</span></u>,p. <u style='text-underline:#0000EE'><span style='color:
#0000EE'>9</span></u>). We have seen that developing and maintaining an
application in the brave new world of schemaless databases requires careful
attention to be given to schema migration.</p>

<h3 style='margin-left:-.25pt'>12.2. Schema Changes in RDBMS</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>While developing with standard RDBMS
technologies, we develop objects, their corresponding tables, and their
relationships. Consider a simple object model and data model that has <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span>, <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Order</span>, and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>OrderItems</span>. The ER
model would look like <u style='text-underline:#0000EE'><span style='color:
#0000EE'>Figure 12.1</span></u>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:45.0pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_6666" o:spid="_x0000_i1080"
 type="#_x0000_t75" style='width:505.5pt;height:163.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image048.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=674 height=218
src="nosql_files/image048.jpg" v:shapes="Picture_x0020_6666"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:0in;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 12.1. Data model of an e-commerce
system</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:16.5pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>While this data model supports the current
object model, life is good. The first time there is a change in the object
model, such as introducing <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>preferredShippingType</span>
on the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>Customer</span>
object, we have to change the object and change the database table, because
without changing the table the application will be out of sync with the
database. When we get errors like <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>ORA-00942:
table or view does not exist</span> or <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ORA-00904:
&quot;PREFERRED_SHIPPING_TYPE&quot;: invalid identifier</span>, we know we have
this problem.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.85pt;margin-bottom:
9.1pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Typically, a database schema migration has
been a project in itself. For deployment of the schema changes, database change
scripts are developed, using diff techniques, for all the changes in the
development database. This approach of creating migration scripts during the
deployment/release time is error-prone and does not support agile development
methods.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>12.2.1. Migrations for Green Field Projects</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>Scripting the database schema changes
during development is better, since we can store these schema changes along
with the data migration scripts in the same script file. These script files
should be named with incrementing sequential numbers which reflect the database
versions; for example, the first change to the database could have script file
named as <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>001_Description_Of_Change.sql</span>.
Scripting changes this way allows for the database migrations to be run
preserving the order of changes. Shown in <u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 12.2</span></u> is a folder of all the changes
done to a database so far.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:147.7pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_6717" o:spid="_x0000_i1079"
 type="#_x0000_t75" style='width:300pt;height:141pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image049.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=400 height=188
src="nosql_files/image049.jpg" v:shapes="Picture_x0020_6717"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:2.1pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 12.2. Sequence of migrations
applied to a database</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>Now, suppose we
need to change the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>OrderItem</span>
table to store the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>DiscountedPrice</span>
and the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>FullPrice</span>
of the item. This will need a change to the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>OrderItem</span> table and will be
change number <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>007</span>
in our sequence of changes, as shown in <u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 12.3</span></u>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.1pt;
margin-left:147.7pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_6734" o:spid="_x0000_i1078"
 type="#_x0000_t75" style='width:300pt;height:166.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image050.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=400 height=222
src="nosql_files/image050.jpg" v:shapes="Picture_x0020_6734"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:2.1pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 12.3. New change <span
style='font-family:"Courier New";mso-fareast-font-family:"Courier New"'>007_DiscountedPrice.sql</span>
applied to the database</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>We applied a new change to the database.
This changes script has the code for adding a new column, renaming the
existing column, and migrating the data needed to make the new feature work.
Shown below is the script contained in the change <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>007_DiscountedPrice.sql</span>:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ALTER TABLE orderitem ADD
discountedprice NUMBER(18,2) NULL;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>UPDATE orderitem SET discountedprice =
price;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ALTER TABLE orderitem MODIFY
discountedprice NOT NULL;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ALTER TABLE orderitem RENAME COLUMN
price TO fullprice;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>--//@UNDO</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ALTER TABLE orderitem RENAME fullprice
TO price;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ALTER TABLE orderitem DROP COLUMN
discountedprice;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>The change script
shows the schema changes to the database as well as the data migrations needed
to be done. In the example shown, we are using DBDeploy <u style='text-underline:
#0000EE'><span style='color:#0000EE'>[DBDeploy]</span></u> as the framework to
manage the changes to the database. DBDeploy maintains a table in the database,
named <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>ChangeLog</span>,
where all the changes made to the database are stored. In this table, <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Change_Number</span> is
what tells everyone which changes have been applied to the database. This <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>Change_Number</span>,
which is the database version, is then used to find the corresponding numbered
script in the folder and apply the changes which have not been applied yet.
When we write a script with the change number <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>007</span> and apply it to the database
using DBDeploy, DBDeploy will check the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ChangeLog</span> and pick up all the
scripts from the folder that have not yet been applied. <u style='text-underline:
#0000EE'><span style='color:#0000EE'>Figure 12.4</span></u> is the screenshot
of DBDeploy applying the change to the database.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_6796" o:spid="_x0000_i1077"
 type="#_x0000_t75" style='width:525pt;height:341.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image051.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=455
src="nosql_files/image051.jpg" v:shapes="Picture_x0020_6796"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:1.25pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 12.4. DBDeploy upgrading the
database with change number 007</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:-.75pt;text-indent:15.0pt'>The best way to integrate with the rest
of the developers is to use your projects version control repository to store
all these change scripts, so that you can keep track of the version of the
software and the database in the same place, eliminating possible mismatches
between the database and the application. There are many other tools for such
upgrades, including Liquibase <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Liquibase]</span></u>, MyBatis Migrator <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[MyBatis Migrator]</span></u>,
DBMaintain <u style='text-underline:#0000EE'><span style='color:#0000EE'>[DBMaintain]</span></u>.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>12.2.2. Migrations in Legacy Projects</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:12.85pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>Not every project is a green field. How to
implement migrations when an existing application is in production? We found
that taking an existing database and extracting its structure into scripts,
along with all the database code and any reference data, works as a baseline
for the project. This baseline should not contain transactional data. Once the
baseline is ready, further changes can be done using the migrations technique
described above (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure
12.5</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:166.45pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_6841" o:spid="_x0000_i1076"
 type="#_x0000_t75" style='width:262.5pt;height:216.75pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image052.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=350 height=289
src="nosql_files/image052.jpg" v:shapes="Picture_x0020_6841"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:2.1pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 12.5. Use of baseline scripts with
a legacy database</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>One of the main aspects of migrations
should be maintaining backward compatibility of the database schema. In many
enterprises there are multiple applications using the database; when we change
the database for one application, this change should not break other
applications. We can achieve backward compatibility by maintaining a transition
phase for the change, as described in detail in <i style='mso-bidi-font-style:
normal'>Refactoring Databases</i> <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Ambler and Sadalage]</span></u>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>During a <b style='mso-bidi-font-weight:
normal'>transition phase</b>, the old schema and the new schema are maintained
in parallel and are available for all the applications using the database. For
this, we have to introduce scaffolding code, such as triggers, views, and
virtual columns ensuring other applications can access the database schema and
the data they require without any code changes.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ALTER TABLE customer ADD fullname
VARCHAR2(60);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>UPDATE customer SET fullname = fname;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>CREATE OR REPLACE TRIGGER
SyncCustomerFullName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>BEFORE INSERT OR UPDATE</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>ON customer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>REFERENCING OLD AS OLD NEW AS NEW</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>FOR EACH ROW</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>BEGIN</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>IF :NEW.fname IS NULL THEN</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>:NEW.fname := :NEW.fullname;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>END IF;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>IF :NEW.fullname IS NULL THEN</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>:NEW.fullname := :NEW.fname</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>END IF;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>END;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>/</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>--Drop Trigger and fname</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
13.4pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>--when all applications start using
customer.fullname</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In the example, we are trying to rename
the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>customer.fname</span>
column to <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>customer.fullname</span>
as we want to avoid any ambiguity of <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fname</span>
meaning either <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fullname</span>
or <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>firstname</span>.
A direct rename of the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fname</span>
column and changing the application code we are responsible for may just work,
for our applicationbut will not for the other applications in the enterprise
that are accessing the same database.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Using the transition phase technique, we
introduce the new column <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fullname</span>,
copy the data over to <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fullname</span>,
but leave the old column <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fname</span>
around. We also introduce a <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>BEFORE
UPDATE</span> trigger to synchronize data between the columns before they are
committed to the database.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Now, when applications read data from the
table, they will read either from <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fname</span>
or from <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fullname</span>
but will always get the right data. We can drop the trigger and the <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>fname</span> column once
all the applications have moved on to using the new <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>fullname</span> column.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Its very hard to do schema migrations
on large datasets in RDBMS, especially if we have to keep the database
available to the applications, as large data movements and structural changes
usually create locks on the database tables.</p>

<h3 style='margin-left:-.25pt'>12.3. Schema Changes in a NoSQL Data Store</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>An RDBMS database has to be changed before the application
is changed. This is what the <i style='mso-bidi-font-style:normal'>schemafree</i>,
or <i style='mso-bidi-font-style:normal'>schemaless</i>, approach tries to
avoid, aiming at flexibility of schema changes per entity. Frequent changes to
the schema are needed to react to frequent market changes and product
innovations.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When developing with NoSQL databases, in
some cases the schema does not have to be thought about beforehand. We still
have to design and think about other aspects, such as the types of
relationships (with graph databases), or the names of the column families,
rows, columns, order of columns (with column databases), or how are the keys
assigned and what is the structure of the data inside the value object (with
key-value stores). Even if we didnt think about these up front, or if we want
to change our decisions, it is easy to do so.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The claim that NoSQL databases are
entirely schemaless is misleading; while they store the data without regard to
the schema the data adheres to, that schema has to be defined by the
application, because the data stream has to be parsed by the application when
reading the data from the database. Also, the application has to create the
data that would be saved in the database. If the application cannot parse the
data from the database, we have a schema mismatch even if, instead of the RDBMS
database throwing a error, this error is now encountered by the application.
Thus, even in schemaless databases, the schema of the data has to be taken into
consideration when refactoring the application.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.2pt;
margin-left:-.75pt;text-indent:15.0pt'>Schema changes especially matter when
there is a deployed application and existing production data. For the sake of
simplicity, assume we are using a document data store like MongoDB</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'><u style='text-underline:#0000EE'><span style='color:#0000EE'>[MongoDB]</span></u>
and we have the same data model as before: <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>customer</span>, <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>order</span>, and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>orderItems</span>.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;_id&quot;:
&quot;4BD8AE97C47016442AF4A580&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;customerid&quot;: 99999,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;name&quot;: &quot;Foo Sushi
Inc&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;since&quot;:
&quot;12/12/2012&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;order&quot;: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;orderid&quot;: &quot;4821-UXWE-122012&quot;,&quot;orderdate&quot;:
&quot;12/12/2001&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;orderItems&quot;: [{&quot;product&quot;: &quot;Fortune
Cookies&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'></span>&quot;price&quot;: 19.99}]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>Application code to write this document structure to MongoDB:</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:224.9pt;margin-bottom:
12.3pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>BasicDBObject orderItem = new
BasicDBObject(); orderItem.put(&quot;product&quot;, productName);
orderItem.put(&quot;price&quot;, price); orderItems.add(orderItem);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>Code to read the document back from the database:</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>BasicDBObject item = (BasicDBObject)
orderItem;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>String productName =
item.getString(&quot;product&quot;);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
13.0pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Double price =
item.getDouble(&quot;price&quot;);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Changing the objects to add <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>preferredShippingType</span>
does not require any change in the database, as the database does not care that
different documents do not follow the same schema. This allows for faster
development and easy deployments. All that needs to be deployed is the
applicationno changes on the database side are needed. The code has to make
sure that documents that do not have the <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>preferredShippingType</span> attribute
can still be parsedand thats all.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Of course we are simplifying the schema change
situation here. Lets look at the schema change we made before: introducing <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:103%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>discountedPrice</span> and
renaming price to <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fullPrice</span>.
To make this change, we rename the <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>price</span>
attribute to <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fullPrice</span>
and add <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:
103%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>discountedPrice</span>
attribute. The changed document is</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;margin-left:
-.25pt;line-height:107%'><u style='text-underline:#0000EE'><span
style='font-size:11.5pt;mso-bidi-font-size:11.0pt;line-height:107%;color:#0000EE'>Click
here to view code image</span></u></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;_id&quot;:
&quot;5BD8AE97C47016442AF4A580&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;customerid&quot;: 66778,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;name&quot;: &quot;India
House&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;since&quot;:
&quot;12/12/2012&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>&quot;order&quot;: {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;orderid&quot;: &quot;4821-UXWE-222012&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;orderdate&quot;: &quot;12/12/2001&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>&quot;orderItems&quot;: [{&quot;product&quot;: &quot;Chair Covers&quot;,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'></span>&quot;fullPrice&quot;:
29.99,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span
style='mso-spacerun:yes'>
</span>&quot;discountedPrice&quot;:26.99}]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.2pt;
margin-left:-.75pt;text-indent:15.0pt'>Once we deploy this change, new
customers and their orders can be saved and read back without problems, but for
existing orders the price of their product cannot be read, because now the code
is looking for <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fullPrice</span>
but the document has only <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>price</span>.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>12.3.1. Incremental Migration</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Schema mismatch trips many new converts to the NoSQL world.
When schema is changed on the application, we have to make sure to convert all
the existing data to the new schema (depending on data size, this might be an
expensive operation). Another option would be to make sure that data, before
the schema changed, can still be parsed by the new code, and when its saved,
it is saved back in the new schema. This technique, known as <b
style='mso-bidi-font-weight:normal'>incremental migration</b>, will migrate
data over time; some data may never get migrated, because it was never
accessed. We are reading both <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>price</span>
and <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Courier New";mso-fareast-font-family:"Courier New"'>fullPrice</span>
from the document:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>BasicDBObject item = (BasicDBObject)
orderItem;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>String productName =
item.getString(&quot;product&quot;);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:299.15pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Double fullPrice =
item.getDouble(&quot;price&quot;); if (fullPrice == null) {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>fullPrice = item.getDouble(&quot;fullPrice&quot;);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.45pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>Double discountedPrice =
item.getDouble(&quot;discountedPrice&quot;);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:15.5pt'>When writing the document back, the old attribute <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>price</span> is not saved:</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:170.95pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>BasicDBObject orderItem = new
BasicDBObject(); orderItem.put(&quot;product&quot;, productName);
orderItem.put(&quot;fullPrice&quot;, price);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
12.3pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>orderItem.put(&quot;discountedPrice&quot;,
discountedPrice); orderItems.add(orderItem);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When using incremental migration, there
could be many versions of the object on the application side that can translate
the old schema to the new schema; while saving the object back, it is saved
using the new object. This gradual migration of the data helps the application
evolve faster.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>The incremental
migration technique will complicate the object design, especially as new
changes are being introduced yet old changes are not being taken out. This
period between the change deployment and the last object in the database
migrating to the new schema is known as the transition period (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 12.6</span></u>).
Keep it as short as possible and focus it to the minimum possible scopethis
will help you keep your objects clean.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:147.7pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_7097" o:spid="_x0000_i1075"
 type="#_x0000_t75" style='width:300pt;height:268.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image053.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=400 height=358
src="nosql_files/image053.jpg" v:shapes="Picture_x0020_7097"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:1.4pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 12.6. Transition period of schema
changes</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The incremental migration technique can
also be implemented with a <span style='font-size:12.0pt;mso-bidi-font-size:
11.0pt;line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>schema_version</span>
field on the data, used by the application to choose the correct code to parse
the data into the objects. When saving, the data is migrated to the latest
version and the <span style='font-size:12.0pt;mso-bidi-font-size:11.0pt;
line-height:104%;font-family:"Courier New";mso-fareast-font-family:"Courier New"'>schema_version</span>
is updated to reflect that.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Having a proper translation layer
between your domain and the database is important so that, as the schema
changes, managing multiple versions of the schema is restricted to the
translation layer and does not leak into the whole application.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Mobile apps create special requirements.
Since we cannot enforce the latest upgrades of the application, the application
should be able to handle almost all versions of the schema.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>12.3.2. Migrations in Graph Databases</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Graph databases have edges that have types and properties.
If you change the type of these edges in the codebase, you no longer can
traverse the database, rendering it unusable. To get around this, you can
traverse all the edges and change the type of each edge. This operation can be
expensive and requires you to write code to migrate all the edges in the
database.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>If we need to maintain backward compatibility or do
not want to change the whole graph in one go, we can just create new edges
between the nodes; later when we are comfortable about the change, the old
edges can be dropped. We can use traversals with multiple edge types to
traverse the graph using the new and old edge types. This technique may help a
great deal with large databases, especially if we want to maintain high
availability.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>If we have to change properties on all
the nodes or edges, we have to fetch all the nodes and change all the
properties that need to be changed. An example would be adding <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>NodeCreatedBy</span> and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>NodeCreatedOn</span> to
all existing nodes to track the changes being made to each node.</p>

<h5 style='margin-left:-.25pt'>Click here to view code image</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
.25pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>for (Node node : database.getAllNodes())
{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:191.15pt;margin-bottom:
12.3pt;margin-left:-.25pt;line-height:103%'><span style='font-size:11.5pt;
mso-bidi-font-size:11.0pt;line-height:103%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'><span style='mso-spacerun:yes'>
</span>node.setProperty(&quot;NodeCreatedBy&quot;, getSystemUser());<span
style='mso-spacerun:yes'>
</span>node.setProperty(&quot;NodeCreatedOn&quot;, getSystemTimeStamp()); }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:9.1pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>We may have to change the data in the nodes. New data
may be derived from the existing node data, or it could be imported from some
other source. The migration can be done by fetching all nodes using an index
provided by the source of data and writing relevant data to each node.</p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:5.0pt;margin-left:
-.25pt'>12.3.3. Changing Aggregate Structure</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Sometimes you need to change the schema design, for example
by splitting large objects into smaller ones that are stored independently.
Suppose you have a customer aggregate that contains all the customers orders,
and you want to separate the customer and each of their orders into different
aggregate units.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>You then have to ensure that the code
can work with both versions of the aggregates. If it does not find the old
objects, it will look for the new aggregates.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Code that runs in the background can
read one aggregate at a time, make the necessary change, and save the data back
into different aggregates. The advantage of operating on one aggregate at a
time is that this way, youre not affecting data availability for the
application.</p>

<h3 style='margin-left:-.25pt'>12.4. Further Reading</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.25pt'>For more on migrations with relational databases, see <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Ambler and
Sadalage]</span></u>. Although much of this content is specific to relational
work, the general principles in migration will also apply to other</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.25pt'>databases.</p>

<h3 style='margin-left:-.25pt'>12.5. Key Points</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l7 level1 lfo11'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Databases
with strong schemas, such as relational databases, can be migrated by saving
eachschema change, plus its data migration, in a version-controlled sequence.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l7 level1 lfo11'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Schemaless
databases still need careful migration due to the implicit schema in any code
thataccesses the data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l7 level1 lfo11'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Schemaless
databases can use the same migration techniques as databases with strong
schemas.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l7 level1 lfo11'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Schemaless
databases can also read data in a way thats tolerant to changes in the
datasimplicit schema and use incremental migration to update data.<br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<h2 style='margin-left:-.25pt'>Chapter 13. Polyglot Persistence</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Different databases are designed to solve different
problems. Using a single database engine for all of the requirements usually
leads to non- performant solutions; storing transactional data, caching session
information, traversing graph of customers and the products their friends
bought are essentially different problems. Even in the RDBMS space, the
requirements of an OLAP and OLTP system are very differentnonetheless, they
are often forced into the same schema.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Lets think of data relationships. RDBMS
solutions are good at enforcing that relationships exist. If we want to
discover relationships, or have to find data from different tables that belong
to the same object, then the use of RDBMS starts being difficult.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Database engines are designed to perform
certain operations on certain data structures and data amounts very wellsuch
as operating on sets of data or a store and retrieving keys and their values
really fast, or storing rich documents or complex graphs of information.</p>

<h3 style='margin-left:-.25pt'>13.1. Disparate Data Storage Needs</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>Many enterprises tend to use the same
database engine to store business transactions, session management data, and
for other storage needs such as reporting, BI, data warehousing, or logging
information (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure
13.1</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:120.7pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_7205" o:spid="_x0000_i1074"
 type="#_x0000_t75" style='width:354pt;height:270pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image054.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=472 height=360
src="nosql_files/image054.jpg" v:shapes="Picture_x0020_7205"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:.4pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 13.1. Use of RDBMS for every aspect
of storage for the application</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>The session, shopping cart, or order
data do not need the same properties of availability, consistency, or backup
requirements. Does session management storage need the same rigorous
backup/recovery strategy as the e-commerce orders data? Does the session
management storage need more availability of an instance of database engine to
write/read session data?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:1.5pt;
margin-left:-.75pt;text-indent:15.0pt'>In 2006, Neal Ford coined the term <b
style='mso-bidi-font-weight:normal'>polyglot programming</b>, to express the
idea that applications should be written in a mix of languages to take
advantage of the fact that different languages are suitable for tackling
different problems. Complex applications combine different types of problems,
so picking the right language for each job may be more productive than trying
to fit all aspects into a single language.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Similarly, when working on an e-commerce
business problem, using a data store for the shopping cart which is highly
available and can scale is important, but the same data store cannot help you
find products bought by the customersfriendswhich is a totally different
question. We use the term <b style='mso-bidi-font-weight:normal'>polyglot
persistence</b> to define this hybrid approach to persistence.</p>

<h3 style='margin-left:-.25pt'>13.2. Polyglot Data Store Usage</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>Lets take our e-commerce example and
use the polyglot persistence approach to see how some of these data stores can
be applied (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure
13.2</span></u>). A key-value data store could be used to store the shopping
cart data before the order is confirmed by the customer and also store the
session data so that the RDBMS is not used for this transient data. Key-value
stores make sense here since the shopping cart is usually accessed by user ID
and, once confirmed and paid by the customer, can be saved in the RDBMS. Similarly,
session data is keyed by the session ID.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:121.45pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_7240" o:spid="_x0000_i1073"
 type="#_x0000_t75" style='width:352.5pt;height:254.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image055.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=470 height=339
src="nosql_files/image055.jpg" v:shapes="Picture_x0020_7240"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:2.1pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 13.2. Use of key-value stores to
offload session and shopping cart data storage</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>If we need to recommend products to
customers when they place products into their shopping carts for example,
your friends also bought these productsor your friends bought these
accessories for this productthen introducing a graph data store in the mix
becomes relevant (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure
13.3</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:84.7pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_7258" o:spid="_x0000_i1072"
 type="#_x0000_t75" style='width:426pt;height:240pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image056.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=568 height=320
src="nosql_files/image056.jpg" v:shapes="Picture_x0020_7258"><![endif]></span></p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:2.55pt;margin-left:
112.2pt'>Figure 13.3. Example implementation of polyglot persistence</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:16.05pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>It is not necessary for the application to
use a single data store for all of its needs, since different databases are
built for different purposes and not all problems can be elegantly solved by a
singe database.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:39.75pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Even using specialized relational
databases for different purposes, such as data warehousing appliances or
analytics appliances within the same application, can be viewed as polyglot
persistence.</p>

<h3 style='margin-left:-.25pt'>13.3. Service Usage over Direct Data Store Usage</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:21.85pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>As we move towards multiple data stores in
the application, there may be other applications in the enterprise that could
benefit from the use of our data stores or the data stored in them. Using our
example, the graph data store can serve data to other applications that need to
understand, for example, which products are being bought by a certain segment
of the customer base.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Instead of each application talking
independently to the graph database, we can wrap the graph database into a
service so that all relationships between the nodes can be saved in one place
and queried by all the applications (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 13.4</span></u>). The data ownership and the APIs
provided by the service are more useful than a single application talking to
multiple databases.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:82.45pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_7286" o:spid="_x0000_i1071"
 type="#_x0000_t75" style='width:430.5pt;height:236.25pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image057.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=574 height=315
src="nosql_files/image057.jpg" v:shapes="Picture_x0020_7286"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:1.4pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 13.4. Example implementation of
wrapping data stores into services</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-indent:15.0pt'>The philosophy of
service wrapping can be taken further: You could wrap all databases into
services, letting the application to only talk to a bunch of services (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 13.5</span></u>).
This allows for the databases inside the services to evolve without you having
to change the dependent applications.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:28.5pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_7295" o:spid="_x0000_i1070"
 type="#_x0000_t75" style='width:538.5pt;height:262.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image058.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=718 height=350
src="nosql_files/image058.jpg" v:shapes="Picture_x0020_7295"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:1.4pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 13.5. Using services instead of
talking to databases</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Many NoSQL data store products, such as
Riak <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Riak]</span></u>
and Neo4J <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Neo4J]</span></u>,
actually provide outof-the-box REST APIs.</p>

<h3 style='margin-left:-.25pt'>13.4. Expanding for Better Functionality</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>Often, we cannot really change the data storage for a
specific usage to something different, because of the existing legacy
applications and their dependency on existing data storage. We can, however,
add functionality such as caching for better performance, or use indexing
engines such as Solr <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Solr]</span></u>
so that search can be more efficient (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 13.6</span></u>). When technologies like this are
introduced, we have to make sure data is synchronized between the data storage
for the application and the cache or indexing engine.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:99.7pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_7342" o:spid="_x0000_i1069"
 type="#_x0000_t75" style='width:396pt;height:283.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image059.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=528 height=378
src="nosql_files/image059.jpg" v:shapes="Picture_x0020_7342"><![endif]></span></p>

<h4 align=center style='margin-top:0in;margin-right:2.1pt;margin-bottom:2.8pt;
margin-left:1.0pt;text-align:center'>Figure 13.6. Using supplemental storage to
enhance legacy storage</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>While doing this, we need to update the indexed data
as the data in the application database changes. The process of updating the
data can be real-time or batch, as long as we ensure that the application can
deal with stale data in the index/search engine. The event sourcing (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Event Sourcing</span></u>,
p. <u style='text-underline:#0000EE'><span style='color:#0000EE'>142</span></u>)
pattern can be used to update the index.</p>

<h3 style='margin-left:-.25pt'>13.5. Choosing the Right Technology</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:10.5pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>There is a rich choice of data storage
solutions. Initially, the pendulum had shifted from speciality databases to a
single RDBMS database which allows all types of data models to be stored,
although with some abstraction. The trend is now shifting back to using the
data storage that supports the implementation of solutions natively.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>If we want to recommend products to
customers based on whats in their shopping carts and which other products were
bought by customers who bought those products, it can be implemented in any of
the data stores by persisting the data with the correct attributes to answer
our questions. The trick is to use the right technology, so that when the
questions change, they can still be asked with the same data store without
losing existing data or changing it into new formats.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Lets go back to our new feature need.
We can use RDBMS to solve this using a hierarchal query and modeling the tables
accordingly. When we need to change the traversal, we will have to refactor the
database, migrate the data, and start persisting new data. Instead, if we had
used a data store that tracks relations between nodes, we could have just
programmed the new relations and keep using the same data store with minimal
changes.</p>

<h3 style='margin-left:-.25pt'>13.6. Enterprise Concerns with Polyglot
Persistence</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Introduction of NoSQL data storage technologies will force
the enterprise DBAs to think about how to use the new storage. The enterprise
is used to having uniform RDBMS environments; whatever is the database an
enterprise starts using first, chances are that over the years all its applications
will be built around the same database. In this new world of polyglot
persistence, the DBA groups will have to become more poly-skilledto learn how
some of these NoSQL technologies work, how to monitor these systems, back them
up, and take data out of and put into these systems.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Once the enterprise decides to use any
NoSQL technology, issues such as licensing, support, tools, upgrades, drivers,
auditing, and security come up. Many NoSQL technologies are open-source and
have an active community of supporters; also, there are companies that provide
commercial support. There is not a rich ecosystem of tools, but the tool
vendors and the open-source community are catching up, releasing tools such as
MongoDB Monitoring Service <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Monitoring]</span></u>, Datastax Ops Center <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[OpsCenter]</span></u>,
or Rekon browser for Riak <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Rekon]</span></u>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.15pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>One other area that enterprises are
concerned about is security of the datathe ability to create users and assign
privileges to see or not see data at the database level. Most of the NoSQL
databases do not have very robust security features, but thats because they
are designed to operate differently. In traditional RDBMS, data was served by
the database and we could get to the database using any query tools. With the
NoSQL databases, there are query tools as well but the idea is for the
application to own the data and serve it using services. With this approach,
the responsibility for the security lies with the application. Having said
that, there are NoSQL technologies that introduce security features.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Enterprises often have data warehouse
systems, BI, and analytics systems that may need data from the polyglot data
sources. Enterprises will have to ensure that the ETL tools or any other
mechanism they are using to move data from source systems to the data warehouse
can read data from the NoSQL data store. The ETL tool vendors are coming out
with have the ability to talk to NoSQL databases; for example, Pentaho <u
style='text-underline:#0000EE'><span style='color:#0000EE'>[Pentaho]</span></u>
can talk to MongoDB and Cassandra.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Every enterprise runs analytics of some
sort. As the sheer volume of data that needs to be captured increases,
enterprises are struggling to scale their RDBMS systems to write all this data
to the databases. A huge number of writes and the need to scale for writes are
a great use case for NoSQL databases that allow you to write large volumes of
data.</p>

<h3 style='margin-left:-.25pt'>13.7. Deployment Complexity</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:-.25pt;margin-bottom:.0001pt'>Once we start down the path of using
polyglot persistence in the application, <b style='mso-bidi-font-weight:normal'>deployment
complexity </b>needs careful consideration. The application now needs all
databases in production at the same time.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.25pt'>You will need to have these databases in your UAT, QA, and
Dev environments. As most of the NoSQL products are open-source, there are few
license cost ramifications. They also support automation of installation and
configuration. For example, to install a database, all that needs to be done is
download and unzip the archive, which can be automated using <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>curl</span> and <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>unzip</span> commands.
These products also have sensible defaults and can be started with minimum
configuration.</p>

<h3 style='margin-left:-.25pt'>13.8. Key Points</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l2 level1 lfo12'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Polyglot
persistence is about using different data storage technologies to handle
varying datastorage needs.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l2 level1 lfo12'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Polyglot
persistence can apply across an enterprise or within a single application.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l2 level1 lfo12'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Encapsulating
data access into services reduces the impact of data storage choices on
otherparts of a system.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l2 level1 lfo12'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Adding
more data storage technologies increases complexity in programming and
operations, sothe advantages of a good data storage fit need to be weighed
against this complexity.</p>

<h2 style='margin-left:-.25pt'>Chapter 14. Beyond NoSQL</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:12.35pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>The appearance of NoSQL databases has done a
great deal to shake up and open up the world of databases, but we think the
kind of NoSQL databases we have discussed here is only part of the picture of
polyglot persistence. So it makes sense to spend some time discussing solutions
that dont easily fit into the NoSQL bucket.</p>

<h3 style='margin-left:-.25pt'>14.1. File Systems</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Databases are very common, but file systems are almost
ubiquitous. In the last couple of decades theyve been widely used for personal
productivity documents, but not for enterprise applications. They dont
advertise any internal structure, so they are more like key-value stores with a
hierarchic key. They also provide little control over concurrency other than
simple file lockingwhich itself is similar to the way NoSQL only provides
locking within a single aggregate.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>File systems have the advantage of being
simple and widely implemented. They cope well with very large entities, such as
video and audio. Often, databases are used to index media assets stored in
files. Files also work very well for sequential access, such as streaming,
which can be handy for data which is append-only.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.65pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Recent attention to clustered environments
has seen a rise of distributed file systems. Technologies like the Google File
System and Hadoop <u style='text-underline:#0000EE'><span style='color:#0000EE'>[Hadoop]</span></u>
provide support for replication of files. Much of the discussion of map-reduce
is about manipulating large files on cluster systems, with tools for automatic
splitting of large files into segments to be processed on multiple nodes.
Indeed a common entry path into NoSQL is from organizations that have been
using Hadoop.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>File systems work best for a relatively
small number of large files that can be processed in big chunks, preferably in
a streaming style. Large numbers of small files generally perform badlythis is
where a data store becomes more efficient. Files also provide no support for
queries without additional indexing tools such as Solr <u style='text-underline:
#0000EE'><span style='color:#0000EE'>[Solr]</span></u>.</p>

<h3 style='margin-left:-.25pt'>14.2. Event Sourcing</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Event sourcing is an approach to persistence that
concentrates on persisting all the changes to a persistent state, rather than
persisting the current application state itself. Its an architectural pattern
that works quite well with most persistence technologies, including relational
databases. We mention it here because it also underpins some of the more
unusual ways of thinking about persistence.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Consider an example of a system that
keeps a log of the location of ships (<u style='text-underline:#0000EE'><span
style='color:#0000EE'>Figure 14.1</span></u>). It has a simple ship record that
keeps the name of the ship and its current location. In the usual way of
thinking, when we hear that the ship <i style='mso-bidi-font-style:normal'>King
Roy</i> has arrived in San Francisco, we change the value of <i
style='mso-bidi-font-style:normal'>King Roy</i>s <span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>location</span> field to <span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>San Francisco</span>.
Later on, we hear its departed, so we change it to <span style='font-size:
12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>at sea</span>, changing it again once we
know its arrived in Hong Kong.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_7534" o:spid="_x0000_i1068"
 type="#_x0000_t75" style='width:525pt;height:231pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image060.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=308
src="nosql_files/image060.jpg" v:shapes="Picture_x0020_7534"><![endif]></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.55pt;
margin-left:6.85pt;line-height:105%'><b style='mso-bidi-font-weight:normal'>Figure
14.1. In a typical system, notice of a change causes an update to the
applications state.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:0in;
margin-left:-.75pt;margin-bottom:.0001pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>With an event-sourced system, the first
step is to construct an event object that captures the information about the
change (<u style='text-underline:#0000EE'><span style='color:#0000EE'>Figure
14.2</span></u>). This event object is stored in a durable event log. Finally,
we process the event in order to update the applications state.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:35.25pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_7543" o:spid="_x0000_i1067"
 type="#_x0000_t75" style='width:525pt;height:364.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image061.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=486
src="nosql_files/image061.jpg" v:shapes="Picture_x0020_7543"><![endif]></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.65pt;
margin-left:247.4pt;text-indent:-226.4pt;line-height:105%'><b style='mso-bidi-font-weight:
normal'>Figure 14.2. With event sourcing, the system stores each event,
together with the derived application state.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>As a consequence, in an event-sourced
system we store every event thats caused a state change of the system in the
event log, and the applications state is entirely derivable from this event
log. At any time, we can safely throw away the application state and rebuild it
from the event log.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In theory, event logs are all you need
because you can always recreate the application state whenever you need it by
replaying the event log. In practice, this may be too slow. As a result, its
usually best to provide the ability to store and recreate the application state
in a snapshot. A <b style='mso-bidi-font-weight:normal'>snapshot </b>is
designed to persist the memory image optimized for rapid recovery of the state.
It is an optimization aid, so it should never take precedence over the event
log for authority on the data.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>How frequently you take a snapshot depends on your
uptime needs. The snapshot doesnt need to be completely up to date, as you can
rebuild memory by loading the latest snapshot and then replaying all events
processed since that snapshot was taken. An example approach would be to take a
snapshot every night; should the system go down during the day, youd reload
last nights snapshot followed by todays events. If you can do that quickly
enough, all will be fine.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>To get a full record of every change in
your application state, you need to keep the event log going back to the
beginning of time for your application. But in many cases such a long-lived
record isnt necessary, as you can fold older events into a snapshot and only
use the event log after the date of the snapshot.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:18.25pt;margin-bottom:
0in;margin-left:-.75pt;margin-bottom:.0001pt;text-align:justify;text-justify:
inter-ideograph;text-indent:14.5pt;line-height:103%'>Using event sourcing has a
number of advantages. You can broadcast events to multiple systems, each of
which can build a different application state for different purposes (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Figure 14.3</span></u>).
For readintensive systems, you can provide multiple read nodes, with
potentially different schemas, while concentrating the writes on a different
processing system (an approach broadly known as CQRS <u style='text-underline:
#0000EE'><span style='color:#0000EE'>[CQRS]</span></u>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:28.5pt;text-indent:0in;line-height:107%'><span style='mso-no-proof:
yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_7581" o:spid="_x0000_i1066"
 type="#_x0000_t75" style='width:538.5pt;height:375pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image062.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=718 height=500
src="nosql_files/image062.jpg" v:shapes="Picture_x0020_7581"><![endif]></span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:1.25pt;
margin-bottom:2.8pt;margin-left:1.0pt;text-align:center;line-height:105%'><b
style='mso-bidi-font-weight:normal'>Figure 14.3. Events can be broadcast to
multiple display systems.</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:1.5pt;
margin-left:-.75pt;text-indent:15.0pt'>Event sourcing is also an effective
platform for analyzing historic information, since you can replicate any past
state in the event log. You can also easily investigate alternative scenarios
by introducing hypothetical events into an analysis processor.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Event sourcing does add some complexitymost
notably, you have to ensure that all state changes are captured and stored as
events. Some architectures and tools can make that inconvenient. Any
collaboration with external systems needs to take the event sourcing into
account; youll need to be careful of external side effects when replaying
events to rebuild an application state.</p>

<h3 style='margin-left:-.25pt'>14.3. Memory Image</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:4.65pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>One the consequences of event sourcing is
that the event log becomes the definitive persistent record but it is not
necessary for the application state to be persistent. This opens up the option
of keeping the application state in memory using only in-memory data
structures. Keeping all your working data in memory provides a performance
advantage, since theres no disk I/O to deal with when an event is processed.
It also simplifies programming since there is no need to perform mapping
between disk and in-memory data structures.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.85pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>The obvious limitation here is that you
must be able to store all the data youll need to access in memory. This is an
increasingly viable optionwe can remember disk sizes that were considerably
less than the current memory sizes. You also need to ensure that you can
recover quickly enough from a system crasheither by reloading events from the
event log or by running a duplicate system and cutting over.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Youll need some explicit mechanism to
deal with concurrency. One route is a transactional memory system, such as the
one that comes with the Clojure language. Another route is to do all input
processing on a single thread. Designed carefully, a single-threaded event
processor can achieve impressive throughput at low latency <u style='text-underline:
#0000EE'><span style='color:#0000EE'>[Fowler lmax]</span></u>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Breaking the separation between in-memory and
persistent data also affects how you handle errors. A common approach is to
update a model and roll back any changes should an error occur. With a memory
image, youll usually not have an automated rollback facility; you either have
to write your own (complicated) or ensure that you do thorough validation
before you begin to apply any changes.</p>

<h3 style='margin-left:-.25pt'>14.4. Version Control</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>For most software developers, their most common experience
of an event-sourced system is a version control system. Version control allows
many people on a team to coordinate their modifications of a complex
interconnected system, with the ability to explore past states of that system
and alternative realities through branching.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When we think of data storage, we tend
to think of a single-point-of-time worldview, which is very limiting compared
to the complexity supported by a version control system. Its therefore
surprising that data storage tools havent borrowed some of the ideas from
version control systems. After all, many situations require historic queries
and support for multiple views of the world.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>Version control systems are built on top
of file systems, and thus have many of the same limitations for data storage as
a file system. They are not designed for application data storage, so are
awkward to use in that context. However, they are worth considering for
scenarios where their timeline capabilities are useful.</p>

<h3 style='margin-left:-.25pt'>14.5. XML Databases</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>Around the turn of the millennium, people seemed to want
to use XML for everything, and there was a flurry of interest in databases
specifically designed to store and query XML documents. While that flurry had
as little impact on the relational dominance as previous blusters, XML
databases are still around.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.15pt;margin-bottom:
3.05pt;margin-left:-.75pt;text-indent:15.0pt'>We think of XML databases as
document databases where the documents are stored in a data model compatible
with XML, and where various XML technologies are used to manipulate the
document. You can use various forms of XML schema definitions (DTDs, XML
Schema, RelaxNG) to check document formats, run queries with XPath and XQuery,
and perform transformations with XSLT.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:20.25pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Relational databases took on XML and
blended these XML capabilities with relational ones, usually by embedding XML
documents as a column type and allowing some way to blend SQL and XML query
languages.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.35pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Of course theres no reason why you cant
use XML as a structuring mechanism within a key-value store. XML is less
fashionable these days than JSON, but is equally capable of storing complex
aggregates, and XMLs schema and query capabilities are greater than what you
can typically get for JSON. Using an XML database means that the database
itself is able to take advantage of the XML structure and not just treat the
value as a blob, but that advantage needs to be weighed with the other database
characteristics.</p>

<h3 style='margin-left:-.25pt'>14.6. Object Databases</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>When object-oriented programming started its rise in
popularity, there was a flurry of interest in object-oriented databases. The
focus here was the complexity of mapping from in-memory data structures to
relational tables. The idea of an object-oriented database is that you avoid
this complexitythe database would automatically manage the storage of
in-memory structures onto disk. You could think of it as a persistent virtual
memory system, allowing you to program with persistence yet without taking any
notice of a database at all.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:16.6pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Object databases didnt take off. One
reason was that the benefit of the close integration with the application meant
you couldnt easily access data other than with that application. A shift from
integration databases to application databases could well make object databases
more viable in the future.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>An important issue with object databases
is how to deal with migration as the data structures change. Here, the close
linkage between the persistent storage and in-memory structures can become a
problem. Some object databases include the ability to add migration functions
to object definitions.</p>

<h3 style='margin-left:-.25pt'>14.7. Key Points</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:24.1pt;margin-bottom:
3.15pt;margin-left:34.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-9.0pt;line-height:103%'>NoSQL is just one set of data storage
technologies. As they increase comfort with polyglot persistence, we should
consider other data storage technologies whether or not they bear the NoSQL
label.</p>

<h2 style='margin-left:-.25pt'>Chapter 15. Choosing Your Database</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>At this point in the book, weve covered a lot of the
general issues you need to be aware of to make decisions in the new world of
polyglot persistence. Its now time to talk about choosing your databases for
future development work. Naturally, we dont know your particular
circumstances, so we cant give you your answer, nor can we reduce it to a
simple set of rules to follow. Furthermore, its still early days in the
production use of NoSQL systems, so even what we do know is immaturein a
couple of years we may well think differently.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>We see two broad reasons to consider a
NoSQL database: programmer productivity and data access performance. In
different cases these forces may complement or contradict each other. Both of
them are difficult to assess early on in a project, which is awkward since your
choice of a data storage model is difficult to abstract so as to allow you to
change your mind later on.</p>

<h3 style='margin-left:-.25pt'>15.1. Programmer Productivity</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Talk to any developer of an enterprise application, and
youll sense frustration from working with relational databases. Information is
usually collected and displayed in terms of aggregates, but it has to be
transformed into relations in order to persist it. This chore is easier than it
used to be; during the 1990s many projects groaned under the effort of building
object-relational mapping layers. By the 2000s, weve seen popular ORM frameworks
such as Hibernate, iBATIS, and Rails Active Record that reduce much of that
burden. But this has not made the problem go away. ORMs are a leaky
abstraction, there are always some cases that need more attentionparticularly
in order to get decent</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>performance.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>In this situation aggregate-oriented
databases can offer a tempting deal. We can remove the ORM and persist
aggregates naturally as we use them. Weve come across several projects that
claim palpable benefits from moving to an aggregate-oriented solution.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Graph databases offer a different
simplification. Relational databases do not do a good job with data that has a
lot of relationships. A graph database offers both a more natural storage API
for this kind of data and query capabilities designed around these kinds of
structures.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:24.0pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>All kinds of NoSQL systems are better
suited to nonuniform data. If you find yourself struggling with a strong schema
in order to support ad-hoc fields, then the schemaless NoSQL databases can
offer considerable relief.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>These are the major reasons why the
programming model of NoSQL databases may improve the productivity of your
development team. The first step of assessing this for your circumstances is to
look at what your software will need to do. Run through the current features and
see if and how the data usage fits. As you do this, you may begin to see that a
particular data model seems like a good fit. That closeness of fit suggests
that using that model will lead to easier programming.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>As you do this, remember that polyglot
persistence is about using multiple data storage solutions. It may be that
youll see different data storage models fit different parts of your data. This
would suggest using different databases for different aspects of your data.
Using multiple databases is inherently more complex than using a single store,
but the advantages of a good fit in each case may be better overall.</p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:6.25pt;
margin-bottom:.8pt;margin-left:5.25pt;text-align:center;line-height:103%'>As
you look at the data model fit, pay particular attention to cases where there
is a problem. You</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>may see most of your features will work well with an
aggregate, but a few will not. Having a few features that dont fit the model
well isnt a reason to avoid the modelthe difficulties of the bad fit may not
overwhelm the advantages of the good fitbut its useful to spot and highlight
these bad fit cases.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Going through your features and
assessing your data needs should lead you to one or more alternatives for how
to handle your database needs. This will give you a starting point, but the
next step is to try things out by actually building software. Take some initial
features and build them, while paying close attention to how straightforward it
is to use the technology youre considering. In this situation, it may be
worthwhile to build the same features with a couple of different databases in
order to see which works best. People are often reluctant to do thisno one
likes to build software that will be discarded. Yet this is an essential way to
judge how effective a particular framework is.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Sadly, there is no way to properly measure how
productive different designs are. We have no way of properly measuring output.
Even if you build exactly the same feature, you cant truly compare the
productivity because knowledge of building it once makes it easier a second
time, and you cant build them simultaneously with identical teams. What you
can do is ensure the people who did the work can give an opinion. Most
developers can sense when they are more productive in one environment than
another. Although this is a subjective judgment, and you may well get
disagreements between team members, this is the best judgment you will get. In
the end we believe the team doing the work should decide.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:16.8pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>When trying out a database to judge
productivity, its important to also try out some of the bad fit cases we
mentioned earlier. That way the team can get a feeling of both the happy path
and the difficult one, to gain an overall impression.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.0pt;margin-bottom:11.35pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>This approach has its flaws. Often you cant get a
full appreciation of a technology without spending many months using itand
running an assessment for that long is rarely cost-effective. But like many
things in life, we need to make the best assessment we can, knowing its flaws,
and go with that. The essential thing here is to base the decision on as much
real programming as you can. Even a mere week working with a technology can
tell you things youd never learn from a hundred vendor presentations.</p>

<h3 style='margin-left:-.25pt'>15.2. Data-Access Performance</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>The concern that led to the growth of NoSQL databases was
rapid access to lots of data. As large websites emerged, they wanted to grow
horizontally and run on large clusters. They developed the early NoSQL
databases to help them run efficiently on such architectures. As other data
users follow their lead, again the focus is on accessing data rapidly, often
with large volumes involved.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:39.25pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>There are many factors that can determine
a databases better performance than the relational default in various
circumstances. A aggregate-oriented database may be very fast for reading or
retrieving aggregates compared to a relational database where data is spread
over many tables. Easier sharding and replication over clusters allows
horizontal scaling. A graph database can retrieve highly connected data more
quickly than using relational joins.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:8.4pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>If youre investigating NoSQL databases based on
performance, the most important thing you must do is to test their performance
in the scenarios that matter to you. Reasoning about how a database may perform
can help you build a short list, but the only way you can assess performance
properly is to build something, run it, and measure it.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>When building a performance assessment,
the hardest thing is often getting a realistic set of performance tests. You
cant build your actual system, so you need to build a representative subset.
Its important, however, for this subset to be as faithful a representative as
possible. Its no good taking a database thats intended to serve hundreds of
concurrent users and assessing its performance with a single user. You are
going to need to build representative loads and data volumes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Particularly if you are building a
public website, it can be difficult to build a high-load testbed. Here, a good
argument can be made for using cloud computing resources both to generate load
and to build a test cluster. The elastic nature of cloud provisioning is very
helpful for short-lived performance assessment work.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>Youre not going to be able to test
every way in which your application will be used, so you need to build a
representative subset. Choose scenarios that are the most common, the most performancedependent,
and those that dont seem to fit your database model well. The latter may alert
you to any risks outside of your main use cases.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.75pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>Coming up with volumes to test for can be
tricky, especially early on in a project when its not clear what your
production volumes are likely to be. You will have to come up with something to
base your thinking on, so be sure to make it explicit and to communicate it
with all the stakeholders. Making it explicit reduces the chance that different
people have varying ideas on what a heavy read loadis. It also allows you to
spot problems more easily should your later discoveries wander off your
original assumptions. Without making your assumptions explicit, its easier to
drift away from them without realizing you need to redo your testbed as you
learn new information.</p>

<h3 style='margin-left:-.25pt'>15.3. Sticking with the Default</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:103%'>Naturally we think that NoSQL is a viable option in many
circumstancesotherwise we wouldnt have spent several months writing this
book. But we also realize that there are many cases, indeed the majority of
cases, where youre better off sticking with the default option of a relational
database.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.5pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>Relational databases are well known; you can easily
find people with the experience of using them. They are mature, so you are less
likely to run into the rough edges of new technology. There are lots of tools
that are built on relational technology that you can take advantage of. You
also dont have to deal with the political issues of making an unusual
choicepicking a new technology will always introduce a risk of problems should
things run into difficulties.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.85pt;margin-bottom:
11.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:14.5pt;line-height:103%'>So, on the whole, we tend to take a view
that to choose a NoSQL database you need to show a real advantage over
relational databases for your situation. Theres no shame in doing the
assessments for programmability and performance, finding no clear advantage,
and staying with the relational option. We think there are many cases where it
is advantageous to use NoSQL databases, but manydoes not mean allor even
most.</p>

<h3 style='margin-left:-.25pt'>15.4. Hedging Your Bets</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>One of the greatest difficulties we have in giving advice
on choosing a data-storage option is that we dont have that much data to go
on. As we write this, we are only seeing very early adopters discussing their
experiences with these technologies, so we dont have a clear picture of the
actual pros and cons.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>With the situation this uncertain,
theres more of an argument for encapsulating your database choicekeeping all
your database code in a section of your codebase that is relatively easy to
replace should you decide to change your database choice later. The classic way
to do this is through an explicit data store layer in your applicationusing
patterns such as Data Mapper and Repository <u style='text-underline:#0000EE'><span
style='color:#0000EE'>[Fowler PoEAA]</span></u>. Such an encapsulation layer
does carry a cost, particularly when you are unsure about using quite different
models, such as key-value versus graph data models. Worse still, we dont have
experience yet with encapsulating data layers between these very different
kinds of data stores.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>On the whole, our advice is to
encapsulate as a default strategy, but pay attention to the cost of insulating
layer. If its getting too much of a burden, for example by making it harder to
use some helpful database features, then its a good argument for using the
database that has those features. This information may be just what you need to
make a database choice and thus eliminate the encapsulation.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>This is another argument for decomposing
the database layer into services that encapsulate data storage (<u
style='text-underline:#0000EE'><span style='color:#0000EE'>Service Usage over Direct
Data Store Usage</span></u>,p. <u style='text-underline:#0000EE'><span
style='color:#0000EE'>136</span></u>). As well as reducing coupling between
various services, this has the additional advantage of making it easier to
replace a database should things not work out in the future. This is a
plausible approach even if you end up using the same database everywhereshould
things go badly, you can gradually swap it out, focusing on the most
problematic services first.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:-.75pt;text-indent:15.0pt'>This design advice applies just as much
if you prefer to stick with a relational option. By encapsulating segments of your
database into services, you can replace parts of your data store with a NoSQL
technology as it matures and the advantages become clearer.</p>

<h3 style='margin-left:-.25pt'>15.5. Key Points</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l8 level1 lfo13'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>The
two main reasons to use NoSQL technology are:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l8 level1 lfo13'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>To
improve programmer productivity by using a database that better matches an
applicationsneeds.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l8 level1 lfo13'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>To
improve data access performance via some combination of handling larger data
volumes,reducing latency, and improving throughput.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l8 level1 lfo13'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Its
essential to test your expectations about programmer productivity and/or
performancebefore committing to using a NoSQL technology.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.15pt;
margin-left:34.5pt;text-indent:-9.0pt;line-height:103%;mso-list:l8 level1 lfo13'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:103%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Service
encapsulation supports changing data storage technologies as needs and
technologyevolve. Separating parts of applications into services also allows
you to introduce NoSQL into an existing application.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.25pt;
margin-left:34.5pt;text-indent:-9.0pt;mso-list:l8 level1 lfo13'><![if !supportLists]><span
style='mso-bidi-font-size:15.0pt;line-height:104%'><span style='mso-list:Ignore'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]>Most
applications, particularly nonstrategic ones, should stick with relational
technologyatleast until the NoSQL ecosystem becomes more mature.</p>

<h3 style='margin-left:-.25pt'>15.6. Final Thoughts</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:12.0pt;margin-bottom:
3.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>We hope youve found this book enlightening.
When we started writing it, we were frustrated by the lack of anything that
would give us a broad survey of the NoSQL world. In writing this book we had to
make that survey ourselves, and weve found it an enjoyable journey. We hope
your journey through this material is considerably quicker but no less
enjoyable.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.0pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>At this point you may be considering making use of a
NoSQL technology. If so this book is only an early step in building your
understanding. We urge you to download some databases and work with them, for
were of the firm conviction that you can only understand a technology properly
by working with itfinding its strengths and the inevitable gotchas that never
make it into the documentation.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.0pt;margin-bottom:3.15pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
14.5pt;line-height:103%'>We expect that most people, including most readers of
this book, will not be using NoSQL for a while. It is a new technology and we
are still early in the process of understanding when to use it and how to use
it well. But as with anything in the software world, things are changing more
rapidly than we dare predict, so do keep an eye on whats happening in this
field.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.75pt;text-indent:15.0pt'>We hope youll also find other books and
articles to help you. We think the best material on NoSQL will be written after
this book is done, so we cant point you to anywhere in particular as we write
this. We do have an active presence on the Web, so for our more up-to-date
thoughts on the NoSQL world take a look at <a href="http://www.sadalage.com/"><span
style='color:#0000EE'>www.sadalage.com</span></a><a
href="http://www.sadalage.com/"><span style='color:black;text-decoration:none;
text-underline:none'> </span></a>and <a
href="http://martinfowler.com/nosql.html"><span style='color:#0000EE'>http://martinfowler.com/nosql.html</span></a>.<br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<h2 style='margin-left:-.25pt'>Bibliography</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Agile Methods] <a
href="http://www.agilealliance.org/"><span style='color:#0000EE'>www.agilealliance.org</span></a><a
href="http://www.agilealliance.org/"><span style='color:black;text-decoration:
none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Amazons Dynamo] <a
href="http://www.allthingsdistributed.com/2007/10/amazons_dynamo.html"><span
style='color:#0000EE'>www.allthingsdistributed.com/2007/10/amazons_dynamo.html</span></a><a
href="http://www.allthingsdistributed.com/2007/10/amazons_dynamo.html"><span
style='color:black;text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Amazon DynamoDB] <a
href="http://aws.amazon.com/dynamodb"><span style='color:#0000EE'>http://aws.amazon.com/dynamodb</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Amazon SimpleDB] <a
href="http://aws.amazon.com/simpledb"><span style='color:#0000EE'>http://aws.amazon.com/simpledb</span></a><a
href="http://aws.amazon.com/simpledb"><span style='color:black;text-decoration:
none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:30.0pt;text-indent:-19.5pt'>[Ambler and Sadalage] Ambler, Scott and
Pramodkumar Sadalage. <i style='mso-bidi-font-style:normal'>Refactoring
Databases: Evolutionary Database Design</i>. Addison-Wesley. 2006. ISBN
978-0321293534.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Berkeley DB] <a
href="http://www.oracle.com/us/products/database/berkeley-db"><span
style='color:#0000EE'>www.oracle.com/us/products/database/berkeley-db</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Blueprints] <a
href="https://github.com/tinkerpop/blueprints/wiki"><span style='color:#0000EE'>https://github.com/tinkerpop/blueprints/wiki</span></a><a
href="https://github.com/tinkerpop/blueprints/wiki"><span style='color:black;
text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.1pt;
margin-left:30.0pt;text-indent:-19.5pt;line-height:103%'>[Brewer] Brewer, Eric.
<i style='mso-bidi-font-style:normal'>Towards Robust Distributed Systems</i>. <a
href="http://www.cs.berkeley.edu/~brewer/cs262b-2004/PODC-keynote.pdf"><span
style='color:#0000EE'>www.cs.berkeley.edu/~brewer/cs262b-2004/PODC-keynote.pdf</span></a><a
href="http://www.cs.berkeley.edu/~brewer/cs262b-2004/PODC-keynote.pdf"><span
style='color:black;text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Cages] <a
href="http://code.google.com/p/cages"><span style='color:#0000EE'>http://code.google.com/p/cages</span></a><a
href="http://code.google.com/p/cages"><span style='color:black;text-decoration:
none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Cassandra] <a
href="http://cassandra.apache.org/"><span style='color:#0000EE'>http://cassandra.apache.org</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:11.0pt'>[Chang etc.] Chang, Fay, Jeffrey Dean, Sanjay Ghemawat,
Wilson C. Hsieh, Deborah A. Wallach,</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:30.5pt'>Mike Burrows, Tushar Chandra, Andrew Fikes, and Robert E.
Gruber. <i style='mso-bidi-font-style:normal'>Bigtable: A Distributed Storage
System for Structured Data</i>. <a
href="http://research.google.com/archive/bigtable-osdi06.pdf"><span
style='color:#0000EE'>http://research.google.com/archive/bigtable-osdi06.pdf</span></a><a
href="http://research.google.com/archive/bigtable-osdi06.pdf"><span
style='color:black;text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[CouchDB] <a
href="http://couchdb.apache.org/"><span style='color:#0000EE'>http://couchdb.apache.org</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[CQL] <a
href="http://www.slideshare.net/jericevans/cql-sql-in-cassandra"><span
style='color:#0000EE'>www.slideshare.net/jericevans/cql-sql-in-cassandra</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[CQRS] <a
href="http://martinfowler.com/bliki/CQRS.html"><span style='color:#0000EE'>http://martinfowler.com/bliki/CQRS.html</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:0in;
margin-left:30.0pt;margin-bottom:.0001pt;text-indent:-19.5pt'>[C-Store]
Stonebraker, Mike, Daniel Abadi, Adam Batkin, Xuedong Chen, Mitch Cherniack,
Miguel Ferreira, Edmond Lau, Amerson Lin, Sam Madden, Elizabeth ONeil, Pat
ONeil, Alex Rasin, Nga Tran, and Stan Zdonik. <i style='mso-bidi-font-style:
normal'>C-Store: A Column-oriented DBMS</i>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:30.5pt;line-height:103%'><a
href="http://db.csail.mit.edu/projects/cstore/vldb.pdf"><span style='color:
#0000EE'>http://db.csail.mit.edu/projects/cstore/vldb.pdf</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Cypher] <a
href="http://docs.neo4j.org/chunked/1.6.1/cypher-query-lang.html"><span
style='color:#0000EE'>http://docs.neo4j.org/chunked/1.6.1/cypher-query-lang.html</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:30.0pt;text-indent:-19.5pt'>[Daigneau] Daigneau, Robert. <i
style='mso-bidi-font-style:normal'>Service Design Patterns</i>. Addison-Wesley.
2012. ISBN 032154420X.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[DBDeploy] <a href="http://dbdeploy.com/"><span
style='color:#0000EE'>http://dbdeploy.com</span></a><a
href="http://dbdeploy.com/"><span style='color:black;text-decoration:none;
text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[DBMaintain] <a
href="http://www.dbmaintain.org/"><span style='color:#0000EE'>www.dbmaintain.org</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.1pt;
margin-left:30.0pt;text-indent:-19.5pt;line-height:103%'>[Dean and Ghemawat]
Dean, Jeffrey and Sanjay Ghemawat. <i style='mso-bidi-font-style:normal'>MapReduce:
Simplified Data Processing on Large Clusters</i>. <a
href="http://static.usenix.org/event/osdi04/tech/full_papers/dean/dean.pdf"><span
style='color:#0000EE'>http://static.usenix.org/event/osdi04/tech/full_papers/dean/dean.pdf</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.9pt;
margin-left:11.0pt;line-height:103%'>[Dijkstras] <a
href="http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"><span
style='color:#0000EE'>http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:8.8pt;
margin-left:11.0pt'>[Evans] Evans, Eric. <i style='mso-bidi-font-style:normal'>Domain-Driven
Design</i>. Addison-Wesley. 2004. ISBN 0321125215.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[FlockDB] <a
href="https://github.com/twitter/flockdb"><span style='color:#0000EE'>https://github.com/twitter/flockdb</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.05pt;
margin-left:30.0pt;text-indent:-19.5pt'>[Fowler DSL] Fowler, Martin. <i
style='mso-bidi-font-style:normal'>Domain-Specific Languages</i>.
Addison-Wesley. 2010. ISBN 0321712943.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:11.0pt'>[Fowler lmax] Fowler, Martin. <i style='mso-bidi-font-style:
normal'>The LMAX Architecture</i>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:30.5pt;line-height:103%'><a
href="http://martinfowler.com/articles/lmax.html"><span style='color:#0000EE'>http://martinfowler.com/articles/lmax.html</span></a><a
href="http://martinfowler.com/articles/lmax.html"><span style='color:black;
text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.05pt;
margin-left:30.0pt;text-indent:-19.5pt'>[Fowler PoEAA] Fowler, Martin. <i
style='mso-bidi-font-style:normal'>Patterns of Enterprise Application
Architecture</i>. AddisonWesley. 2003. ISBN 0321127420.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:8.8pt;
margin-left:11.0pt'>[Fowler UML] Fowler, Martin. <i style='mso-bidi-font-style:
normal'>UML Distilled</i>. Addison-Wesley. 2003. ISBN 0321193687.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Gremlin] <a
href="https://github.com/tinkerpop/gremlin/wiki"><span style='color:#0000EE'>https://github.com/tinkerpop/gremlin/wiki</span></a><a
href="https://github.com/tinkerpop/gremlin/wiki"><span style='color:black;
text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Hadoop] <a
href="http://hadoop.apache.org/mapreduce"><span style='color:#0000EE'>http://hadoop.apache.org/mapreduce</span></a><a
href="http://hadoop.apache.org/mapreduce"><span style='color:black;text-decoration:
none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[HamsterDB] <a href="http://hamsterdb.com/"><span
style='color:#0000EE'>http://hamsterdb.com</span></a><a
href="http://hamsterdb.com/"><span style='color:black;text-decoration:none;
text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Hbase] <a href="http://hbase.apache.org/"><span
style='color:#0000EE'>http://hbase.apache.org</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:306.15pt;margin-bottom:
0in;margin-left:11.0pt;margin-bottom:.0001pt;line-height:155%'>[Hector] <a
href="https://github.com/rantav/hector"><span style='color:#0000EE'>https://github.com/rantav/hector</span></a>.
[Hive] <a href="http://hive.apache.org/"><span style='color:#0000EE'>http://hive.apache.org</span></a><a
href="http://hive.apache.org/"><span style='color:black;text-decoration:none;
text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:30.0pt;text-indent:-19.5pt'>[Hohpe and Woolf] Hohpe, Gregor and
Bobby Woolf. <i style='mso-bidi-font-style:normal'>Enterprise Integration
Patterns</i>. AddisonWesley. 2003. ISBN 0321200683.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:30.0pt;text-indent:-19.5pt'>[HTTP] Fielding, R., J. Gettys, J.
Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. <i
style='mso-bidi-font-style:normal'>Hypertext Transfer ProtocolHTTP/1.1</i>. <a
href="http://www.w3.org/Protocols/rfc2616/rfc2616.html"><span style='color:
#0000EE'>www.w3.org/Protocols/rfc2616/rfc2616.html</span></a><a
href="http://www.w3.org/Protocols/rfc2616/rfc2616.html"><span style='color:
black;text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Hypertable] <a
href="http://hypertable.org/"><span style='color:#0000EE'>http://hypertable.org</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Infinite Graph] <a
href="http://www.infinitegraph.com/"><span style='color:#0000EE'>www.infinitegraph.com</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[JSON] <a href="http://json.org/"><span
style='color:#0000EE'>http://json.org</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[LevelDB] <a
href="http://code.google.com/p/leveldb"><span style='color:#0000EE'>http://code.google.com/p/leveldb</span></a><a
href="http://code.google.com/p/leveldb"><span style='color:black;text-decoration:
none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Liquibase] <a
href="http://www.liquibase.org/"><span style='color:#0000EE'>www.liquibase.org</span></a><a
href="http://www.liquibase.org/"><span style='color:black;text-decoration:none;
text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Lucene] <a
href="http://lucene.apache.org/"><span style='color:#0000EE'>http://lucene.apache.org</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.0pt;
margin-left:29.25pt;text-indent:-19.5pt;line-height:103%'>[Lynch and Gilbert]
Lynch, Nancy and Seth Gilbert. <i style='mso-bidi-font-style:normal'>Brewers
conjecture and the feasibility of consistent, available, partition-tolerant web
services</i>. <a
href="http://lpd.epfl.ch/sgilbert/pubs/BrewersConjecture-SigAct.pdf"><span
style='color:#0000EE'>http://lpd.epfl.ch/sgilbert/pubs/BrewersConjecture-SigAct.pdf</span></a><a
href="http://lpd.epfl.ch/sgilbert/pubs/BrewersConjecture-SigAct.pdf"><span
style='color:black;text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Memcached] <a href="http://memcached.org/"><span
style='color:#0000EE'>http://memcached.org</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[MongoDB] <a href="http://www.mongodb.org/"><span
style='color:#0000EE'>www.mongodb.org</span></a><a
href="http://www.mongodb.org/"><span style='color:black;text-decoration:none;
text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.9pt;
margin-left:11.0pt;line-height:103%'>[Monitoring] <a
href="http://www.mongodb.org/display/DOCS/MongoDB+Monitoring+Service"><span
style='color:#0000EE'>www.mongodb.org/display/DOCS/MongoDB+Monitoring+Service</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:8.8pt;
margin-left:11.0pt'>[MyBatis Migrator] <a href="http://mybatis.org/"><span
style='color:#0000EE'>http://mybatis.org</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Neo4J] <a href="http://neo4j.org/"><span
style='color:#0000EE'>http://neo4j.org</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[NoSQL Debrief] <a
href="http://blog.oskarsson.nu/post/22996140866/nosql-debrief"><span
style='color:#0000EE'>http://blog.oskarsson.nu/post/22996140866/nosql-debrief</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[NoSQL Meetup] <a
href="http://nosql.eventbrite.com/"><span style='color:#0000EE'>http://nosql.eventbrite.com</span></a><a
href="http://nosql.eventbrite.com/"><span style='color:black;text-decoration:
none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Notes Storage Facility] <a
href="http://en.wikipedia.org/wiki/IBM_Lotus_Domino"><span style='color:#0000EE'>http://en.wikipedia.org/wiki/IBM_Lotus_Domino</span></a><a
href="http://en.wikipedia.org/wiki/IBM_Lotus_Domino"><span style='color:black;
text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[OpsCenter] <a
href="http://www.datastax.com/products/opscenter"><span style='color:#0000EE'>www.datastax.com/products/opscenter</span></a><a
href="http://www.datastax.com/products/opscenter"><span style='color:black;
text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[OrientDB] <a
href="http://www.orientdb.org/"><span style='color:#0000EE'>www.orientdb.org</span></a><a
href="http://www.orientdb.org/"><span style='color:black;text-decoration:none;
text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.0pt;
margin-left:10.25pt;line-height:103%'>[Oskarsson] <i style='mso-bidi-font-style:
normal'>Private Correspondence</i>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Pentaho] <a href="http://www.pentaho.com/"><span
style='color:#0000EE'>www.pentaho.com</span></a><a
href="http://www.pentaho.com/"><span style='color:black;text-decoration:none;
text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Pig] <a href="http://pig.apache.org/"><span
style='color:#0000EE'>http://pig.apache.org</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Pritchett] <a
href="http://www.infoq.com/interviews/dan-pritchett-ebay-architecture"><span
style='color:#0000EE'>www.infoq.com/interviews/dan-pritchett-ebay-architecture</span></a><a
href="http://www.infoq.com/interviews/dan-pritchett-ebay-architecture"><span
style='color:black;text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Project Voldemort] <a
href="http://project-voldemort.com/"><span style='color:#0000EE'>http://project-voldemort.com</span></a><a
href="http://project-voldemort.com/"><span style='color:black;text-decoration:
none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[RavenDB] <a href="http://ravendb.net/"><span
style='color:#0000EE'>http://ravendb.net</span></a><a href="http://ravendb.net/"><span
style='color:black;text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Redis] <a href="http://redis.io/"><span
style='color:#0000EE'>http://redis.io</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Rekon] <a
href="https://github.com/basho/rekon"><span style='color:#0000EE'>https://github.com/basho/rekon</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Riak] <a
href="http://wiki.basho.com/Riak.html"><span style='color:#0000EE'>http://wiki.basho.com/Riak.html</span></a><a
href="http://wiki.basho.com/Riak.html"><span style='color:black;text-decoration:
none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Solr] <a
href="http://lucene.apache.org/solr"><span style='color:#0000EE'>http://lucene.apache.org/solr</span></a><a
href="http://lucene.apache.org/solr"><span style='color:black;text-decoration:
none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Strozzi NoSQL] <a
href="http://www.strozzi.it/cgi-bin/CSA/tw7/I/en_US/NoSQL"><span
style='color:#0000EE'>www.strozzi.it/cgi-bin/CSA/tw7/I/en_US/NoSQL</span></a><a
href="http://www.strozzi.it/cgi-bin/CSA/tw7/I/en_US/NoSQL"><span
style='color:black;text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:9.0pt;
margin-left:30.0pt;text-indent:-19.5pt'>[Tanenbaum and Van Steen] Tanenbaum,
Andrew and Maarten Van Steen. <i style='mso-bidi-font-style:normal'>Distributed
Systems</i>. Prentice-Hall. 2007. ISBN 0132392275.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:11.0pt;line-height:103%'>[Terrastore] <a
href="http://code.google.com/p/terrastore"><span style='color:#0000EE'>http://code.google.com/p/terrastore</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:10.25pt;line-height:103%'>[Vogels] Vogels, Werner. <i
style='mso-bidi-font-style:normal'>Eventually ConsistentRevisited</i>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:30.5pt;line-height:103%'><a
href="http://www.allthingsdistributed.com/2008/12/eventually_consistent.html"><span
style='color:#0000EE'>www.allthingsdistributed.com/2008/12/eventually_consistent.html</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.1pt;
margin-left:30.0pt;text-indent:-19.5pt;line-height:103%'>[W<a
href="http://jim.webber.name/2011/03/22/ef4748c3-6459-40b6-bcfa-818960150e0f.aspx"><span
style='color:black;text-decoration:none;text-underline:none'>ebber Neo4J
Scaling] </span></a><a
href="http://jim.webber.name/2011/03/22/ef4748c3-6459-40b6-bcfa-818960150e0f.aspx"><span
style='color:#0000EE'>http://jim.webber.name/2011/03/22/ef4748c3-6459-40b6-bcfa818960150e0f.aspx</span></a><a
href="http://jim.webber.name/2011/03/22/ef4748c3-6459-40b6-bcfa-818960150e0f.aspx"><span
style='color:black;text-decoration:none;text-underline:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.9pt;
margin-left:11.0pt;line-height:103%'>[ZooKeeper] <a
href="http://zookeeper.apache.org/"><span style='color:#0000EE'>http://zookeeper.apache.org</span></a><a
href="http://zookeeper.apache.org/"><span style='color:black;text-decoration:
none;text-underline:none'>.</span></a></p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:19.45pt;margin-left:
-.25pt'>Index</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>A</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:209.15pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>ACID (Atomic, Consistent, Isolated, and
Durable) transactions, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>19 </span></u>in column-family databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>109 </span></u>in
graph databases, <u style='text-underline:#0000EE'><span style='color:#0000EE'>28</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>50</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>114</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>115 </span></u>in
relational databases, <u style='text-underline:#0000EE'><span style='color:
#0000EE'>10</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>26 </span></u>vs. BASE, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>56</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:333.6pt;margin-bottom:
.55pt;margin-left:-.25pt'>ad banners, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>108</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>109 </span></u>aggregate-oriented databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>14</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>19</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>23</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>147</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:333.6pt;margin-bottom:
.55pt;margin-left:-.25pt'>atomic updates in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>50</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>61</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:333.6pt;margin-bottom:
.55pt;margin-left:-.25pt'>disadvantages of, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>30</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:333.6pt;margin-bottom:
.55pt;margin-left:-.25pt'>no ACID transactions in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>50</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:333.6pt;margin-bottom:
.55pt;margin-left:-.25pt'>performance of, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>149</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:333.6pt;margin-bottom:
.55pt;margin-left:-.25pt'>vs. graph databases, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>28</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:408.6pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>aggregates, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>14</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>23 </span></u>changing structure of, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>98</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>132</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:408.6pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>modeling, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>31</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:408.6pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>real-time analytics with, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>33</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:408.6pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>updating, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>26</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>agile methods, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>123</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Amazon, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>9</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:383.85pt;margin-bottom:
.55pt;margin-left:-.75pt;text-indent:19.5pt'><i style='mso-bidi-font-style:
normal'>See also</i> <u style='text-underline:#0000EE'><span style='color:#0000EE'>DynamoDB</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>SimpleDB </span></u>analytics
counting website visitors for, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>108 </span></u>of historic information, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>144 </span></u>real-time,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>33</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>98</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:378.6pt;margin-bottom:
.6pt;margin-left:-.25pt'>Apache Pig language, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>76 </span></u>Apache ZooKeeper library, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>104</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>115 </span></u>application
databases, <u style='text-underline:#0000EE'><span style='color:#0000EE'>7</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>146 </span></u>updating
materialized views in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>31</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:377.85pt;margin-bottom:
3.05pt;margin-left:-.25pt'>arcs (graph databases). <i style='mso-bidi-font-style:
normal'>See</i> <u style='text-underline:#0000EE'><span style='color:#0000EE'>edges
</span></u>atomic cross-document operations, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>98 </span></u>atomic rebalancing, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>58 </span></u>atomic transactions, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>92</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>104</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:377.85pt;margin-bottom:
3.05pt;margin-left:-.25pt'>atomic updates, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>50</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>61</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:377.85pt;margin-bottom:
3.05pt;margin-left:-.25pt'>automated failovers, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>94</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:377.85pt;margin-bottom:
3.05pt;margin-left:-.25pt'>automated merges, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>48</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:377.85pt;margin-bottom:
3.05pt;margin-left:-.25pt'>automated rollbacks, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>145</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:377.85pt;margin-bottom:
3.05pt;margin-left:-.25pt'>auto-sharding, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>39</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>availability, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>53 </span></u>in column-family databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>104</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>105 </span></u>in
document databases, <u style='text-underline:#0000EE'><span style='color:#0000EE'>93</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>in graph databases, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>115</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>vs. consistency, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>54</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.45in;margin-bottom:
11.05pt;margin-left:-.75pt;text-indent:19.5pt'><i style='mso-bidi-font-style:
normal'>See also</i> <u style='text-underline:#0000EE'><span style='color:#0000EE'>CAP
theorem </span></u>averages, calculating, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>72</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>B</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>backward compatibility, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>126</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>131</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>BASE (Basically Available, Soft state, Eventual
consistency), <u style='text-underline:#0000EE'><span style='color:#0000EE'>56</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:447.65pt;margin-bottom:
.55pt;margin-left:-.25pt'>Berkeley DB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>81</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:447.65pt;margin-bottom:
.55pt;margin-left:-.25pt'>BigTable DB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>9</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>21</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>22 </span></u>bit-mapped indexes, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>106 </span></u>blogging, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>108</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Blueprints property graph, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>115</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Brewer, Eric, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>53</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:364.35pt;margin-bottom:
.55pt;margin-left:-.25pt'>Brewers Conjecture. <i style='mso-bidi-font-style:
normal'>See</i> <u style='text-underline:#0000EE'><span style='color:#0000EE'>CAP
theorem </span></u>buckets (Riak), <u style='text-underline:#0000EE'><span
style='color:#0000EE'>82 </span></u>default values for consistency for, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>84</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:364.35pt;margin-bottom:
.55pt;margin-left:-.25pt'>domain, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>83 </span></u>storing all data together in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>82</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.05pt;
margin-left:-.25pt'>business transactions, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>61</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>C</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:440.8pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>caching performance of, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>39</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>137</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:440.8pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>stale data in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>50</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Cages library, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>104</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:171.7pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>CAP (Consistency, Availability, and
Partition tolerance) theorem, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>53</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>56 </span></u>for document databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>93</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:171.7pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>for Riak, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>86</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>CAS (compare-and-set) operations, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>62</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:397.35pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>Cassandra DB, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>10</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>21</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>22</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>99</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>109 </span></u>availability
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>104</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>105 </span></u>column
families in: commands for, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>105</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>106 </span></u>standard, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>101 </span></u>super, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>101</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>102</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:20.0pt'>columns in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>100</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:405.6pt;margin-bottom:
.55pt;margin-left:35.0pt'>expiring, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>108</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>109 </span></u>indexing, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>106</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>107 </span></u>reading, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>107 </span></u>super, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>101</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:435.55pt;margin-bottom:
.55pt;margin-left:20.0pt'>compaction in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>103 </span></u>consistency in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>103</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>104 </span></u>ETL tools for, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>139 </span></u>hinted
handoff in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>104 </span></u>keyspaces
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>102</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>104 </span></u>memtables
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>103 </span></u>queries
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>105</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>107</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:435.55pt;margin-bottom:
.55pt;margin-left:20.0pt'>repairs in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>103</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>104 </span></u>replication factor in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>103 </span></u>scaling
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>107 </span></u>SSTables
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>103 </span></u>timestamps
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>100 </span></u>transactions
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>104 </span></u>wide/skinny
rows in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>23</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:422.1pt;margin-bottom:
.55pt;margin-left:-.25pt'>clients, processing on, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>67 </span></u>Clojure language, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>145</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:422.1pt;margin-bottom:
.55pt;margin-left:-.25pt'>cloud computing, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>149 </span></u>clumping, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>39 </span></u>clusters, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>8</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>10</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>67</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>72</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>76</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>149 </span></u>in file systems, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>8 </span></u>in Riak, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>87 </span></u>resiliency of, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>8</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:236.9pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>column-family databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>21</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>23</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>99</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>109 </span></u>ACID
transactions in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>109
</span></u>columns for materialized views in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>31 </span></u>combining peer-to-peer replication and
sharding in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>43</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>44 </span></u>consistency
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>103</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>104 </span></u>modeling
for, <u style='text-underline:#0000EE'><span style='color:#0000EE'>34 </span></u>performance
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>103 </span></u>schemalessness
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>28 </span></u>vs.
key-value databases, <u style='text-underline:#0000EE'><span style='color:#0000EE'>21
</span></u>wide/skinny rows in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>23</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:398.1pt;margin-bottom:
.55pt;margin-left:-.25pt'>combinable reducers, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>70</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>71 </span></u>compaction (Cassandra), <u
style='text-underline:#0000EE'><span style='color:#0000EE'>103 </span></u>compatibility,
backward, <u style='text-underline:#0000EE'><span style='color:#0000EE'>126</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>131 </span></u>concurrency,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>145 </span></u>in
file systems, <u style='text-underline:#0000EE'><span style='color:#0000EE'>141</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:398.1pt;margin-bottom:
.55pt;margin-left:-.25pt'>in relational databases, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>4</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:398.1pt;margin-bottom:
.55pt;margin-left:-.25pt'>offline, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>62</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:419.85pt;margin-bottom:
.55pt;margin-left:-.25pt'>conditional updates, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>48</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>62</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>63 </span></u>conflicts key, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>82</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:419.85pt;margin-bottom:
.55pt;margin-left:-.25pt'>read-write, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>49</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>50 </span></u>resolving, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>64 </span></u>write-write, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>47</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>48</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>64</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>consistency, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>47</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>59 </span></u>eventual, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>50</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>84 </span></u>in
column-family databases, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>103</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>104 </span></u>in graph databases, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>114</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>in master-slave replication, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>52</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>in MongoDB, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>91</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>logical, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>50 </span></u>optimistic/pessimistic, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>48 </span></u>read, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>49</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>52</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>56 </span></u>read-your-writes,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>52 </span></u>relaxing,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>52</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>56 </span></u>replication,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>50</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>session, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>52</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>63</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>trading off, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>57</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>update, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>47</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>56</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>61</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>vs. availability, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>54</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>write, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>92</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:406.25pt;margin-bottom:
.55pt;margin-left:-.75pt;text-indent:19.5pt'><i style='mso-bidi-font-style:
normal'>See also</i> <u style='text-underline:#0000EE'><span style='color:#0000EE'>CAP
theorem </span></u>content hashes, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>62</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>63</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>content management systems, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>98</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>108</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:430.3pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>CouchDB, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>10</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>91 </span></u>conditional updates in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>63</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:430.3pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>replica sets in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>94</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>counters, for version stamps, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>62</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>63</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>CQL (Cassandra Query Language), <u style='text-underline:
#0000EE'><span style='color:#0000EE'>10</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>106</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:257.9pt;margin-bottom:
.55pt;margin-left:-.25pt'>CQRS (Command Query Responsibility Segregation), <u
style='text-underline:#0000EE'><span style='color:#0000EE'>143 </span></u>cross-document
operations, <u style='text-underline:#0000EE'><span style='color:#0000EE'>98 </span></u>C-Store
DB, <u style='text-underline:#0000EE'><span style='color:#0000EE'>21</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.05pt;
margin-left:-.25pt'>Cypher language, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>115</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>119</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>D</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:356.85pt;margin-bottom:
3.05pt;margin-left:-.25pt'>Data Mapper and Repository pattern, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>151 </span></u>data
models, <u style='text-underline:#0000EE'><span style='color:#0000EE'>13</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>25 </span></u>aggregate-oriented,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>14</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>23</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>30</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:356.85pt;margin-bottom:
3.05pt;margin-left:-.25pt'>document, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>20 </span></u>key-value, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>20</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:20.0pt'>relational, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>13</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>14</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:426.75pt;margin-bottom:
.55pt;margin-left:-.25pt'>data redundancy, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>94 </span></u>databases</p>

<p class=MsoNormal style='margin-top:0in;margin-right:393.6pt;margin-bottom:
.55pt;margin-left:20.0pt'>choosing, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>7</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>147</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>152 </span></u>deploying, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>139</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:375.6pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>encapsulating in explicit layer, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>151 </span></u>NoSQL,
definition of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>10</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>11 </span></u>shared
integration of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>4</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>6</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Datastax Ops Center, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>139</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:440.8pt;margin-bottom:
.55pt;margin-left:-.25pt'>DBDeploy framework, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>125 </span></u>DBMaintain tool, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>126 </span></u>deadlocks, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>48 </span></u>demo
access, <u style='text-underline:#0000EE'><span style='color:#0000EE'>108</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:373.35pt;margin-bottom:
.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>Dependency Network pattern, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>77 </span></u>deployment
complexity, <u style='text-underline:#0000EE'><span style='color:#0000EE'>139 </span></u>Dijkstras
algorithm, <u style='text-underline:#0000EE'><span style='color:#0000EE'>118 </span></u>disaster
recovery, <u style='text-underline:#0000EE'><span style='color:#0000EE'>94 </span></u>distributed
file systems, <u style='text-underline:#0000EE'><span style='color:#0000EE'>76</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>141</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:373.35pt;margin-bottom:
.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>distributed version control systems, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>48</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:373.35pt;margin-bottom:
.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>version stamps in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>64</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>distribution models, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>37</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>43</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:257.9pt;margin-bottom:
.55pt;margin-left:-.75pt;text-indent:19.5pt'><i style='mso-bidi-font-style:
normal'>See also</i> <u style='text-underline:#0000EE'><span style='color:#0000EE'>replications</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>sharding</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>single server
approach </span></u>document databases, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>20</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>23</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>89</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>98 </span></u>availability in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>93 </span></u>embedding child documents
into, <u style='text-underline:#0000EE'><span style='color:#0000EE'>90 </span></u>indexes
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>25 </span></u>master-slave
replication in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>93
</span></u>performance in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>91 </span></u>queries in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>25</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>94</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>95</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:257.9pt;margin-bottom:
.55pt;margin-left:-.75pt;text-indent:19.5pt'>replica sets in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>94 </span></u>scaling
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>95 </span></u>schemalessness
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>28</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>98</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:359.85pt;margin-bottom:
.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:19.5pt;line-height:103%'>XML support in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:359.85pt;margin-bottom:
.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:19.5pt;line-height:103%'>domain buckets (Riak), <u
style='text-underline:#0000EE'><span style='color:#0000EE'>83 </span></u>Domain-Driven
Design, <u style='text-underline:#0000EE'><span style='color:#0000EE'>14 </span></u>DTDs
(Document Type Definitions), <u style='text-underline:#0000EE'><span
style='color:#0000EE'>146 </span></u>durability, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>56</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>57</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:412.35pt;margin-bottom:
11.05pt;margin-left:-.25pt'>DynamoDB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>9</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>81</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>100 </span></u>shopping carts in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>55 </span></u>Dynomite DB, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>10</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>E</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:404.15pt;margin-bottom:
.55pt;margin-left:-.25pt'>early prototypes, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>109 </span></u>e-commerce</p>

<p class=MsoNormal style='margin-top:0in;margin-right:388.35pt;margin-bottom:
.55pt;margin-left:20.0pt'>data modeling for, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>14 </span></u>flexible schemas for, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>98 </span></u>polyglot persistence of, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>133</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>138 </span></u>shopping
carts in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>55</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>85</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>87</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:407.85pt;margin-bottom:
.55pt;margin-left:-.25pt'>edges (graph databases), <u style='text-underline:
#0000EE'><span style='color:#0000EE'>26</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>111 </span></u>eligibility rules, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>26 </span></u>enterprises</p>

<p class=MsoNormal style='margin-top:0in;margin-right:320.1pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>commercial support of NoSQL for, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>138</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>139 </span></u>concurrency
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>4 </span></u>DB
as backing store for, <u style='text-underline:#0000EE'><span style='color:
#0000EE'>4 </span></u>event logging in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>97 </span></u>integration in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>4 </span></u>polyglot persistence in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>138</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>139 </span></u>security
of data in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>139</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:427.3pt;margin-bottom:
.55pt;margin-left:-.25pt'>error handling, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>4</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>145 </span></u>etags, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>62 </span></u>ETL tools, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>139 </span></u>Evans, Eric, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>10 </span></u>event logging, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>97</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>107</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>108 </span></u>event
sourcing, <u style='text-underline:#0000EE'><span style='color:#0000EE'>138</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>142</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>144 </span></u>eventual
consistency, <u style='text-underline:#0000EE'><span style='color:#0000EE'>50 </span></u>in
Riak, <u style='text-underline:#0000EE'><span style='color:#0000EE'>84</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.05pt;
margin-left:-.25pt'>expiring usage, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>108</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>109</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>F</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:397.35pt;margin-bottom:
.55pt;margin-left:-.25pt'>failovers, automated, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>94 </span></u>file systems, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>141 </span></u>as backing store for RDBMS,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>3 </span></u>cluster-aware,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>8 </span></u>concurrency
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>141 </span></u>distributed,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>76</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>141 </span></u>performance
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>141</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:397.35pt;margin-bottom:
.55pt;margin-left:-.25pt'>queries in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>141</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:437.8pt;margin-bottom:
11.05pt;margin-left:18.75pt;text-indent:-19.5pt'>FlockDB, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>113 </span></u>data model of, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>27 </span></u>node
distribution in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>115</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>G</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Gilbert, Seth, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>53</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Google, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>9</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:20.0pt'>Google BigTable. <i style='mso-bidi-font-style:normal'>See</i>
<u style='text-underline:#0000EE'><span style='color:#0000EE'>BigTable</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:353.85pt;margin-bottom:
.55pt;margin-left:-.75pt;text-indent:19.5pt'>Google File System, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>141 </span></u>graph
databases, <u style='text-underline:#0000EE'><span style='color:#0000EE'>26</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>28</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>111</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>121</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>148</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:353.85pt;margin-bottom:
.55pt;margin-left:-.75pt;text-indent:19.5pt'>ACID transactions in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>28</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>50</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>114</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>115 </span></u>aggregate-ignorance
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>19 </span></u>availability
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>115 </span></u>consistency
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>114</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:353.85pt;margin-bottom:
.55pt;margin-left:-.75pt;text-indent:19.5pt'>creating, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>113</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:353.85pt;margin-bottom:
.55pt;margin-left:-.75pt;text-indent:19.5pt'>edges (arcs) in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>26</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>111 </span></u>held
entirely in memory, <u style='text-underline:#0000EE'><span style='color:#0000EE'>119
</span></u>master-slave replication in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>115 </span></u>migrations in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>131 </span></u>modeling for, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>35 </span></u>nodes
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>26</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>111</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>117 </span></u>performance
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>149</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:353.85pt;margin-bottom:
.55pt;margin-left:-.75pt;text-indent:19.5pt'>properties in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>111</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:353.85pt;margin-bottom:
.55pt;margin-left:-.75pt;text-indent:19.5pt'>queries in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>115</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>119 </span></u>relationships in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>111</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>121 </span></u>scaling
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>119 </span></u>schemalessness
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>28 </span></u>single
server configuration of, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>38 </span></u>traversing, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>111</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>117 </span></u>vs. aggregate databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>28 </span></u>vs.
relational databases, <u style='text-underline:#0000EE'><span style='color:
#0000EE'>27</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>112 </span></u>wrapping into service, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>136</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Gremlin language, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>115</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.05pt;
margin-left:-.25pt'>GUID (Globally Unique Identifier), <u style='text-underline:
#0000EE'><span style='color:#0000EE'>62</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>H</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:419.1pt;margin-bottom:
.55pt;margin-left:-.25pt'>Hadoop project, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>67</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>76</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>141 </span></u>HamsterDB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>81 </span></u>hash tables, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>62</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>63</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>81 </span></u>HBase DB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>10</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>21</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>22</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>99</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>100</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:431.05pt;margin-bottom:
.55pt;margin-left:-.25pt'>Hector client, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>105 </span></u>Hibernate framework, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>5</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>147 </span></u>hinted handoff, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>104 </span></u>hive
DB, <u style='text-underline:#0000EE'><span style='color:#0000EE'>76 </span></u>hot
backup, <u style='text-underline:#0000EE'><span style='color:#0000EE'>40</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>42 </span></u>hotel
booking, <u style='text-underline:#0000EE'><span style='color:#0000EE'>4</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>55</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:370.35pt;margin-bottom:
3.05pt;margin-left:18.75pt;text-indent:-19.5pt'>HTTP (Hypertext Transfer
Protocol), <u style='text-underline:#0000EE'><span style='color:#0000EE'>7 </span></u>interfaces
based on, <u style='text-underline:#0000EE'><span style='color:#0000EE'>85 </span></u>updating
with, <u style='text-underline:#0000EE'><span style='color:#0000EE'>62</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:431.1pt;margin-bottom:
0in;margin-left:-.25pt;margin-bottom:.0001pt;line-height:146%'>Hypertable DB, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>10</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>99</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>100 </span></u><b
style='mso-bidi-font-weight:normal'><span style='font-size:17.5pt;mso-bidi-font-size:
11.0pt;line-height:146%'>I</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:442.3pt;margin-bottom:
.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>iBATIS, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>5</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>147 </span></u>impedance mismatch, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>5</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>12 </span></u>inconsistency in shopping
carts, <u style='text-underline:#0000EE'><span style='color:#0000EE'>55 </span></u>of
reads, <u style='text-underline:#0000EE'><span style='color:#0000EE'>49 </span></u>of
updates, <u style='text-underline:#0000EE'><span style='color:#0000EE'>56 </span></u>window
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>50</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>51</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>56</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>indexes</p>

<p class=MsoNormal style='margin-top:0in;margin-right:428.05pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>bit-mapped, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>106 </span></u>in document databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>25 </span></u>stale
data in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>138</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:428.05pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>updating, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>138</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:407.85pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>Infinite Graph DB, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>113 </span></u>data
model of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>27 </span></u>node
distribution in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>114</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>115</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:404.85pt;margin-bottom:
11.05pt;margin-left:-.25pt'>initial tech spikes, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>109 </span></u>integration databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>6</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>11 </span></u>interoperability,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>7</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>J</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.05pt;
margin-left:-.25pt'>JSON (JavaScript Object Notation), <u style='text-underline:
#0000EE'><span style='color:#0000EE'>7</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>94</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>95</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>K</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>keys (key-value databases)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:422.85pt;margin-bottom:
.55pt;margin-left:20.0pt'>composite, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>74 </span></u>conflicts of, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>82</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:422.85pt;margin-bottom:
.55pt;margin-left:20.0pt'>designing, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>85 </span></u>expiring, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>85</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:422.85pt;margin-bottom:
.55pt;margin-left:20.0pt'>grouping into partitions, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>70</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:349.45pt;margin-bottom:
.55pt;margin-left:-.25pt'>keyspaces (Cassandra), <u style='text-underline:#0000EE'><span
style='color:#0000EE'>102</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>104 </span></u>key-value databases, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>20</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>23</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>81</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>88</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:389.1pt;margin-bottom:
11.05pt;margin-left:20.0pt'>consistency of, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>83</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>84</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:389.1pt;margin-bottom:
11.05pt;margin-left:20.0pt'>modeling for, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>31</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>33 </span></u>no multiple key operations in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>88</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:389.1pt;margin-bottom:
11.05pt;margin-left:20.0pt'>schemalessness of, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>28 </span></u>sharding in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>86 </span></u>structure of values in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>86 </span></u>transactions
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>84</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>88 </span></u>vs.
column-family databases, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>21 </span></u>XML support in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>L</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:400.5pt;margin-bottom:
.55pt;margin-left:-.25pt'>Liquibase tool, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>126 </span></u>location-based services, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>120 </span></u>locks</p>

<p class=MsoNormal style='margin-top:0in;margin-right:489.55pt;margin-bottom:
.55pt;margin-left:20.0pt'>dead, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>48 </span></u>offline, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>52</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>lost updates, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>47</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Lotus DB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>91</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Lucene library, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>85</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>88</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>116</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.05pt;
margin-left:-.25pt'>Lynch, Nancy, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>53</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>M</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:380.1pt;margin-bottom:
.55pt;margin-left:-.25pt'>MapReduce framework, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>67 </span></u>map-reduce pattern, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>67</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>77</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:380.1pt;margin-bottom:
.55pt;margin-left:-.25pt'>calculations with, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>72</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:380.1pt;margin-bottom:
.55pt;margin-left:-.25pt'>incremental, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>31</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>76</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>77</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:380.1pt;margin-bottom:
.55pt;margin-left:-.25pt'>maps in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>68 </span></u>materialized views in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>76 </span></u>partitions in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>70 </span></u>reusing
intermediate outputs in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>76 </span></u>stages for, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>73</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>76</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:412.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>master-slave replication, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>40</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>42 </span></u>appointing
masters in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>41</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>57 </span></u>combining
with sharding, <u style='text-underline:#0000EE'><span style='color:#0000EE'>43
</span></u>consistency of, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>52 </span></u>in document databases, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>93 </span></u>in graph databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>115</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:412.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>version stamps in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>63</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>materialized views, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>30</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:422.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>in map-reduce, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>76 </span></u>updating, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>31</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:414.6pt;margin-bottom:
.55pt;margin-left:-.25pt'>Memcached DB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>81</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>87 </span></u>memory images, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>144</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>145 </span></u>memtables (Cassandra), <u
style='text-underline:#0000EE'><span style='color:#0000EE'>103 </span></u>merges,
automated, <u style='text-underline:#0000EE'><span style='color:#0000EE'>48 </span></u>Microsoft
SQL Server, <u style='text-underline:#0000EE'><span style='color:#0000EE'>8 </span></u>migrations,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>123</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>132</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:406.35pt;margin-bottom:
3.15pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>during development, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>124</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>126 </span></u>in graph databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>131 </span></u>in
legacy projects, <u style='text-underline:#0000EE'><span style='color:#0000EE'>126</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>128</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:380.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>in object-oriented databases, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:380.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>in schemaless databases, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>128</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>132 </span></u>incremental, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>130 </span></u>transition
phase of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>126</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>128</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>mobile apps, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>131</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:385.35pt;margin-bottom:
2.0pt;margin-left:18.75pt;text-indent:-19.5pt'>MongoDB, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>10</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>91</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>97 </span></u>collections in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>91 </span></u>consistency
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>91 </span></u>databases
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>91 </span></u>ETL
tools for, <u style='text-underline:#0000EE'><span style='color:#0000EE'>139 </span></u>queries
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>94</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>95</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:385.35pt;margin-bottom:
2.0pt;margin-left:18.75pt;text-indent:-19.5pt'>replica sets in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>91</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>93</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>96 </span></u>schema
migrations in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>128</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>131 </span></u>sharding
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>96 </span></u><span
style='font-size:12.0pt;mso-bidi-font-size:11.0pt;line-height:104%;font-family:
"Courier New";mso-fareast-font-family:"Courier New"'>slaveOk</span> parameter
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>91</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>92</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>96</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:385.35pt;margin-bottom:
2.0pt;margin-left:18.75pt;text-indent:-19.5pt'>terminology in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>89</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:331.1pt;margin-bottom:
.75pt;margin-left:-.75pt;text-indent:19.5pt'><span style='font-size:12.0pt;
mso-bidi-font-size:11.0pt;line-height:104%;font-family:"Courier New";
mso-fareast-font-family:"Courier New"'>WriteConcern</span> parameter in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>92 </span></u>MongoDB
Monitoring Service, <u style='text-underline:#0000EE'><span style='color:#0000EE'>139</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:391.9pt;margin-bottom:
11.05pt;margin-left:-.25pt'>MyBatis Migrator tool, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>126 </span></u>MySQL DB, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>53</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>119</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>N</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Neo4J DB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>113</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>118</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:398.85pt;margin-bottom:
.55pt;margin-left:20.0pt'>ACID transactions in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>114</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>115 </span></u>availability in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>115 </span></u>creating graphs in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>113 </span></u>data
model of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>27 </span></u>replicated
slaves in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>115 </span></u>service
wrapping in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>136</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:380.1pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>nodes (graph databases), <u
style='text-underline:#0000EE'><span style='color:#0000EE'>26</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>111 </span></u>distributed
storage for, <u style='text-underline:#0000EE'><span style='color:#0000EE'>114 </span></u>finding
paths between, <u style='text-underline:#0000EE'><span style='color:#0000EE'>117
</span></u>indexing properties of, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>115</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>116</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>nonuniform data, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>10</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>28</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>30</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:339.6pt;margin-bottom:
11.15pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>NoSQL databases advantages of, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>12 </span></u>definition
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>10</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>11 </span></u>lack
of support for transactions in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>10</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>61 </span></u>running of clusters, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>10 </span></u>schemalessness of, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>10</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>O</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:405.6pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>object-oriented databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>5</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:405.6pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>migrations in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>146 </span></u>vs. relational databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>6</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:426.65pt;margin-bottom:
.55pt;margin-left:-.25pt'>offline concurrency, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>62 </span></u>offline locks, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>52</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Optimistic Offline Lock, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>62</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Oracle DB</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.8in;margin-bottom:.55pt;
margin-left:20.0pt'>redo log in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>104 </span></u>terminology in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>81</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>89</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Oracle RAC DB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>8</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>OrientDB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>91</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>113</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>ORM (Object-Relational Mapping) frameworks, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>5</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>6</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>147</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.05pt;
margin-left:-.25pt'>Oskarsson, Johan, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>9</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>P</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>partition tolerance, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>53</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>54</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:366.6pt;margin-bottom:
.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:19.5pt;line-height:103%'><i style='mso-bidi-font-style:normal'>See
also</i> <u style='text-underline:#0000EE'><span style='color:#0000EE'>CAP
theorem </span></u>partitioning, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>69</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>70 </span></u>peer-to-peer replication, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>42</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>43 </span></u>durability
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>58 </span></u>inconsistency
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>43 </span></u>version
stamps in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>63</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>64 </span></u>Pentaho
tool, <u style='text-underline:#0000EE'><span style='color:#0000EE'>139 </span></u>performance
and sharding, <u style='text-underline:#0000EE'><span style='color:#0000EE'>39 </span></u>and
transactions, <u style='text-underline:#0000EE'><span style='color:#0000EE'>53 </span></u>binary
protocols for, <u style='text-underline:#0000EE'><span style='color:#0000EE'>7 </span></u>caching
for, <u style='text-underline:#0000EE'><span style='color:#0000EE'>39</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>137 </span></u>data-access,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>149</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>150 </span></u>in
aggregate-oriented databases, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>149</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:366.6pt;margin-bottom:
.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:19.5pt;line-height:103%'>in column-family databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>103 </span></u>in
document databases, <u style='text-underline:#0000EE'><span style='color:#0000EE'>91
</span></u>in graph databases, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>149</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:366.6pt;margin-bottom:
.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:19.5pt;line-height:103%'>responsiveness of, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>48 </span></u>tests for, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>149</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:371.1pt;margin-bottom:
.55pt;margin-left:-.25pt'>pipes-and-filters approach, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>73 </span></u>polyglot persistence, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>11</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>133</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>139</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>148</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:379.35pt;margin-bottom:
.55pt;margin-left:20.0pt'>and deployment complexity, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>139 </span></u>in enterprises, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>138</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>139</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:395.1pt;margin-bottom:
11.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>polyglot programming, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>133</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>134 </span></u>processing, on
clients/servers, <u style='text-underline:#0000EE'><span style='color:#0000EE'>67
</span></u>programmer productivity, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>147</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>149 </span></u>purchase orders, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>25</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>Q</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>queries</p>

<p class=MsoNormal style='margin-top:0in;margin-right:356.85pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>against varying aggregate structure, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>98 </span></u>by
data, <u style='text-underline:#0000EE'><span style='color:#0000EE'>88</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>94 </span></u>by
key, <u style='text-underline:#0000EE'><span style='color:#0000EE'>84</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>86 </span></u>for
files, <u style='text-underline:#0000EE'><span style='color:#0000EE'>141 </span></u>in
column-family databases, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>105</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>107 </span></u>in document databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>25</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>94</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>95 </span></u>in
graph databases, <u style='text-underline:#0000EE'><span style='color:#0000EE'>115</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>119</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:356.85pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>precomputed and cached, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>31 </span></u>via views, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>94</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:499.3pt;margin-bottom:
11.05pt;margin-left:18.75pt;text-indent:-19.5pt'>quorums, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>57</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>59 </span></u>read, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>58 </span></u>write, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>58</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>84</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>R</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Rails Active Record framework, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>147</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:343.35pt;margin-bottom:
.6pt;margin-left:18.75pt;text-indent:-19.5pt'>RavenDB, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>91 </span></u>atomic cross-document
operations in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>98</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:343.35pt;margin-bottom:
.6pt;margin-left:18.75pt;text-indent:-19.5pt'>replica sets in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>94</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:343.35pt;margin-bottom:
.6pt;margin-left:18.75pt;text-indent:-19.5pt'>transactions in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>92</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:369.2pt;margin-bottom:
.65pt;margin-left:.5pt;line-height:103%'>RDBMS. <i style='mso-bidi-font-style:
normal'>See</i> <u style='text-underline:#0000EE'><span style='color:#0000EE'>relational
databases </span></u>reads</p>

<p class=MsoNormal style='margin-top:0in;margin-right:409.35pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>consistency of, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>49</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>52</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>56</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>58 </span></u>horizontal scaling for, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>94</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>96 </span></u>inconsistent,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>49 </span></u>multiple
nodes for, <u style='text-underline:#0000EE'><span style='color:#0000EE'>143 </span></u>performance
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>52 </span></u>quorums
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>58 </span></u>repairs
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>103 </span></u>resilience
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>40</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>41 </span></u>separating
from writes, <u style='text-underline:#0000EE'><span style='color:#0000EE'>41 </span></u>stale,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>56</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:339.75pt;margin-bottom:
.55pt;margin-left:-.25pt'>read-write conflicts, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>49</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>50 </span></u>read-your-writes consistency, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>52</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:352.35pt;margin-bottom:
.55pt;margin-left:-.25pt'>Real Time Analytics, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>33 </span></u>Real Time BI, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>33 </span></u>rebalancing, atomic, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>58 </span></u>recommendation
engines, <u style='text-underline:#0000EE'><span style='color:#0000EE'>26</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>35</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>121</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>138</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:3.05pt;
margin-left:-.25pt'>Redis DB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>81</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>83</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:483.55pt;margin-bottom:
.55pt;margin-left:-.25pt'>redo log, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>104 </span></u>reduce functions, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>69</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:20.0pt'>combinable, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>70</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>71</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:333.6pt;margin-bottom:
.55pt;margin-left:-.25pt'>regions. <i style='mso-bidi-font-style:normal'>See</i>
<u style='text-underline:#0000EE'><span style='color:#0000EE'>map-reduce
pattern</span></u>, partitions in Rekon browser for Riak, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>139 </span></u>relational databases
(RDBMS), <u style='text-underline:#0000EE'><span style='color:#0000EE'>13</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>17</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:339.6pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>advantages of, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>3</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>5</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>7</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>8</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>150</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:339.6pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>aggregate-ignorance of, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>19 </span></u>backing store in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>3 </span></u>clustered,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>8 </span></u>columns
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>13</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>90 </span></u>concurrency
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>4 </span></u>defining
schemas for, <u style='text-underline:#0000EE'><span style='color:#0000EE'>28 </span></u>impedance
mismatch in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>5</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>12 </span></u>licensing
costs of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>8 </span></u>main
memory in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>3 </span></u>modifying
multiple records at once in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>26 </span></u>partitions in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>96 </span></u>persistence in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>3 </span></u>relations
(tables) in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>5</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>13 </span></u>schemas
for, <u style='text-underline:#0000EE'><span style='color:#0000EE'>29</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>30</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>123</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>128 </span></u>security
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>7 </span></u>sharding
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>8 </span></u>simplicity
of relationships in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>112</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:339.6pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>strong consistency of, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>47 </span></u>terminology in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>81</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>89 </span></u>transactions
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>4</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>26</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>92 </span></u>tuples
(rows) in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>5</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>13</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>14 </span></u>views
in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>30 </span></u>vs.
graph databases, <u style='text-underline:#0000EE'><span style='color:#0000EE'>27</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>112</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:339.6pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>vs. object-oriented databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>6</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:424.3pt;margin-bottom:
.55pt;margin-left:-.75pt;text-indent:19.5pt'>XML support in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:424.3pt;margin-bottom:
.55pt;margin-left:-.75pt;text-indent:19.5pt'>relationships, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>25</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>111</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>121 </span></u>dangling,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>114 </span></u>direction
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>113</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>116</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>118 </span></u>in
RDBMS, <u style='text-underline:#0000EE'><span style='color:#0000EE'>112 </span></u>properties
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>113</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>115 </span></u>traversing,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>111</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>117 </span></u>RelaxNG,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:401.85pt;margin-bottom:
.55pt;margin-left:-.25pt'>replica sets, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>91</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>93</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>96 </span></u>replication factor, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>58 </span></u>in column-family databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>103</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:401.85pt;margin-bottom:
.55pt;margin-left:-.25pt'>in Riak, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>84</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:415.35pt;margin-bottom:
.65pt;margin-left:18.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-19.5pt;line-height:103%'>replications, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>37 </span></u>combining with sharding, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>43 </span></u>consistency
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>42</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>50 </span></u>durability
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>57 </span></u>over
clusters, <u style='text-underline:#0000EE'><span style='color:#0000EE'>149 </span></u>performance
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>39 </span></u>version
stamps in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>63</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>64</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:234.65pt;margin-bottom:
.65pt;margin-left:0in;text-indent:19.5pt;line-height:103%'><i style='mso-bidi-font-style:
normal'>See also</i> <u style='text-underline:#0000EE'><span style='color:#0000EE'>master-slave
replication</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>peer-to-peer replication </span></u>resilience and
sharding, <u style='text-underline:#0000EE'><span style='color:#0000EE'>39 </span></u>read,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>40</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>41</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>responsiveness, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>48</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>Riak DB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>81</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>83</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:413.1pt;margin-bottom:
11.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:19.5pt;line-height:103%'>clusters in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>87 </span></u>controlling CAP in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>86 </span></u>eventual
consistency in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>84
</span></u>HTTP-based interface of, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>85 </span></u>link-walking in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>25 </span></u>partial retrieval in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>25 </span></u>replication
factor in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>84 </span></u>service
wrapping in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>136</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:413.1pt;margin-bottom:
11.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:19.5pt;line-height:103%'>terminology in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>81 </span></u>transactions in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>84 </span></u>write
tolerance of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>84 </span></u>Riak
Search, <u style='text-underline:#0000EE'><span style='color:#0000EE'>85</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>88</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:413.1pt;margin-bottom:
11.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:19.5pt;line-height:103%'>rich domain model, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>113</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:413.1pt;margin-bottom:
11.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:19.5pt;line-height:103%'>rollbacks, automated, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>145 </span></u>routing, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>120 </span></u>rows
(RDBMS). <i style='mso-bidi-font-style:normal'>See</i> <u style='text-underline:
#0000EE'><span style='color:#0000EE'>tuples</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>S</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:470.05pt;margin-bottom:
.55pt;margin-left:-.25pt'>scaffolding code, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>126 </span></u>scaling, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>95 </span></u>horizontal, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>149 </span></u>for reads, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>94</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>96 </span></u>for writes, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>96</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:391.35pt;margin-bottom:
3.15pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>in column-family databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>107 </span></u>in
document databases, <u style='text-underline:#0000EE'><span style='color:#0000EE'>95
</span></u>in graph databases, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>119</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:391.35pt;margin-bottom:
3.15pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>vertical, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>8</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.55in;margin-bottom:
.55pt;margin-left:-.25pt'>Scatter-Gather pattern, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>67 </span></u>schemaless databases, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>28</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>30</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>148 </span></u>implicit
schema of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>29 </span></u>schema
changes in, <u style='text-underline:#0000EE'><span style='color:#0000EE'>128</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>132</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>schemas</p>

<p class=MsoNormal style='margin-top:0in;margin-right:366.6pt;margin-bottom:
.55pt;margin-left:20.0pt'>backward compatibility of, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>126</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>131 </span></u>changing, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>128</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>132 </span></u>during
development, <u style='text-underline:#0000EE'><span style='color:#0000EE'>124</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>126 </span></u>implicit,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>29 </span></u>migrations
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>123</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>132</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:482.95pt;margin-bottom:
.55pt;margin-left:-.25pt'>search engines, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>138 </span></u>security, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>139 </span></u>servers</p>

<p class=MsoNormal style='margin-top:0in;margin-right:407.85pt;margin-bottom:
.55pt;margin-left:20.0pt'>maintenance of, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>94 </span></u>processing on, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>67</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.05in;margin-bottom:
.55pt;margin-left:-.25pt'>service-oriented architecture, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>7 </span></u>services, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>136</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:359.85pt;margin-bottom:
.55pt;margin-left:20.0pt'>and security, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>139 </span></u>decomposing database layer into, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>151 </span></u>decoupling
between databases and, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>7 </span></u>over HTTP, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>7</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>sessions</p>

<p class=MsoNormal style='margin-top:0in;margin-right:454.3pt;margin-bottom:
.55pt;margin-left:20.0pt'>affinity, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>52 </span></u>consistency of, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>52</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>63 </span></u>expire keys for, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>85 </span></u>management
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>133 </span></u>sticky,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>52 </span></u>storing,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>57</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>87</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:386.1pt;margin-bottom:
.65pt;margin-left:33.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-34.5pt;line-height:103%'>sharding, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>37</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>38</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>40</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>149</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:386.1pt;margin-bottom:
.65pt;margin-left:33.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-34.5pt;line-height:103%'>and performance, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>39 </span></u>and resilience, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>39 </span></u>auto, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>39</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:386.1pt;margin-bottom:
.65pt;margin-left:33.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-34.5pt;line-height:103%'>by customer location, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>97</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:386.1pt;margin-bottom:
.65pt;margin-left:33.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:-34.5pt;line-height:103%'>combining with replication, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>43 </span></u>in
key-value databases, <u style='text-underline:#0000EE'><span style='color:#0000EE'>86
</span></u>in MongoDB, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>96</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:35.0pt'>in relational databases, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>8</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.6pt;margin-bottom:
.55pt;margin-left:-.25pt'>shared database integration, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>4</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>6 </span></u>shopping carts</p>

<p class=MsoNormal style='margin-top:0in;margin-right:392.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>expire keys for, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>85</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:392.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>inconsistency in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>55</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:392.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>persistence of, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>133</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:392.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>storing, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>87</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>shuffling, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>70</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:413.1pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>SimpleDB, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>99 </span></u>inconsistency window of, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>50</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:419.1pt;margin-bottom:
.55pt;margin-left:18.75pt;text-indent:-19.5pt'>single server approach, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>37</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>38 </span></u>consistency
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>53 </span></u>no
partition tolerance in, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>54 </span></u>transactions in, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>53 </span></u>version stamps in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>63</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:377.85pt;margin-bottom:
.55pt;margin-left:-.25pt'>single-threaded event processors, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>145 </span></u>snapshots,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>142</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>143 </span></u>social
networks, <u style='text-underline:#0000EE'><span style='color:#0000EE'>26</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>120</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:370.35pt;margin-bottom:
.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:19.5pt;line-height:103%'>relationships between nodes in, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>117</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:370.35pt;margin-bottom:
.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:19.5pt;line-height:103%'>Solr indexing engine, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>88</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>137</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>141 </span></u>split brain situation, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>53 </span></u>SQL
(Structured Query Language), <u style='text-underline:#0000EE'><span
style='color:#0000EE'>5 </span></u>SSTables (Cassandra), <u style='text-underline:
#0000EE'><span style='color:#0000EE'>103</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:370.35pt;margin-bottom:
.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:19.5pt;line-height:103%'>stale data</p>

<p class=MsoNormal style='margin-top:0in;margin-right:402.6pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>in cache, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>50 </span></u>in indexes/search engines, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>138 </span></u>reading,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>56</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:336.6pt;margin-bottom:
11.05pt;margin-left:-.25pt'>standard column families (Cassandra), <u
style='text-underline:#0000EE'><span style='color:#0000EE'>101 </span></u>sticky
sessions, <u style='text-underline:#0000EE'><span style='color:#0000EE'>52 </span></u>storage
models, <u style='text-underline:#0000EE'><span style='color:#0000EE'>13 </span></u>Strozzi,
Carlo, <u style='text-underline:#0000EE'><span style='color:#0000EE'>9 </span></u>super
column families (Cassandra), <u style='text-underline:#0000EE'><span
style='color:#0000EE'>101</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>102 </span></u>super columns (Cassandra), <u
style='text-underline:#0000EE'><span style='color:#0000EE'>101 </span></u>system
transactions, <u style='text-underline:#0000EE'><span style='color:#0000EE'>61</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>T</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:341.85pt;margin-bottom:
.55pt;margin-left:-.25pt'>tables. <i style='mso-bidi-font-style:normal'>See</i>
<u style='text-underline:#0000EE'><span style='color:#0000EE'>relational
databases</span></u>, relations in telemetric data from physical devices, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>57 </span></u>Terrastore
DB, <u style='text-underline:#0000EE'><span style='color:#0000EE'>91</span></u>,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>94 </span></u>timestamps</p>

<p class=MsoNormal style='margin-top:0in;margin-right:391.35pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>consistent notion of time for, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>64 </span></u>in
column-family databases, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>100</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:391.35pt;margin-bottom:
.65pt;margin-left:19.5pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>of last update, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>63</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:322.35pt;margin-bottom:
.55pt;margin-left:-.25pt'>transactional memory systems, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>145 </span></u>transactions, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>50</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:285.05pt;margin-bottom:
3.05pt;margin-left:20.0pt'>ACID, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>10</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>19</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>26</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>28</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>50</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>56</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>109</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>114</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>115 </span></u>across multiple operations, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>92</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:365.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>and performance, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>53 </span></u>atomic, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>92</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>104 </span></u>business, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>61 </span></u>in graph databases, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>28</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>114</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>115</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:365.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>in key-value databases, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>84</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>88</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:365.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>in RDBMS, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>4</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>26</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>92</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:365.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>in single server systems, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>53</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:365.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>lack of support in NoSQL for, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>10</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>61</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:365.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>multioperation, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>88</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:365.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>open during user interaction, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>52</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:365.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>rolling back, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>4</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:365.1pt;margin-bottom:
.55pt;margin-left:20.0pt'>system, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>61</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:440.8pt;margin-bottom:
.55pt;margin-left:-.25pt'>tree structures, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>117 </span></u>triggers, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>126</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:385.5pt;margin-bottom:
11.05pt;margin-left:-.25pt'>TTL (Time To Live), <u style='text-underline:#0000EE'><span
style='color:#0000EE'>108</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>109 </span></u>tuples (RDBMS), <u style='text-underline:
#0000EE'><span style='color:#0000EE'>5</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>13</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>14</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>U</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>updates</p>

<p class=MsoNormal style='margin-top:0in;margin-right:431.8pt;margin-bottom:
.55pt;margin-left:20.0pt'>atomic, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>50</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>61 </span></u>conditional, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>48</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>62</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>63 </span></u>consistency of, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>47</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>56</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>61 </span></u>lost, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>47 </span></u>merging, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>48 </span></u>timestamps
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>63</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>64</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:468.8pt;margin-bottom:
11.05pt;margin-left:-.25pt'>user comments, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>98</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:468.8pt;margin-bottom:
11.05pt;margin-left:-.25pt'>user preferences, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>87 </span></u>user profiles, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>87</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>98 </span></u>user registrations, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>98 </span></u>user
sessions, <u style='text-underline:#0000EE'><span style='color:#0000EE'>57</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>V</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:403.35pt;margin-bottom:
.55pt;margin-left:-.25pt'>vector clock, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>64 </span></u>version control systems, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>126</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>145</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:20.0pt'>distributed, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>48</span></u>, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>64</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:446.8pt;margin-bottom:
11.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>version stamps, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>52</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>61</span></u><u style='text-underline:
#0000EE'><span style='color:#0000EE'>64 </span></u>version vector, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>64</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:446.8pt;margin-bottom:
11.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>views, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>126 </span></u>virtual columns, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>126 </span></u>Voldemort DB, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>10</span></u>, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>82</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>W</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:434.8pt;margin-bottom:
.55pt;margin-left:-.25pt'>web services, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>7 </span></u>websites distributing pages for, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>39 </span></u>on
large clusters, <u style='text-underline:#0000EE'><span style='color:#0000EE'>149
</span></u>publishing, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>98 </span></u>visitor counters for, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>108</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:432.55pt;margin-bottom:
11.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>word processors, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>3 </span></u>write tolerance, <u
style='text-underline:#0000EE'><span style='color:#0000EE'>84 </span></u>writes,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>64 </span></u>atomic,
<u style='text-underline:#0000EE'><span style='color:#0000EE'>104 </span></u>conflicts
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>47</span></u><u
style='text-underline:#0000EE'><span style='color:#0000EE'>48 </span></u>consistency
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>92 </span></u>horizontal
scaling for, <u style='text-underline:#0000EE'><span style='color:#0000EE'>96 </span></u>performance
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>91 </span></u>quorums
of, <u style='text-underline:#0000EE'><span style='color:#0000EE'>58 </span></u>separating
from reads, <u style='text-underline:#0000EE'><span style='color:#0000EE'>41</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:432.55pt;margin-bottom:
11.15pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:103%'>serializing, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>47</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>X</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>XML (Extensible Markup Language), <u style='text-underline:
#0000EE'><span style='color:#0000EE'>7</span></u>, <u style='text-underline:
#0000EE'><span style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>XML databases, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>145</span></u><u style='text-underline:#0000EE'><span
style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>XML Schema language, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>XPath language, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:.6pt;
margin-left:-.25pt'>XQuery language, <u style='text-underline:#0000EE'><span
style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.1pt;margin-bottom:11.05pt;
margin-left:-.25pt'>XSLT (Extensible Stylesheet Language Transformations), <u
style='text-underline:#0000EE'><span style='color:#0000EE'>146</span></u></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.75pt;
margin-left:-.25pt;line-height:110%'><b style='mso-bidi-font-weight:normal'><span
style='font-size:17.5pt;mso-bidi-font-size:11.0pt;line-height:110%'>Z</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:2.9pt;
margin-left:.5pt;line-height:103%'>ZooKeeper. <i style='mso-bidi-font-style:
normal'>See</i> <u style='text-underline:#0000EE'><span style='color:#0000EE'>Apache
ZooKeeper</span></u></p>

</div>

<span style='font-size:15.0pt;mso-bidi-font-size:11.0pt;line-height:104%;
font-family:"Times New Roman",serif;mso-fareast-font-family:"Times New Roman";
color:black;mso-ansi-language:EN-GB;mso-fareast-language:EN-GB;mso-bidi-language:
AR-SA'><br clear=all style='page-break-before:always;mso-break-type:section-break'>
</span>

<div class=WordSection3>

<p class=MsoNormal style='margin-top:0in;margin-right:-2.55pt;margin-bottom:
0in;margin-left:-8.5pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12493"
 o:spid="_x0000_i1065" type="#_x0000_t75" style='width:479.25pt;height:775.5pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image063.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=639 height=1034
src="nosql_files/image064.jpg" v:shapes="Picture_x0020_12493"><![endif]></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:-29.5pt;margin-bottom:
0in;margin-left:-35.5pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12497"
 o:spid="_x0000_i1064" type="#_x0000_t75" style='width:533.25pt;height:774.75pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image065.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=711 height=1033
src="nosql_files/image066.jpg" v:shapes="Picture_x0020_12497"><![endif]></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:80.7pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12501"
 o:spid="_x0000_i1063" type="#_x0000_t75" style='width:300pt;height:405.75pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image067.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=400 height=541
src="nosql_files/image067.jpg" v:shapes="Picture_x0020_12501"><![endif]></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:99.45pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12506"
 o:spid="_x0000_i1062" type="#_x0000_t75" style='width:262.5pt;height:245.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image068.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=350 height=327
src="nosql_files/image068.jpg" v:shapes="Picture_x0020_12506"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:80.7pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12511"
 o:spid="_x0000_i1061" type="#_x0000_t75" style='width:300pt;height:134.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image069.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=400 height=179
src="nosql_files/image069.jpg" v:shapes="Picture_x0020_12511"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:99.45pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12516"
 o:spid="_x0000_i1060" type="#_x0000_t75" style='width:262.5pt;height:96pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image070.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=350 height=128
src="nosql_files/image070.jpg" v:shapes="Picture_x0020_12516"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:5.7pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12521"
 o:spid="_x0000_i1059" type="#_x0000_t75" style='width:450pt;height:141pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image071.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=600 height=188
src="nosql_files/image071.jpg" v:shapes="Picture_x0020_12521"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:69.45pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12526"
 o:spid="_x0000_i1058" type="#_x0000_t75" style='width:323.25pt;height:159pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image072.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=431 height=212
src="nosql_files/image072.jpg" v:shapes="Picture_x0020_12526"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:118.15pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12531"
 o:spid="_x0000_i1057" type="#_x0000_t75" style='width:225pt;height:141pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image073.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=300 height=188
src="nosql_files/image073.jpg" v:shapes="Picture_x0020_12531"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:61.95pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12536"
 o:spid="_x0000_i1056" type="#_x0000_t75" style='width:337.5pt;height:306pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image074.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=450 height=408
src="nosql_files/image074.jpg" v:shapes="Picture_x0020_12536"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12541" o:spid="_x0000_s1059" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:77.7pt;margin-top:4.5pt;width:449.8pt;
  height:45.75pt;z-index:251658240;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image075.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=103 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=600 height=1 src="nosql_files/image076.jpg" v:shapes="Picture_x0020_12541"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:80.7pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12546"
 o:spid="_x0000_i1055" type="#_x0000_t75" style='width:300pt;height:132.75pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image077.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=400 height=177
src="nosql_files/image077.jpg" v:shapes="Picture_x0020_12546"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12551" o:spid="_x0000_s1058" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:77.7pt;margin-top:4.5pt;width:449.8pt;
  height:28.5pt;z-index:251659264;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image078.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=103 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=600 height=1 src="nosql_files/image079.jpg" v:shapes="Picture_x0020_12551"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12556" o:spid="_x0000_s1057" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:96.45pt;margin-top:4.5pt;width:412.35pt;
  height:62.25pt;z-index:251660288;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image080.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=129 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=550 height=1 src="nosql_files/image081.jpg" v:shapes="Picture_x0020_12556"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:118.15pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12561"
 o:spid="_x0000_i1054" type="#_x0000_t75" style='width:225pt;height:138pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image082.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=300 height=184
src="nosql_files/image082.jpg" v:shapes="Picture_x0020_12561"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:5.7pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12566"
 o:spid="_x0000_i1053" type="#_x0000_t75" style='width:450pt;height:150pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image083.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=600 height=200
src="nosql_files/image083.jpg" v:shapes="Picture_x0020_12566"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12571" o:spid="_x0000_s1056" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:59pt;margin-top:4.5pt;width:487.3pt;
  height:12.75pt;z-index:251661312;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image084.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=79 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=650 height=1 src="nosql_files/image085.jpg" v:shapes="Picture_x0020_12571"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:118.15pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12576"
 o:spid="_x0000_i1052" type="#_x0000_t75" style='width:225pt;height:94.5pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image086.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=300 height=126
src="nosql_files/image086.jpg" v:shapes="Picture_x0020_12576"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:-25.0pt;margin-bottom:
0in;margin-left:-31.75pt;margin-bottom:.0001pt;text-indent:0in;line-height:
107%'><span style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12581"
 o:spid="_x0000_i1051" type="#_x0000_t75" style='width:525pt;height:236.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image087.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=315
src="nosql_files/image087.jpg" v:shapes="Picture_x0020_12581"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12586" o:spid="_x0000_s1055" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:133.95pt;margin-top:4.5pt;width:337.35pt;
  height:30pt;z-index:251662336;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image088.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=179 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=450 height=1 src="nosql_files/image089.jpg" v:shapes="Picture_x0020_12586"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12591" o:spid="_x0000_s1054" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:115.2pt;margin-top:4.5pt;width:374.85pt;
  height:58.5pt;z-index:251663360;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image090.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=154 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=500 height=1 src="nosql_files/image091.jpg" v:shapes="Picture_x0020_12591"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12596" o:spid="_x0000_s1053" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:77.7pt;margin-top:4.5pt;width:449.8pt;
  height:28.5pt;z-index:251664384;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image092.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=103 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=600 height=1 src="nosql_files/image093.jpg" v:shapes="Picture_x0020_12596"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12601" o:spid="_x0000_s1052" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:77.7pt;margin-top:4.5pt;width:449.8pt;
  height:12.75pt;z-index:251665408;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image094.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=103 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=600 height=1 src="nosql_files/image095.jpg" v:shapes="Picture_x0020_12601"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:-25.0pt;margin-bottom:
0in;margin-left:-31.75pt;margin-bottom:.0001pt;text-indent:0in;line-height:
107%'><span style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12606"
 o:spid="_x0000_i1050" type="#_x0000_t75" style='width:525pt;height:189pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image096.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=252
src="nosql_files/image096.jpg" v:shapes="Picture_x0020_12606"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12611" o:spid="_x0000_s1051" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:77.7pt;margin-top:4.5pt;width:449.8pt;
  height:11.25pt;z-index:251666432;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image097.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=103 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=600 height=1 src="nosql_files/image098.jpg" v:shapes="Picture_x0020_12611"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12616" o:spid="_x0000_s1050" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:115.2pt;margin-top:4.5pt;width:374.85pt;
  height:13.5pt;z-index:251667456;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image099.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=154 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=500 height=1 src="nosql_files/image100.jpg" v:shapes="Picture_x0020_12616"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12621" o:spid="_x0000_s1049" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:40.25pt;margin-top:4.5pt;width:524.8pt;
  height:12pt;z-index:251668480;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image101.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=54 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=700 height=1 src="nosql_files/image102.jpg" v:shapes="Picture_x0020_12621"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12626" o:spid="_x0000_s1048" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:40.25pt;margin-top:4.5pt;width:524.8pt;
  height:13.5pt;z-index:251669504;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image103.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=54 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=700 height=1 src="nosql_files/image104.jpg" v:shapes="Picture_x0020_12626"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.6in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12631"
 o:spid="_x0000_i1049" type="#_x0000_t75" style='width:375pt;height:76.5pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image105.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=500 height=102
src="nosql_files/image105.jpg" v:shapes="Picture_x0020_12631"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12636" o:spid="_x0000_s1047" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:96.45pt;margin-top:4.5pt;width:412.35pt;
  height:13.5pt;z-index:251670528;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image106.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=129 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=550 height=1 src="nosql_files/image107.jpg" v:shapes="Picture_x0020_12636"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12641" o:spid="_x0000_s1046" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:77.7pt;margin-top:4.5pt;width:449.8pt;
  height:30pt;z-index:251671552;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image108.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=103 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=600 height=1 src="nosql_files/image109.jpg" v:shapes="Picture_x0020_12641"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:118.15pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12646"
 o:spid="_x0000_i1048" type="#_x0000_t75" style='width:225pt;height:90.75pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image110.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=300 height=121
src="nosql_files/image110.jpg" v:shapes="Picture_x0020_12646"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:118.15pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12651"
 o:spid="_x0000_i1047" type="#_x0000_t75" style='width:225pt;height:248.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image111.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=300 height=331
src="nosql_files/image111.jpg" v:shapes="Picture_x0020_12651"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:99.45pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12656"
 o:spid="_x0000_i1046" type="#_x0000_t75" style='width:262.5pt;height:126pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image112.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=350 height=168
src="nosql_files/image112.jpg" v:shapes="Picture_x0020_12656"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:99.45pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12661"
 o:spid="_x0000_i1045" type="#_x0000_t75" style='width:262.5pt;height:288.75pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image113.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=350 height=385
src="nosql_files/image113.jpg" v:shapes="Picture_x0020_12661"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:99.45pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12666"
 o:spid="_x0000_i1044" type="#_x0000_t75" style='width:262.5pt;height:272.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image114.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=350 height=363
src="nosql_files/image114.jpg" v:shapes="Picture_x0020_12666"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12671" o:spid="_x0000_s1045" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:40.25pt;margin-top:4.5pt;width:524.8pt;
  height:47.25pt;z-index:251672576;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image115.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=54 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=700 height=1 src="nosql_files/image116.jpg" v:shapes="Picture_x0020_12671"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:61.95pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12676"
 o:spid="_x0000_i1043" type="#_x0000_t75" style='width:337.5pt;height:116.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image117.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=450 height=155
src="nosql_files/image117.jpg" v:shapes="Picture_x0020_12676"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12681" o:spid="_x0000_s1044" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:77.7pt;margin-top:4.5pt;width:449.8pt;
  height:48pt;z-index:251673600;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image118.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=103 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=600 height=1 src="nosql_files/image119.jpg" v:shapes="Picture_x0020_12681"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:61.95pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12686"
 o:spid="_x0000_i1042" type="#_x0000_t75" style='width:337.5pt;height:177pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image120.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=450 height=236
src="nosql_files/image120.jpg" v:shapes="Picture_x0020_12686"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12691" o:spid="_x0000_s1043" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:171.45pt;margin-top:4.5pt;width:262.4pt;
  height:44.25pt;z-index:251674624;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image121.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=229 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=350 height=1 src="nosql_files/image122.jpg" v:shapes="Picture_x0020_12691"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12696" o:spid="_x0000_s1042" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:133.95pt;margin-top:4.5pt;width:337.35pt;
  height:66pt;z-index:251675648;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image123.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=179 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=450 height=1 src="nosql_files/image124.jpg" v:shapes="Picture_x0020_12696"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:118.2pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12701"
 o:spid="_x0000_i1041" type="#_x0000_t75" style='width:225pt;height:74.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image125.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=300 height=99
src="nosql_files/image125.jpg" v:shapes="Picture_x0020_12701"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:61.95pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12706"
 o:spid="_x0000_i1040" type="#_x0000_t75" style='width:337.5pt;height:84pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image126.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=450 height=112
src="nosql_files/image126.jpg" v:shapes="Picture_x0020_12706"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12711" o:spid="_x0000_s1041" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:115.2pt;margin-top:4.5pt;width:374.85pt;
  height:12.75pt;z-index:251676672;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image127.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=154 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=500 height=1 src="nosql_files/image128.jpg" v:shapes="Picture_x0020_12711"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12716" o:spid="_x0000_s1040" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:96.45pt;margin-top:4.5pt;width:412.35pt;
  height:41.25pt;z-index:251677696;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image129.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=129 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=550 height=1 src="nosql_files/image130.jpg" v:shapes="Picture_x0020_12716"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12721" o:spid="_x0000_s1039" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:133.95pt;margin-top:4.5pt;width:337.35pt;
  height:42.75pt;z-index:251678720;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image131.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=179 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=450 height=1 src="nosql_files/image132.jpg" v:shapes="Picture_x0020_12721"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12726" o:spid="_x0000_s1038" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:96.45pt;margin-top:4.5pt;width:412.35pt;
  height:11.25pt;z-index:251679744;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image133.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=129 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=550 height=1 src="nosql_files/image134.jpg" v:shapes="Picture_x0020_12726"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12731" o:spid="_x0000_s1037" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:21.5pt;margin-top:4.5pt;width:562.25pt;
  height:13.5pt;z-index:251680768;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image135.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=29 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=750 height=1 src="nosql_files/image136.jpg" v:shapes="Picture_x0020_12731"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:80.7pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12736"
 o:spid="_x0000_i1039" type="#_x0000_t75" style='width:300pt;height:81pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image137.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=400 height=108
src="nosql_files/image137.jpg" v:shapes="Picture_x0020_12736"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12741" o:spid="_x0000_s1036" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:133.95pt;margin-top:4.5pt;width:337.35pt;
  height:45pt;z-index:251681792;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image138.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=179 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=450 height=1 src="nosql_files/image139.jpg" v:shapes="Picture_x0020_12741"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.6in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12746"
 o:spid="_x0000_i1038" type="#_x0000_t75" style='width:375pt;height:142.5pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image140.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=500 height=190
src="nosql_files/image140.jpg" v:shapes="Picture_x0020_12746"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12751" o:spid="_x0000_s1035" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:77.7pt;margin-top:4.5pt;width:449.8pt;
  height:13.5pt;z-index:251682816;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image141.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=103 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=600 height=1 src="nosql_files/image142.jpg" v:shapes="Picture_x0020_12751"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:5.7pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12756"
 o:spid="_x0000_i1037" type="#_x0000_t75" style='width:450pt;height:132.75pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image143.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=600 height=177
src="nosql_files/image143.jpg" v:shapes="Picture_x0020_12756"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12761" o:spid="_x0000_s1034" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:77.7pt;margin-top:4.5pt;width:449.8pt;
  height:13.5pt;z-index:251683840;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image144.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=103 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=600 height=1 src="nosql_files/image145.jpg" v:shapes="Picture_x0020_12761"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12766" o:spid="_x0000_s1033" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:96.45pt;margin-top:4.5pt;width:412.35pt;
  height:27pt;z-index:251684864;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image146.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=129 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=550 height=1 src="nosql_files/image147.jpg" v:shapes="Picture_x0020_12766"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12771" o:spid="_x0000_s1032" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:40.25pt;margin-top:4.5pt;width:524.8pt;
  height:13.5pt;z-index:251685888;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image148.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=54 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=700 height=1 src="nosql_files/image149.jpg" v:shapes="Picture_x0020_12771"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:5.7pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12776"
 o:spid="_x0000_i1036" type="#_x0000_t75" style='width:450pt;height:83.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image150.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=600 height=111
src="nosql_files/image150.jpg" v:shapes="Picture_x0020_12776"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:-6.3pt;margin-bottom:
0in;margin-left:-13.0pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12781"
 o:spid="_x0000_i1035" type="#_x0000_t75" style='width:487.5pt;height:104.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image151.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=650 height=139
src="nosql_files/image151.jpg" v:shapes="Picture_x0020_12781"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:5.7pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12786"
 o:spid="_x0000_i1034" type="#_x0000_t75" style='width:450pt;height:89.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image152.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=600 height=119
src="nosql_files/image152.jpg" v:shapes="Picture_x0020_12786"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:-25.0pt;margin-bottom:
0in;margin-left:-31.75pt;margin-bottom:.0001pt;text-indent:0in;line-height:
107%'><span style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12791"
 o:spid="_x0000_i1033" type="#_x0000_t75" style='width:525pt;height:67.5pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image153.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=90
src="nosql_files/image153.jpg" v:shapes="Picture_x0020_12791"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:24.45pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12796"
 o:spid="_x0000_i1032" type="#_x0000_t75" style='width:412.5pt;height:92.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image154.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=550 height=123
src="nosql_files/image154.jpg" v:shapes="Picture_x0020_12796"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12801" o:spid="_x0000_s1031" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:115.2pt;margin-top:4.5pt;width:374.85pt;
  height:45pt;z-index:251686912;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image155.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=154 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=500 height=1 src="nosql_files/image156.jpg" v:shapes="Picture_x0020_12801"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12806" o:spid="_x0000_s1030" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:115.2pt;margin-top:4.5pt;width:374.85pt;
  height:45pt;z-index:251687936;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image157.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=154 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=500 height=1 src="nosql_files/image158.jpg" v:shapes="Picture_x0020_12806"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12811" o:spid="_x0000_s1029" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:133.95pt;margin-top:4.5pt;width:337.35pt;
  height:42pt;z-index:251688960;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image159.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=179 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=450 height=1 src="nosql_files/image160.jpg" v:shapes="Picture_x0020_12811"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12816" o:spid="_x0000_s1028" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:115.2pt;margin-top:4.5pt;width:374.85pt;
  height:58.5pt;z-index:251689984;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image161.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=154 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=500 height=1 src="nosql_files/image162.jpg" v:shapes="Picture_x0020_12816"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:24.45pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12821"
 o:spid="_x0000_i1031" type="#_x0000_t75" style='width:412.5pt;height:97.5pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image163.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=550 height=130
src="nosql_files/image163.jpg" v:shapes="Picture_x0020_12821"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:24.45pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12826"
 o:spid="_x0000_i1030" type="#_x0000_t75" style='width:412.5pt;height:320.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image164.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=550 height=427
src="nosql_files/image164.jpg" v:shapes="Picture_x0020_12826"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:5.7pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12831"
 o:spid="_x0000_i1029" type="#_x0000_t75" style='width:450pt;height:168.75pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image165.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=600 height=225
src="nosql_files/image165.jpg" v:shapes="Picture_x0020_12831"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:5.7pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12836"
 o:spid="_x0000_i1028" type="#_x0000_t75" style='width:450pt;height:77.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image166.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=600 height=103
src="nosql_files/image166.jpg" v:shapes="Picture_x0020_12836"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12841" o:spid="_x0000_s1027" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:151.2pt;margin-top:4.5pt;width:303.6pt;
  height:38.25pt;z-index:251691008;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image167.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=202 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=405 height=1 src="nosql_files/image168.jpg" v:shapes="Picture_x0020_12841"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<br clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:61.95pt;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12846"
 o:spid="_x0000_i1027" type="#_x0000_t75" style='width:337.5pt;height:196.5pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image169.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=450 height=262
src="nosql_files/image169.jpg" v:shapes="Picture_x0020_12846"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:-25.0pt;margin-bottom:
0in;margin-left:-31.75pt;margin-bottom:.0001pt;text-indent:0in;line-height:
107%'><span style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12851"
 o:spid="_x0000_i1026" type="#_x0000_t75" style='width:525pt;height:126.75pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image170.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=700 height=169
src="nosql_files/image170.jpg" v:shapes="Picture_x0020_12851"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.6in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><span
style='mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12856"
 o:spid="_x0000_i1025" type="#_x0000_t75" style='width:375pt;height:74.25pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="nosql_files/image171.jpg" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=500 height=99
src="nosql_files/image171.jpg" v:shapes="Picture_x0020_12856"><![endif]></span><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.5in;margin-bottom:0in;
margin-left:-1.0in;margin-bottom:.0001pt;text-indent:0in;line-height:107%'><!--[if gte vml 1]><o:wrapblock><v:shape
  id="Picture_x0020_12861" o:spid="_x0000_s1026" type="#_x0000_t75" style='position:absolute;
  left:0;text-align:left;margin-left:59pt;margin-top:4.5pt;width:487.3pt;
  height:63.75pt;z-index:251692032;visibility:visible;mso-wrap-style:square;
  mso-wrap-distance-left:9pt;mso-wrap-distance-top:0;mso-wrap-distance-right:9pt;
  mso-wrap-distance-bottom:0;mso-position-horizontal:absolute;
  mso-position-horizontal-relative:page;mso-position-vertical:absolute;
  mso-position-vertical-relative:page' o:allowoverlap="f">
  <v:imagedata src="nosql_files/image172.jpg" o:title=""/>
  <w:wrap type="topAndBottom" anchorx="page" anchory="page"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
 <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=79 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=650 height=1 src="nosql_files/image173.jpg" v:shapes="Picture_x0020_12861"></td>
  </tr>
 </table>
 </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
</p>

</div>
<div class="w3-bar">
        
   
    <a href="/index.html" class="w3-bar-item w3-button">Home</a></li>
    <a href="/backend.html" class="w3-bar-item w3-button">Back end developement</a></li>
    <a href="/frontend.html" class="w3-bar-item w3-button">Front end developement</a></li>
    <a href="/fullstack.html" class="w3-bar-item w3-button">Fullstack developement</a></li>
   
    
    
    
    
   
    
    


</div>
<div class='w3-bar'>
   
<a href="myhtm.html"   class="w3-bar-item w3-button w3-white">Html</a>
<a href="css.html"  active class="w3-bar-item w3-button w3-white">Css</a>
<a href="javascript.htm" class="w3-bar-item w3-button w3-white" >Javascript</a>
<a href="sql.htm" class="w3-bar-item w3-button w3-white" >DATABASE - SQL</a>
<a href="nosql.htm" class="w3-bar-item w3-button w3-white" >DATABASE - NoSQL</a>

<a href="frameworks.html"  class="w3-bar-item w3-button w3-white">Frame works and libraries</a>

</div>



    <div class="w3-container w3-dark-grey">
        <h2 class="w3-dark-grey">Useful Links</h2>
        <a href="https://developer.mozilla.org/en-US/docs/Web/HTML"   class="w3-bar-item w3-button w3-white">Html documentation - mozilla</a>
        <a href="https://www.w3.org/TR/html52/"   class="w3-bar-item w3-button w3-white">Html documentation - W3</a>
            <a href="https://developer.mozilla.org/en-US/docs/Web/CSS"   class="w3-bar-item w3-button w3-white">CSS documentation - Mozzila</a>  
             <a href="https://www.w3.org/Style/CSS/specs.en.html"  class="w3-bar-item w3-button w3-white">CSS Documentation - W3</a>
             <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"   class="w3-bar-item w3-button w3-white">javascript Documentation - Mozzila</a>

 
 <a href="https://www.w3resource.com/mongodb/nosql.php"   class="w3-bar-item w3-button w3-white">nOsql documentation -  W3resource</a>
 </div>
 

        <div class="w3-container w3-grey">

        <p class="w3-right">Copyright &copy; White Rhino School </p>
        <p class="w3-left w3-teal">FOUNDER : Irene . K</p>
        <a href="disclaimer.html"   class="w3-bar-item w3-red">Disclaimer</a>
    </div>
</body>

</html>
